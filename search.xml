<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GZIP 的压缩原理与日常应用</title>
      <link href="/2024/09/01/ArrayList/GzipRaw/"/>
      <url>/2024/09/01/ArrayList/GzipRaw/</url>
      
        <content type="html"><![CDATA[<h2 id="GZIP-的压缩原理"><a href="#GZIP-的压缩原理" class="headerlink" title="GZIP 的压缩原理"></a>GZIP 的压缩原理</h2><p>Gzip是一种无损压缩工具，以将大块数据变得更小而闻名。</p><blockquote><p>Gzip 压缩的原理是通过去除数据中的冗余信息，使用较短的代码表示频繁出现的字符或字符序列，从而减小数据文件的大小。这种压缩算法通常用于减少存储空间需求和加快网络传输速度。</p></blockquote><h3 id="LZ777"><a href="#LZ777" class="headerlink" title="LZ777"></a>LZ777</h3><p><img src="https://oss.gincode.icu/pics/image-20240905003956137.png" alt="image-20240905003956137"></p><p>LZ77 的核心思路是如果一个串中有两个重复的串，<strong>那么只需要知道第一个串的内容和后面串相对于第一个串起始位置的距离 + 串的长度</strong>。</p><p>比如： ABCDEFGABCDEFH → ABCDEFG(7,6)H。7 指的是往前第 7 个数开始，6 指的是重复串的长度，ABCDEFG(7,6)H 完全可以表示前面的串，并且是没有二义性的。</p><p>LZ77 用 <a href="https://zhida.zhihu.com/search?q=滑动窗口&amp;zhida_source=entity&amp;is_preview=1">滑动窗口</a>（sliding-window compression）来实现这个算法。具体思路是扫描头从串的头部开始扫描串，在扫描头的前面有一个长度为 N 的滑动窗口。如果发现扫描头处的串和窗口里的 <strong>最长匹配串</strong> 是相同的，则用（两个串之间的距离，串的长度）来代替后一个重复的串，同时还需要添加一个表示是真实串还是替换后的“串”的字节在前面以方便解压（此串需要在 真实串和替换“串” 之前都有存在）。</p><p>例如：缓冲区字符（ABCB）在滑动窗口的位移6位置找到AB,成功匹配到短语AB,将ABC编码为(6,2,C)</p><p><img src="https://oss.gincode.icu/pics/11345047-9216beb2bbb63b14.png" alt="img"></p><h3 id="Huffman-Coding"><a href="#Huffman-Coding" class="headerlink" title="Huffman Coding"></a>Huffman Coding</h3><p>Huffman Coding 是大学课本中都会提到的算法。核心思路是通过构造 Huffman Tree 的方式给字符重新编码（核心是避免一个叶子的路径是另外一个叶子路径的前缀），以保证出现频路越高的字符占用的字节越少。</p><p>哈夫曼树的应用很广，哈夫曼编码就是其在电讯通信中的应用之一。广泛地用于数据文件压缩的十分有效的编码方法。其压缩率通常在20%～90%之间。</p><p>解压：Huffman Coding 之后需要维护一张 Huffman Map 表，来记录重新编码后的字符串，根据这张表，还原原始串也是非常高效的。</p><blockquote><p><strong>路径</strong>： 在一棵树中 ,从一个结点到另外一个结点的通路就称为 树的路径 .如图1.1 从根节点root到D节点之间的通路就是二叉树中的一条路径</p></blockquote><p><img src="https://oss.gincode.icu/pics/lhiq634h3jnbs_980d20b9b7dd4c1e8c7f107a6ec029ba.png" alt="img"></p><h3 id="压缩核心之-Deflate"><a href="#压缩核心之-Deflate" class="headerlink" title="压缩核心之 Deflate"></a>压缩核心之 Deflate</h3><p><code>GZIP 的核心是</code> <code>Deflate</code>，在 <a href="https://tools.ietf.org/html/rfc1951">RFC 1951</a> 中被标准化，并且在当时作为 <a href="https://zh.wikipedia.org/wiki/LZW">LZW</a> 的替代品有了非常广泛的使用。</p><p><code>Deflate</code> 是一个同时使用 LZ77 与 Huffman Coding 的算法.</p><p>如果想探究加解密的原理请看：《数据压缩技术原理与范例》</p><h2 id="http传输应用"><a href="#http传输应用" class="headerlink" title="http传输应用"></a>http传输应用</h2><p>在 <a href="https://tools.ietf.org/html/rfc2016">RFC 2016</a> 中 GZIP 已经成为了规定的三种标准HTTP压缩格式之一。目前绝大多数的网站都在使用 GZIP 传输 HTML、CSS、JavaScript 等资源文件。</p><h3 id="nginx开启"><a href="#nginx开启" class="headerlink" title="nginx开启"></a>nginx开启</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩等级，1-9。设置多少可以参考：http://serverfault.com/questions/253074/what-is-the-best-nginx-compression-gzip-level</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;MSIE [1-6]\.&quot; 比如禁止 IE6 使用 GZIP</span></span><br><span class="line"><span class="attribute">gzip_disable</span> regex ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小压缩文件长度</span></span><br><span class="line">gzip_min_length <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 GZIP 压缩的最小 HTTP 版本</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩的文件类型，值是 [MIME type](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types)</span></span><br><span class="line"><span class="attribute">gzip_types</span> text/html;</span><br></pre></td></tr></table></figure><p>打开浏览器，访问你的网站，看 Chrome 的 Network，点 use larger request row，如果 Size 上有两个不一样大小的体积（如：222KB 和 613KB），则代表 GZIP 已经成功开启。</p><p>那浏览器又是如何和服务器配合的呢？</p><p><a href="https://user-images.githubusercontent.com/7554325/44306904-33f23500-a3cb-11e8-8eeb-9a1ce8af9f42.png"><img src="https://oss.gincode.icu/pics/44306904-33f23500-a3cb-11e8-8eeb-9a1ce8af9f42.png" alt="image"></a></p><p>浏览器在请求资源的时候再 header 里面带上 <code>accept-encoding: gzip</code> 的参数。Nginx 在接收到 Header 之后，发现如果有这个配置，则发送 GZIP 之后的文件（返回的 header 里也包含相关的说明），如果没有则发送源文件。浏览器根据 response header 来处理要不要针对返回的文件进行解压缩然后展示。</p><h2 id="缓存应用"><a href="#缓存应用" class="headerlink" title="缓存应用"></a>缓存应用</h2><p>我们在使用缓存中间件或者一些存储层的时候总会遇到存储的数据太庞大的问题。</p><p>解决办法：<strong>分片、压缩</strong></p><p>分片就不多说了。</p><p>在java中有原生的GZIPInputStream实现，还可以使用Guava或者hutool去简单实现压缩。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;一般来说，gzip 压缩算法的目的是减少数据量，从而节省存储空间或提高传输效率。然而，在某些情况下，gzip 压缩后的文件或数据可能实际上会占据更大的存储空间。这通常涉及到以下几个因素：“&quot;</span>+ <span class="string">&quot;数据的特性“、“压缩级别”、“上下文和字典”和“文件系统开销”。&quot;</span>+</span><br><span class="line"><span class="string">&quot;压缩级别gzip 压缩算法通常允许用户指定压缩级别，这决定了压缩的程度。更高的压缩级别意味着更高的压缩比，但同时也需要更多的计算资源和时间。如果选择了低压缩级别，或者没有根据数据特点选择合适的压缩级别，可能无法实现期望的存储节省。上下文和字典gzip 算法依赖于上下文和字典来压缩数据。如果数据中缺乏足够的重复模式或上下文信息，gzip 可能无法构建有效的字典，从而无法达到良好的压缩效果。文件系统开销在某些文统，文件的存储方式和文件系统的开销可能影响文件的总大小。例如，文件系统中的文件分配单元大小、元数据开销或碎片问题都可能导致实际存储的文件大小超过其内容本身的大小。要减少 gzip 压缩后文件大小增加的可能性，可以考虑以下几点：选择适合的压缩级别，通常建议尝试不同级别以找到最佳平衡。对于已经高度压缩的数据格式，可以考虑使用专门为这些格式设计的其他压缩工具或算法。在压缩之前，对数据进行预处理，例如删除不需要的元数据或空白，以减少需要压缩的数据量。如果存储空间是主要考虑因素，可以使用更高效的压缩算法或工具，或者考虑使用不同的存储格式。如果文件系统开销是问题，可以尝试优化文件系统设置，例如选择合适的簇大小或进行文件系统碎片整理&quot;</span> +</span><br><span class="line"><span class="string">&quot;压缩级别gzip 压缩算法通常允许用户指定压缩级别，这决定了压缩的程度。更高的压缩级别意味着更高的压缩比，但同时也需要更多的计算资源和时间。如果选择了低压缩级别，或者没有根据数据特点选择合适的压缩级别，可能无法实现期望的存储节省。上下文和字典gzip 算法依赖于上下文和字典来压缩数据。如果数据中缺乏足够的重复模式或上下文信息，gzip 可能无法构建有效的字典，从而无法达到良好的压缩效果。文件系统开销在某些文统，文件的存储方式和文件系统的开销可能影响文件的总大小。例如，文件系统中的文件分配单元大小、元数据开销或碎片问题都可能导致实际存储的文件大小超过其内容本身的大小。要减少 gzip 压缩后文件大小增加的可能性，可以考虑以下几点：选择适合的压缩级别，通常建议尝试不同级别以找到最佳平衡。对于已经高度压缩的数据格式，可以考虑使用专门为这些格式设计的其他压缩工具或算法。在压缩之前，对数据进行预处理，例如删除不需要的元数据或空白，以减少需要压缩的数据量。如果存储空间是主要考虑因素，可以使用更高效的压缩算法或工具，或者考虑使用不同的存储格式。如果文件系统开销是问题，可以尝试优化文件系统设置，例如选择合适的簇大小或进行文件系统碎片整;</span></span><br><span class="line"><span class="string">        byte[] bytes = ZipUtil.gzip(s.getBytes());</span></span><br><span class="line"><span class="string">        System.out.println(bytes.length);</span></span><br><span class="line"><span class="string">        System.out.println(s.getBytes().length); //963</span></span><br><span class="line"><span class="string">        byte[] unGzip = ZipUtil.unGzip(bytes);//3379</span></span><br><span class="line"><span class="string">        System.out.println(new String(unGzip));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p> 原始字符占<strong>3379</strong>字节压缩后占<strong>963</strong>字节，释放了将近<strong>70%</strong>的空间,</p><p>我们简单了解原理后可以知道如果重复字符占比较多那么压缩效率会更大。</p></blockquote><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://zhuanlan.zhihu.com/p/143459234">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/zhihu.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">理解 zip 和 gzip 压缩格式背后的压缩算法</div>            <div class="tag-link-sitename"> https://zhuanlan.zhihu.com/p/143459234</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://github.com/rccoder/blog/issues/32">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">rccoder</div>            <div class="tag-link-sitename"> https://github.com/rccoder/blog/issues/32</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式唯一ID</title>
      <link href="/2024/08/31/ArrayList/DistributedID/"/>
      <url>/2024/08/31/ArrayList/DistributedID/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式唯一ID"><a href="#分布式唯一ID" class="headerlink" title="分布式唯一ID"></a>分布式唯一ID</h2><p>分布式系统全局唯一的 id 是所有系统都会遇到的场景，往往会被用在搜索，存储方面，用于作为唯一的标识或者排序，比如全局唯一的订单号，优惠券的券码等，如果出现两个相同的订单号，对于用户无疑将是一个巨大的bug。</p><p>在单体的系统中，生成唯一的 id 没有什么挑战，因为只有一台机器一个应用，直接使用单例加上一个原子操作自增即可。而在分布式系统中，不同的应用，不同的机房，不同的机器，要想生成的 ID 都是唯一的，确实需要下点功夫。</p><p>一句话总结：</p><blockquote><p><strong>分布式唯一ID是为了给数据进行唯一标识。</strong></p></blockquote><h3 id="分布式唯一ID的特征"><a href="#分布式唯一ID的特征" class="headerlink" title="分布式唯一ID的特征"></a><strong>分布式唯一ID的特征</strong></h3><p>分布式唯一ID的核心是唯一性，其他的都是附加属性，一般来说，一个优秀的全局唯一ID方案有以下的特点，仅供参考：</p><ul><li>全局唯一：不可以重复，核心特点！</li><li>大致有序或者单调递增：自增的特性有利于搜索，排序，或者范围查询等</li><li>高性能：生成ID响应要快，延迟低</li><li>高可用：要是只能单机，挂了，全公司依赖全局唯一ID的服务，全部都不可用了，所以生成ID的服务必须高可用</li><li>方便使用：对接入者友好，能封装到开箱即用最好</li><li>信息安全：有些场景，如果连续，那么很容易被猜到，攻击也是有可能的，这得取舍。</li></ul><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><p><code>snowflake</code> 是 Twitter 开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：</p><blockquote><p>使用<strong>41bit作为毫秒数</strong>，<strong>10bit作为机器的ID</strong>（5个bit是数据中心，5个bit的机器ID），<strong>12bit作为毫秒内的流水号</strong>（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p></blockquote><p><strong>雪花算法是 64 位 的二进制，一共包含了四部分：</strong></p><ul><li><p>1位是符号位，也就是最高位，始终是0，没有任何意义，因为要是唯一计算机二进制补码中就是负数，0才是正数。</p></li><li><p>41位是时间戳，具体到毫秒，41位的二进制可以使用69年，因为时间理论上永恒递增，所以根据这个排序是可以的。</p></li><li><p>10位是机器标识，可以全部用作机器ID，也可以用来标识机房ID + 机器ID，10位最多可以表示1024台机器。</p></li><li><p>12位是计数序列号，同一台机器上同一时间，理论上还可以同时生成不同的ID，12位的序列号能够区分出4096个ID。</p></li></ul><p><img src="https://oss.gincode.icu/pics/snowflake.png" alt="snowflake"></p><div class="note info simple"><p>SnowFlake 算法的缺点或者限制：</p></div><p>1、在Snowflake算法中，每个节点的机器ID和数据中心ID都是硬编码在代码中的，而且这些ID是全局唯一的。当某个节点出现故障或者需要扩容时，就需要更改其对应的机器ID或数据中心ID，但是这个过程比较麻烦，需要重新编译代码，重新部署系统。还有就是，如果某个节点的机器ID或数据中心ID被设置成了已经被分配的ID，那么就会出现重复的ID，这样会导致系统的错误和异常。</p><p>2、Snowflake算法中，需要使用zookeeper来协调各个节点的ID生成，但是ZK的部署其实是有挺大的成本的，并且zookeeper本身也可能成为系统的瓶颈。</p><p>3、依赖于系统时间的一致性，如果系统时间被回拨，或者不一致，可能会造成 ID 重复。</p><h3 id="时间回拨问题"><a href="#时间回拨问题" class="headerlink" title="时间回拨问题"></a><strong>时间回拨问题</strong></h3><p>在获取时间的时候，可能会出现<code>时间回拨</code>的问题，什么是时间回拨问题呢？就是服务器上的时间突然倒退到之前的时间。</p><ol><li>人为原因，把系统环境的时间改了。</li><li>有时候不同的机器上需要同步时间，可能不同机器之间存在误差，那么可能会出现时间回拨问题。</li></ol><p><strong>解决方案</strong></p><ol><li>回拨时间小的时候，不生成 ID，循环等待到时间点到达。</li><li>上面的方案只适合时钟回拨较小的，如果间隔过大，阻塞等待，肯定是不可取的，因此要么超过一定大小的回拨直接报错，拒绝服务，或者有一种方案是利用拓展位，回拨之后在拓展位上加1就可以了，这样ID依然可以保持唯一。但是这个要求我们提前预留出位数，要么从机器id中，要么从序列号中，腾出一定的位，在时间回拨的时候，这个位置 <code>+1</code>。</li></ol><h2 id="百度的UidGenerator"><a href="#百度的UidGenerator" class="headerlink" title="百度的UidGenerator"></a>百度的UidGenerator</h2><p><code>UidGenerator</code> 是Java实现的, 基于<code>Snowflake</code>算法的唯一ID生成器。<code>UidGenerator</code>以组件形式工作在应用项目中, 支持自定义workerId位数和初始化策略, 从而适用于docker等虚拟化环境下实例自动重启、漂移等场景。 </p><blockquote><p><code>UidGenerator</code> 通过借用<strong>未来时间</strong>来解决sequence天然存在的并发限制; 采用<strong>RingBuffer</strong>来缓存已生成的UID, 并行化UID的生产和消费, 同时对CacheLine补齐，避免了由RingBuffer带来的硬件级「伪共享」问题. 最终单机QPS可达600万。</p></blockquote><h3 id="DefaultUidGenerator"><a href="#DefaultUidGenerator" class="headerlink" title="DefaultUidGenerator"></a>DefaultUidGenerator</h3><h4 id="delta-seconds"><a href="#delta-seconds" class="headerlink" title="delta seconds"></a>delta seconds</h4><p>这个值是指当前时间与<code>epoch</code>时间的时间差，且单位为秒。<code>epoch</code>时间就是指集成 UidGenerator 生成分布式 ID 服务第一次上线的时间，可配置，也一定要根据你的上线时间进行配置，因为默认的<code>epoch</code>时间可是<code>2016-09-20</code>，不配置的话，会浪费好几年的可用时间。</p><h4 id="worker-id"><a href="#worker-id" class="headerlink" title="worker id"></a>worker id</h4><p>接下来说一下 UidGenerator 是如何被<code>worker id</code>赋值的，搭建 UidGenerator 的话，需要创建一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> `xxxx`;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `xxxx` ;</span><br><span class="line">use `xxxx`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> WORKER_NODE;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> WORKER_NODE</span><br><span class="line">(</span><br><span class="line">ID <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;auto increment id&#x27;</span>,</span><br><span class="line">HOST_NAME <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;host name&#x27;</span>,</span><br><span class="line">PORT <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;port&#x27;</span>,</span><br><span class="line">TYPE <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;node type: ACTUAL or CONTAINER&#x27;</span>,</span><br><span class="line">LAUNCH_DATE <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;launch date&#x27;</span>,</span><br><span class="line">MODIFIED <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;modified time&#x27;</span>,</span><br><span class="line">CREATED <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;created time&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(ID)</span><br><span class="line">)</span><br><span class="line"> COMMENT<span class="operator">=</span><span class="string">&#x27;DB WorkerID Assigner for UID Generator&#x27;</span>,ENGINE <span class="operator">=</span> INNODB;</span><br></pre></td></tr></table></figure><p>UidGenerator 会在集成用它生成分布式 ID 的实例启动的时候，往这个表中插入一行数据，得到的 ID 值就是准备赋给<code>workerId</code>的值。由于<code>workerId</code>默认 22 位，那么，集成 UidGenerator 生成分布式 ID 的所有实例重启次数是不允许超过 4194303 次（即<code>2^22-1</code>），否则会抛出异常。</p><p>这段逻辑的核心代码来自 <code>DisposableWorkerIdAssigner.java</code>中，当然，你也可以实现<code>WorkerIdAssigner.java</code>接口，自定义生成<code>workerId</code>。</p><h4 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h4><p>核心代码如下，几个实现的关键点：</p><ul><li><code>synchronized</code>保证线程安全</li><li>如果时间有任何的回拨，那么直接抛出异常</li><li>如果当前时间和上一次是同一秒时间，那么<code>sequence</code>自增。如果同一秒内自增值超过<code>2^13-1</code>，那么就会自旋等待下一秒（<code>getNextSecond</code>）</li><li>如果是新的一秒，那么<code>sequence</code>重新从 0 开始</li></ul><h3 id="CachedUidGenerator"><a href="#CachedUidGenerator" class="headerlink" title="CachedUidGenerator"></a>CachedUidGenerator</h3><p><code>RingBuffer</code>环形数组，数组每个元素成为一个slot。<code>RingBuffer</code>容量，默认为Snowflake算法中<strong>sequence(最后12位序列值)</strong>最大值，且为2^N。可通过<code>boostPower</code>配置进行扩容，以提高<code>RingBuffer</code> 读写吞吐量。</p><p>Tail指针、Cursor指针用于环形数组上读写slot：</p><ul><li>Tail指针<br>表示Producer生产的最大序号(此序号从0开始，持续递增)。Tail不能超过Cursor，即生产者不能覆盖未消费的slot。当Tail已赶上curosr，此时可通过<code>rejectedPutBufferHandler</code>指定PutRejectPolicy</li><li>Cursor指针<br>表示Consumer消费到的最小序号(序号序列与Producer序列相同)。Cursor不能超过Tail，即不能消费未生产的slot。当Cursor已赶上tail，此时可通过<code>rejectedTakeBufferHandler</code>指定TakeRejectPolicy</li></ul><p><img src="https://oss.gincode.icu/pics/ringbuffer.png" alt="ringbuffer"></p><p><strong>CachedUidGenerator采用了双RingBuffer，Uid-RingBuffer用于存储Uid、Flag-RingBuffer用于存储Uid状态(是否可填充、是否可消费)</strong></p><p>由于数组元素在内存中是连续分配的，可最大程度利用CPU cache以提升性能。但同时会带来<span class="bubble-content">伪共享</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">**伪共享**（False Sharing）指的是当多个线程在处理不同数据时，这些数据恰好被存储在同一个CPU缓存行（通常是64字节）中，导致不必要的缓存一致性流量，进而降低性能。举个简单的例子，假设有两个线程分别处理两个不同的变量，这两个变量刚好存储在同一个缓存行里。虽然线程操作的是不同的变量，但由于它们共享同一个缓存行，任何一个线程对其中一个变量的修改都会导致另一个线程的缓存无效，迫使它重新从主内存读取数据。</span></span>FalseSharing问题，为此在Tail、Cursor指针、Flag-RingBuffer中采用了CacheLine 补齐方式。人为增加变量之间的距离，避免它们落在同一个缓存行中，从而减少伪共享的影响。</p><p><img src="https://oss.gincode.icu/pics/ringbuffer.png" alt="ringbuffer"></p><h4 id="RingBuffer填充时机"><a href="#RingBuffer填充时机" class="headerlink" title="RingBuffer填充时机"></a>RingBuffer填充时机</h4><ul><li>初始化预填充<br>RingBuffer初始化时，预先填充满整个RingBuffer.</li><li>即时填充<br>Take消费时，即时检查剩余可用slot量(<code>tail</code> - <code>cursor</code>)，如小于设定阈值，则补全空闲slots。阈值可通过<code>paddingFactor</code>来进行配置</li><li>周期填充<br>通过Schedule线程，定时补全空闲slots。可通过<code>scheduleInterval</code>配置，以应用定时填充功能，并指定Schedule时间间隔</li></ul><h2 id="Leaf——美团点评分布式ID生成系统"><a href="#Leaf——美团点评分布式ID生成系统" class="headerlink" title="Leaf——美团点评分布式ID生成系统"></a>Leaf——美团点评分布式ID生成系统</h2><p>Leaf这个名字是来自德国哲学家、数学家莱布尼茨的一句话： &gt;There are no two identical leaves in the world &gt; “世界上没有两片相同的树叶”</p><h3 id="Leaf-segment数据库方案"><a href="#Leaf-segment数据库方案" class="headerlink" title="Leaf-segment数据库方案"></a>Leaf-segment数据库方案</h3><p>第一种Leaf-segment方案，在使用数据库的方案上，做了如下改变： </p><ul><li>原方案每次获取ID都得读写一次数据库，造成数据库压力大。改为利用proxy server批量获取，每次获取一个segment(step决定大小)号段的值。用完之后再去数据库获取新的号段，可以大大的减轻数据库的压力。 </li><li>各个业务不同的发号需求用biz_tag字段来区分，每个biz-tag的ID获取相互隔离，互不影响。如果以后有性能需求需要对数据库扩容，不需要上述描述的复杂的扩容操作，只需要对biz_tag分库分表就行。</li></ul><p>数据库表设计如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+--------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| Field       | Type         | Null | Key | Default           | Extra                       |</span><br><span class="line">+-------------+--------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| biz_tag     | varchar(128) | NO   | PRI |                   |                             |</span><br><span class="line">| max_id      | bigint(20)   | NO   |     | 1                 |                             |</span><br><span class="line">| step        | int(11)      | NO   |     | NULL              |                             |</span><br><span class="line">| desc        | varchar(256) | YES  |     | NULL              |                             |</span><br><span class="line">| update_time | timestamp    | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</span><br><span class="line">+-------------+--------------+------+-----+-------------------+-----------------------------+</span><br></pre></td></tr></table></figure><p>重要字段说明：<code>biz_tag</code>用来区分业务，<code>max_id</code>表示该biz_tag目前所被分配的ID号段的最大值，<code>step</code>表示每次分配的号段长度。原来获取ID每次都需要写数据库，现在只需要把step设置得足够大，比如1000。那么只有当1000个号被消耗完了之后才会去重新读写一次数据库。读写数据库的频率从1减小到了1/step，大致架构如下图所示：</p><p><img src="https://oss.gincode.icu/pics/5e4ff128.png" alt="img"></p><p>test_tag在第一台Leaf机器上是1~1000的号段，当这个号段用完时，会去加载另一个长度为step=1000的号段，假设另外两台号段都没有更新，这个时候第一台机器新加载的号段就应该是3001~4000。同时数据库对应的biz_tag这条数据的max_id会从3000被更新成4000，更新号段的SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Begin</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">table</span> <span class="keyword">SET</span> max_id<span class="operator">=</span>max_id<span class="operator">+</span>step <span class="keyword">WHERE</span> biz_tag<span class="operator">=</span>xxx</span><br><span class="line"><span class="keyword">SELECT</span> tag, max_id, step <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> biz_tag<span class="operator">=</span>xxx</span><br><span class="line"><span class="keyword">Commit</span></span><br></pre></td></tr></table></figure><p>这种模式有以下优缺点：</p><p>优点：</p><ul><li>Leaf服务可以很方便的线性扩展，性能完全能够支撑大多数业务场景。</li><li>ID号码是趋势递增的8byte的64位数字，满足上述数据库存储的主键要求。</li><li>容灾性高：Leaf服务内部有号段缓存，即使DB宕机，短时间内Leaf仍能正常对外提供服务。</li><li>可以自定义max_id的大小，非常方便业务从原有的ID方式上迁移过来。</li></ul><p>缺点：</p><ul><li>ID号码不够随机，能够泄露发号数量的信息，不太安全。</li><li>TP999数据波动大，当号段使用完之后还是会hang在更新数据库的I/O上，tg999数据会出现偶尔的尖刺。</li><li>DB宕机会造成整个系统不可用。</li></ul><div class="note info simple"><p>双buffer优化</p></div><p>对于第二个缺点，Leaf-segment做了一些优化，简单的说就是：</p><p>Leaf 取号段的时机是在号段消耗完的时候进行的，也就意味着号段临界点的ID下发时间取决于下一次从DB取回号段的时间，并且在这期间进来的请求也会因为DB号段没有取回来，导致线程阻塞。如果请求DB的网络和DB的性能稳定，这种情况对系统的影响是不大的，但是假如取DB的时候网络发生抖动，或者DB发生慢查询就会导致整个系统的响应时间变慢。</p><p>为此，我们希望DB取号段的过程能够做到无阻塞，不需要在DB取号段的时候阻塞请求线程，即当号段消费到某个点时就异步的把下一个号段加载到内存中。而不需要等到号段用尽的时候才去更新号段。这样做就可以很大程度上的降低系统的TP999指标。详细实现如下图所示：</p><p><img src="https://oss.gincode.icu/pics/f2625fac.png" alt="img"></p><p>采用双buffer的方式，Leaf服务内部有两个号段缓存区segment。当前号段已下发10%时，如果下一个号段未更新，则另启一个更新线程去更新下一个号段。当前号段全部下发完后，如果下个号段准备好了则切换到下个号段为当前segment接着下发，循环往复。</p><ul><li>每个biz-tag都有消费速度监控，通常推荐segment长度设置为服务高峰期发号QPS的600倍（10分钟），这样即使DB宕机，Leaf仍能持续发号10-20分钟不受影响。</li><li>每次请求来临时都会判断下个号段的状态，从而更新此号段，所以偶尔的网络抖动不会影响下个号段的更新。</li></ul><h3 id="Leaf-snowflake方案"><a href="#Leaf-snowflake方案" class="headerlink" title="Leaf-snowflake方案"></a>Leaf-snowflake方案</h3><p>Leaf-segment方案可以生成趋势递增的ID，同时ID号是可计算的，不适用于订单ID生成场景，比如竞对在两天中午12点分别下单，通过订单id号相减就能大致计算出公司一天的订单量，这个是不能忍受的。面对这一问题，我们提供了 Leaf-snowflake方案。</p><p>Leaf-snowflake方案完全沿用snowflake方案的bit位设计，即是“1+41+10+12”的方式组装ID号。对于workerID的分配，当服务集群数量较小的情况下，完全可以手动配置。Leaf服务规模较大，动手配置成本太高。所以使用Zookeeper持久顺序节点的特性自动对snowflake节点配置wokerID。Leaf-snowflake是按照下面几个步骤启动的：</p><ol><li>启动Leaf-snowflake服务，连接Zookeeper，在leaf_forever父节点下检查自己是否已经注册过（是否有该顺序子节点）。</li><li>如果有注册过直接取回自己的workerID（zk顺序节点生成的int类型ID号），启动服务。</li><li>如果没有注册过，就在该父节点下面创建一个持久顺序节点，创建成功后取回顺序号当做自己的workerID号，启动服务。</li></ol><p><img src="https://oss.gincode.icu/pics/a3f985a8.png" alt="img"></p><div class="note info simple"><p>解决时钟问题</p></div><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/1453b4e9.png" alt="img"></p><p>参见上图整个启动流程图，服务启动时首先检查自己是否写过ZooKeeper leaf_forever节点：</p><ol><li>若写过，则用自身系统时间与leaf_forever/${self}节点记录时间做比较，若小于leaf_forever/${self}时间则认为机器时间发生了大步长回拨，服务启动失败并报警。</li><li>若未写过，证明是新服务节点，直接创建持久节点leaf_forever/${self}并写入自身系统时间，接下来综合对比其余Leaf节点的系统时间来判断自身系统时间是否准确，具体做法是取leaf_temporary下的所有临时节点(所有运行中的Leaf-snowflake节点)的服务IP：Port，然后通过RPC请求得到所有节点的系统时间，计算sum(time)/nodeSize。</li><li>若abs( 系统时间-sum(time)/nodeSize ) &lt; 阈值，认为当前系统时间准确，正常启动服务，同时写临时节点leaf_temporary/${self} 维持租约。</li><li>否则认为本机系统时间发生大步长偏移，启动失败并报警。</li><li>每隔一段时间(3s)上报自身系统时间写入leaf_forever/${self}。</li></ol><p>由于强依赖时钟，对时间的要求比较敏感，在机器工作时NTP同步也会造成秒级别的回退，建议可以直接关闭NTP同步。要么在时钟回拨的时候直接不提供服务直接返回ERROR_CODE，等时钟追上即可。<strong>或者做一层重试，然后上报报警系统，更或者是发现有时钟回拨之后自动摘除本身节点并报警</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发生了回拨，此刻时间小于上次发号时间</span></span><br><span class="line"><span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">           <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> lastTimestamp - timestamp;</span><br><span class="line">           <span class="keyword">if</span> (offset &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//时间偏差大小小于5ms，则等待两倍时间</span></span><br><span class="line">                   wait(offset &lt;&lt; <span class="number">1</span>);<span class="comment">//wait</span></span><br><span class="line">                   timestamp = timeGen();</span><br><span class="line">                   <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">                      <span class="comment">//还是小于，抛异常并上报</span></span><br><span class="line">                       throwClockBackwardsEx(timestamp);</span><br><span class="line">                     &#125;    </span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                  <span class="keyword">throw</span>  e;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//throw</span></span><br><span class="line">               throwClockBackwardsEx(timestamp);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//分配ID      </span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://github.com/twitter/snowflake">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">twitter开源的雪花算法</div>            <div class="tag-link-sitename"> https://github.com/twitter/snowflake</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/baidu.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">百度开源 UidGenerator</div>            <div class="tag-link-sitename"> https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://tech.meituan.com/2017/04/21/mt-leaf.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/tech.meituan.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Leaf—美团点评分布式ID生成系统</div>            <div class="tag-link-sitename"> https://tech.meituan.com/2017/04/21/mt-leaf.html</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站推荐和动态定时任务</title>
      <link href="/2024/08/16/ArrayList/safeAndCron/"/>
      <url>/2024/08/16/ArrayList/safeAndCron/</url>
      
        <content type="html"><![CDATA[<h1 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h1><blockquote><p>豆包MarsCode 是基于豆包大模型打造的智能开发工具，提供 <code>Cloud IDE</code>及 <code>AI</code> 编程助手两种使用形态。<br>作为豆包代码模型的具体应用， <strong>豆包MarsCode</strong> 支持智能识别当前编码任务相关的上下文信息，同时将代码理解、生成、优化、推荐、补全、审查等多维能力融为一体，无缝嵌入研发流程的各个环节，帮助开发者提升代码开发质量和效率。<br> 官网地址：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.MarsCode.cn%2Fhome"><img src="https://lf-web-assets.juejin.cn/obj/juejin-web/xitu_juejin_web/3f843e8626a3844c624fb596dddd9674.svg" alt="img">www.marscode.cn</a></p></blockquote><p>一个网页版的vs code,代码提示一点不输idea</p><p><img src="https://oss.gincode.icu/pics/image-20240817000252685.png" alt="image-20240817000252685"></p><p>平时想看看源码或者刷算法题，直接网页打开编码，旁边还提供了AI功能，AI提示和改错都能免费用</p><p>目前也支持直接导入github项目</p><p><img src="https://oss.gincode.icu/pics/image-20240817000602306.png" alt="image-20240817000602306"></p><p>想开发一个start或者组件项目就非常方便</p><h1 id="动态定时任务"><a href="#动态定时任务" class="headerlink" title="动态定时任务"></a>动态定时任务</h1><p>创建一个定时任务的配置文件例如<code>task-config.ini</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printTime.cron=<span class="number">0</span>/<span class="number">10</span> * * * * ?</span><br></pre></td></tr></table></figure><h2 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h2><p>定时任务执行类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/task-config.ini&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;printTime.cron&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// 动态使用cron表达式设置循环间隔</span></span><br><span class="line">        taskRegistrar.addTriggerTask(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Current time： &#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Trigger</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Date <span class="title function_">nextExecutionTime</span><span class="params">(TriggerContext triggerContext)</span> &#123;</span><br><span class="line">                <span class="comment">// 使用CronTrigger触发器，可动态修改cron表达式来操作循环规则</span></span><br><span class="line">                <span class="type">CronTrigger</span> <span class="variable">cronTrigger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronTrigger</span>(cron);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">nextExecutionTime</span> <span class="operator">=</span> cronTrigger.nextExecutionTime(triggerContext);</span><br><span class="line">                <span class="keyword">return</span> nextExecutionTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个修改cron的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduleTask scheduleTask;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestController</span><span class="params">(ScheduleTask scheduleTask)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scheduleTask = scheduleTask;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateCron&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateCron</span><span class="params">(String cron)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;new cron :&#123;&#125;&quot;</span>, cron);</span><br><span class="line">        scheduleTask.setCron(cron);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/task-config.ini&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;printTime.cron&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// 动态使用cron表达式设置循环间隔</span></span><br><span class="line">        taskRegistrar.addTriggerTask(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Current time： &#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Trigger</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Date <span class="title function_">nextExecutionTime</span><span class="params">(TriggerContext triggerContext)</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 使用不同的触发器，为设置循环时间的关键，</span></span><br><span class="line">                <span class="comment">//区别于CronTrigger触发器，该触发器可随意设置循环间隔时间，单位为毫秒</span></span><br><span class="line">                <span class="type">PeriodicTrigger</span> <span class="variable">periodicTrigger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PeriodicTrigger</span>(timer);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">nextExecutionTime</span> <span class="operator">=</span> periodicTrigger.nextExecutionTime(triggerContext);</span><br><span class="line">                <span class="keyword">return</span> nextExecutionTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个修改cron的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduleTask scheduleTask;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestController</span><span class="params">(ScheduleTask scheduleTask)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scheduleTask = scheduleTask;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@GetMapping(&quot;/updateTimer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateTimer</span><span class="params">(Long timer)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;new timer :&#123;&#125;&quot;</span>, timer);</span><br><span class="line">        scheduleTask.setTimer(timer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java线上分析</title>
      <link href="/2024/08/12/ArrayList/work/desync/"/>
      <url>/2024/08/12/ArrayList/work/desync/</url>
      
        <content type="html"><![CDATA[<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="死锁模拟"><a href="#死锁模拟" class="headerlink" title="死锁模拟"></a>死锁模拟</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>输入jps定位java进程</li></ol><p><img src="https://oss.gincode.icu/pics/image-20240812140925419.png" alt="image-20240812140925419"></p><ol><li>jstack 查看进程栈信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Thread-0&quot;</span> #<span class="number">16</span> prio=<span class="number">5</span> os_prio=<span class="number">0</span> cpu=<span class="number">0.</span>00ms elapsed=<span class="number">89.</span>15s tid=<span class="number">0x000001cffe8bf6e0</span> nid=<span class="number">13480</span> waiting <span class="keyword">for</span> mo</span><br><span class="line">nitor entry  [<span class="number">0x00000010d83ff000</span>]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at day15.demo01.lambda$main$<span class="number">0</span>(demo01.java:<span class="number">26</span>)</span><br><span class="line">        - waiting to lock &lt;<span class="number">0x00000007130789c0</span>&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0x00000007130789b0</span>&gt; (a java.lang.Object)</span><br><span class="line">        at day15.demo01$$Lambda$<span class="number">14</span>/<span class="number">0x0000000800c031f0</span>.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(java.base@<span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>/Thread.java:<span class="number">833</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span> #<span class="number">17</span> prio=<span class="number">5</span> os_prio=<span class="number">0</span> cpu=<span class="number">0.</span>00ms elapsed=<span class="number">89.</span>15s tid=<span class="number">0x000001cffe8bfba0</span> nid=<span class="number">12524</span> waiting <span class="keyword">for</span> mo</span><br><span class="line">nitor entry  [<span class="number">0x00000010d84ff000</span>]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at day15.demo01.lambda$main$<span class="number">1</span>(demo01.java:<span class="number">38</span>)</span><br><span class="line">        - waiting to lock &lt;<span class="number">0x00000007130789b0</span>&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0x00000007130789c0</span>&gt; (a java.lang.Object)</span><br><span class="line">        at day15.demo01$$Lambda$<span class="number">15</span>/<span class="number">0x0000000800c033f8</span>.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(java.base@<span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>/Thread.java:<span class="number">833</span>)</span><br></pre></td></tr></table></figure><p>demo01的thread-0和thread-1都处于<strong>阻塞状态</strong></p><p>jstack最后也很明确的输出：</p><blockquote><p>发现一个死锁 thread-0 在等待一个 thread-1 所持有的object的资源</p><p>而 thread-1 在等待一个thread-0 所持有的object的资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line">  waiting to lock monitor <span class="number">0x000001cfd97eccc0</span> (object <span class="number">0x00000007130789c0</span>, a java.lang.Object),</span><br><span class="line">  which is held by <span class="string">&quot;Thread-1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">  waiting to lock monitor <span class="number">0x000001cfd97ec780</span> (object <span class="number">0x00000007130789b0</span>, a java.lang.Object),</span><br><span class="line">  which is held by <span class="string">&quot;Thread-0&quot;</span></span><br><span class="line"></span><br><span class="line">        at day15.demo01$$Lambda$<span class="number">14</span>/<span class="number">0x0000000800c031f0</span>.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(java.base@<span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>/Thread.java:<span class="number">833</span>)</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">        at day15.demo01.lambda$main$<span class="number">1</span>(demo01.java:<span class="number">38</span>)</span><br><span class="line">        - waiting to lock &lt;<span class="number">0x00000007130789b0</span>&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0x00000007130789c0</span>&gt; (a java.lang.Object)</span><br><span class="line">        at day15.demo01$$Lambda$<span class="number">15</span>/<span class="number">0x0000000800c033f8</span>.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(java.base@<span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>/Thread.java:<span class="number">833</span>)</span><br><span class="line"></span><br><span class="line">Found <span class="number">1</span> deadlock.</span><br></pre></td></tr></table></figure></blockquote><p>定位到是demo01.java的38行后就可以去破坏死锁条件解决死锁。</p><h1 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h1><h2 id="OOM模拟"><a href="#OOM模拟" class="headerlink" title="OOM模拟"></a>OOM模拟</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5_000_000</span>];</span><br><span class="line">            list.add(bytes);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动前先添加JVN参数：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:\heap.hprof</span><br></pre></td></tr></table></figure><ul><li>Xms: 设置JVM初始堆内存的大小。</li><li>Xmx: 设置JVM最大堆内存的大小。</li><li>XX:+HeapDumpOnOutOfMemoryError: 发生OOM异常时生成heap <a href="https://so.csdn.net/so/search?q=dump&amp;spm=1001.2101.3001.7020">dump</a>文件 </li><li>-XX:HeapDumpPath: dump文件保存位置</li></ul></blockquote><p>开始运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to D:\heap.hprof ...</span><br><span class="line">Heap dump file created [<span class="number">3253522</span> bytes in <span class="number">0.015</span> secs]</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at day15.demo01.main(demo01.java:<span class="number">20</span>)</span><br><span class="line">Disconnected from the target VM, address: <span class="string">&#x27;127.0.0.1:3008&#x27;</span>, transport: <span class="string">&#x27;socket&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>将生成的 <code>heap.hprof</code> 文件放入 <code>jprofiler</code> 中进行分析</p><p><img src="https://oss.gincode.icu/pics/image-20240812144553397.png" alt="image-20240812144553397"></p><p>我们查看最大<strong>类对象</strong>可以发现是list中含有了太多的byte[]数组</p><h1 id="MySQL死锁"><a href="#MySQL死锁" class="headerlink" title="MySQL死锁"></a>MySQL死锁</h1><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p>打开两个cmd窗口模拟两个session执行</p><blockquote><p>session1:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">4</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 先执行到这去执行session2的操作</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>session2:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">7</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 再去执行session1的后面的操作</span></span><br></pre></td></tr></table></figure><p>当最后输入session1的操作后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  update user set id = 5 where id = 2;</span><br><span class="line">ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</span><br></pre></td></tr></table></figure><p>应该是MySQL的死锁检测检测出死锁了</p></blockquote><p>当发生死锁是，我们可以用命令查看死锁日志</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engine innodb staus</span><br></pre></td></tr></table></figure><p>查看死锁日志</p><blockquote><p>2024-08-12 14:58:47 0x2b6c<br><em>*</em> (1) TRANSACTION:<br>TRANSACTION 224533, ACTIVE 7 sec starting index read<br>mysql tables in use 1, locked 1<br>LOCK WAIT 3 lock struct(s), heap size 1128, 2 row lock(s), undo log entries 2<br>MySQL thread id 11, OS thread handle 7480, query id 33 localhost ::1 root updating<br>update user set id = 7 where id = 1</p><p><em>*</em> (1) HOLDS THE LOCK(S):<br>RECORD LOCKS space id 516 page no 4 n bits 80 index PRIMARY of table <code>test</code>.<code>user</code> trx id 224533 lock_mode X locks rec but not gap<br>Record lock, heap no 3 PHYSICAL RECORD: n_fields 6; compact format; info bits 32<br> 0: len 4; hex 80000002; asc     ;;<br> 1: len 6; hex 000000036d15; asc     m ;;<br> 2: len 7; hex 02000000d8166a; asc       j;;<br> 3: len 7; hex 7a65726f74776f; asc zerotwo;;<br> 4: len 15; hex 7a65726f74776f403136332e636f6d; asc zerotwo@163.com;;<br> 5: len 6; hex 313233343536; asc 123456;;</p><p><em>*</em> (1) WAITING FOR THIS LOCK TO BE GRANTED:<br>RECORD LOCKS space id 516 page no 4 n bits 80 index PRIMARY of table <code>test</code>.<code>user</code> trx id 224533 lock_mode X locks rec but not gap waiting<br>Record lock, heap no 6 PHYSICAL RECORD: n_fields 6; compact format; info bits 32<br> 0: len 4; hex 80000001; asc     ;;<br> 1: len 6; hex 000000036d10; asc     m ;;<br> 2: len 7; hex 01000000f5088b; asc        ;;<br> 3: len 7; hex 67696e636f6465; asc gincode;;<br> 4: len 11; hex 47696e403136332e636f6d; asc Gin@163.com;;<br> 5: len 6; hex 313233343536; asc 123456;;</p><p><em>*</em> (2) TRANSACTION:<br>TRANSACTION 224528, ACTIVE 23 sec starting index read<br>mysql tables in use 1, locked 1<br>LOCK WAIT 3 lock struct(s), heap size 1128, 2 row lock(s), undo log entries 2<br>MySQL thread id 10, OS thread handle 14088, query id 34 localhost ::1 root updating<br>update user set id = 5 where id = 2</p><p><em>*</em> (2) HOLDS THE LOCK(S):<br>RECORD LOCKS space id 516 page no 4 n bits 80 index PRIMARY of table <code>test</code>.<code>user</code> trx id 224528 lock_mode X locks rec but not gap<br>Record lock, heap no 6 PHYSICAL RECORD: n_fields 6; compact format; info bits 32<br> 0: len 4; hex 80000001; asc     ;;<br> 1: len 6; hex 000000036d10; asc     m ;;<br> 2: len 7; hex 01000000f5088b; asc        ;;<br> 3: len 7; hex 67696e636f6465; asc gincode;;<br> 4: len 11; hex 47696e403136332e636f6d; asc Gin@163.com;;<br> 5: len 6; hex 313233343536; asc 123456;;</p><p><em>*</em> (2) WAITING FOR THIS LOCK TO BE GRANTED:<br>RECORD LOCKS space id 516 page no 4 n bits 80 index PRIMARY of table <code>test</code>.<code>user</code> trx id 224528 lock_mode X locks rec but not gap waiting<br>Record lock, heap no 3 PHYSICAL RECORD: n_fields 6; compact format; info bits 32<br> 0: len 4; hex 80000002; asc     ;;<br> 1: len 6; hex 000000036d15; asc     m ;;<br> 2: len 7; hex 02000000d8166a; asc       j;;<br> 3: len 7; hex 7a65726f74776f; asc zerotwo;;<br> 4: len 15; hex 7a65726f74776f403136332e636f6d; asc zerotwo@163.com;;<br> 5: len 6; hex 313233343536; asc 123456;;</p><h2 id="WE-ROLL-BACK-TRANSACTION-2"><a href="#WE-ROLL-BACK-TRANSACTION-2" class="headerlink" title="* WE ROLL BACK TRANSACTION (2)"></a><em>*</em> WE ROLL BACK TRANSACTION (2)</h2><h2 id="TRANSACTIONS"><a href="#TRANSACTIONS" class="headerlink" title="TRANSACTIONS"></a>TRANSACTIONS</h2><p>Trx id counter 224539<br>Purge done for trx’s n:o &lt; 224539 undo n:o &lt; 0 state: running but idle<br>History list length 0<br>LIST OF TRANSACTIONS FOR EACH SESSION:<br>—-TRANSACTION 284102103522432, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>—-TRANSACTION 284102103521656, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>—-TRANSACTION 284102103520880, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>—-TRANSACTION 224533, ACTIVE 192 sec<br>3 lock struct(s), heap size 1128, 2 row lock(s), undo log entries 4<br>MySQL thread id 11, OS thread handle 7480, query id 33 localhost ::1 root</p></blockquote><p>分析</p><ul><li>死锁的SQL语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">7</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>锁</li></ul><p>事务1和事务2都是<code>lock_mode X locks rec but not gap waiting</code></p><p>都是排他锁中的记录锁</p><blockquote><p>X锁：排他锁、又称写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。</p><p>S锁：共享锁，又称读锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。</p><p>record Lock： 记录锁，只对当前记录进行上锁</p><p>Gap Lock：间隙锁，锁定一个范围，但不包括记录本身。GAP锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况。</p><p>Next-Key Lock：<strong>rec+gap</strong>，锁定一个范围，并且锁定记录本身。对于行的查询，都是采用该方法，主要目的是解决幻读的问题。</p></blockquote><h2 id="MySQl加锁原理"><a href="#MySQl加锁原理" class="headerlink" title="MySQl加锁原理"></a>MySQl加锁原理</h2><p><strong>在MySQL中，行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现产出 1： 场景优化</title>
      <link href="/2024/06/17/ArrayList/work/work01/"/>
      <url>/2024/06/17/ArrayList/work/work01/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在测试环境中，文件导出感觉不出来性能上的差异。在完成一些需求后，导师采纳了我的代码上线了生产环境。在此之前，我已经对导出功能进行了一些优化，体现在，除去了原代码中出现的循环查库，将其进行提前预处理，以及添加了可根据条件进行导出的功能（原来的代码只有全量导出）。次日，导师跟我说，导出速度慢，具体量值：3分钟导出4-5万条数据。</p><h2 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h2><p>导师给我的方案是：将导出数据量进行控制，只要从导出天数算起，X天的数据。在那一刻，我也并没有多去想，而是执行他给的任务。这并不困难，我只需要在对应的查询上，添加一个条件即可。项目用的是MyBatis-plus，我找到了那一个方法，添加了一个wrapper，就完成了效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrapper.ge(A::getCreateTime, LocalDate.now().minusDays(EXPORT_DAY));</span><br></pre></td></tr></table></figure><h2 id="测试效果："><a href="#测试效果：" class="headerlink" title="测试效果："></a>测试效果：</h2><p>筛选完数据后，导出来的数据量大概在2万条左右，导出时间在2分钟左右。emmm….效果并没有很理想</p><p><img src="https://oss.gincode.icu/pics/FhY8aET0bKF6c4ppGCEXuLKv4361.jpg" alt="img"></p><p><strong>因为本质上，这一方案并没有从技术层面上去解决！！！</strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="初步优化：先问AI"><a href="#初步优化：先问AI" class="headerlink" title="初步优化：先问AI"></a>初步优化：先问AI</h3><blockquote><p>EasyExcel 是一种轻量级的用于读写 Excel 文件的库，但是在使用时可能会遇到导出速度慢的问题。以下是一些可能影响导出速度的因素：</p><p><strong>数据量大</strong>：大量数据行和列会显著增加处理时间和内存消耗。</p><p><strong>复杂的数据格式</strong>：如果每个单元格都需要复杂的样式设置（如字体、颜色、对齐方式等等），则会增加处理时间。</p><p><strong>IO性能</strong>：磁盘IO速度慢或者网络磁盘访问延迟，都会影响导出的速度。</p><p><strong>写入方式不优化</strong>：一次写入大量数据，可能导致内存占用高或者写入速度慢。</p><p><strong>硬件性能</strong>：计算机的CPU、内存等硬件性能不够强大时，性能瓶颈也会显现。</p><p><strong>多线程与并发</strong>：EasyExcel 本身对于复杂并发的处理不是特别优化，如果有多线程的需求，没有有效的线程管理和负载均衡，可能导致性能下降。</p><p><strong>文件大小</strong>：Excel文件本身达到一定大小后，文件的读写性能会显著下降。</p><p><strong>JVM参数</strong>：分配给JVM的内存不够，导致频繁的垃圾回收（GC），影响性能。</p><p>为解决这些问题，可以尝试以下优化方法：</p><ul><li><p><strong>分批写入</strong></p></li><li><p><strong>简化格式设置</strong></p></li><li><p><strong>优化硬件</strong></p></li><li><p><strong>调优JVM参数</strong></p></li><li><p><strong>采用流式导出</strong></p></li><li><strong>多线程处理</strong></li><li><strong>减少文件大小</strong></li><li><strong>使用其他工具</strong></li></ul><p>通过这些方法，可以在一定程度上提高EasyExcel的导出速度。</p></blockquote><ul><li>分批</li><li>多线程处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大致代码 通过Gava的partition进行分组，使用 CountDownLatch 进行多线程写如不同的sheet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 查询出的数据</span></span><br><span class="line">        List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; listList = Lists.partition(strList, <span class="number">5000</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> TestFileUtil.getPath() + <span class="string">&quot;repeatedWrite&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line">        <span class="comment">// 这里 指定文件</span></span><br><span class="line">        <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> EasyExcel.write(fileName).build();</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(listList.size());</span><br><span class="line">        <span class="comment">// 这里最终会写到多个sheet里面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 每次都要创建writeSheet 这里注意必须指定sheetNo。这里注意DemoData.class 可以每次都变，我这里为了方便 所以用的同一个class 实际上可以一直变</span></span><br><span class="line">            <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(i, <span class="string">&quot;模板&quot;</span> + i).head(head()).build();</span><br><span class="line">            <span class="comment">// 分页去数据库查询数据 这里可以去数据库查询每一页的数据</span></span><br><span class="line">            taskExecutor.execute(() -&gt; write(listList.get(i), countDownLatch, excelWriter, writeSheet));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 千万别忘记finish 会帮忙关闭流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        excelWriter.finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(List&lt;String&gt; data, CountDownLatch countDownLatch, ExcelWriter excelWriter, WriteSheet writeSheet)</span> &#123;</span><br><span class="line">        excelWriter.write(data, writeSheet);</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试 <strong>报错了！ EasyExcel并不支持多线程</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;pool-2-thread-1&quot;</span> org.apache.poi.ooxml.POIXMLException: org.apache.poi.openxml4j.exceptions.InvalidOperationException: You can<span class="string">&#x27;t add a part with a part name derived from another part ! [M1.11]</span></span><br></pre></td></tr></table></figure><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://github.com/alibaba/easyexcel/issues/937">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">github的issues上有这个问题的讨论</div>            <div class="tag-link-sitename"> https://github.com/alibaba/easyexcel/issues/937</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p>但是听过很多次说Easyexcel的并行导入，怎么现在实战不行了？</p><p>AI分析+博客：最终原因是<strong>单个ExcelWriter不支持多线程</strong></p><h3 id="持续优化"><a href="#持续优化" class="headerlink" title="持续优化"></a>持续优化</h3><p>将创建ExcelWriter移入for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大致代码 通过Gava的partition进行分组，使用 CountDownLatch 进行多线程写如不同的sheet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listList.size(); i++) &#123;</span><br><span class="line">       <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> EasyExcel.write(fileName).build();</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>高兴测试</em></p><p>发现接口还是一分多钟，优化不是很明显，都打算放弃了，看到博客写可能不是EasyExcel的问题，是代码的问题。对啊都没分析过代码的耗时，死盯着EasyExcel了。</p><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><ol><li>启动 arthas</li></ol><p>根据jps找到对应的java进程选择</p><ol><li>使用 trace 跟踪方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trace 全限定类名 方法名 --skipJDKMethod <span class="literal">false</span> </span><br></pre></td></tr></table></figure><p>—skipJDKMethod让jdk自带的方法也打印出来</p><p><img src="https://oss.gincode.icu/pics/Fk2MWa2Q7I5V6kFV8BvFVoog0y89" alt="img"></p><p><strong>steam流的collect操作耗时严重！！！</strong></p><p>这里是一段DTO转VO的操作</p><h3 id="后续的修改"><a href="#后续的修改" class="headerlink" title="后续的修改"></a>后续的修改</h3><p>在查询过程中 <strong>只选择VO需要的字段</strong> ，对于一些逻辑转换<strong>直接在SQl层面进行一些函数转换（可能不太好）</strong>，删除DTO转VO的代码</p><p>这是整体导出时间：<strong>1.8min -&gt; 16s 这个提升还是不错哒！</strong> </p><p><img src="https://oss.gincode.icu/pics/FtD0u6IiUU4hIaH4GUqmiuZXCAFw" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openResty</title>
      <link href="/2024/04/17/ArrayList/openresty/"/>
      <url>/2024/04/17/ArrayList/openresty/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p><code>OpenResty</code> 是一个基于 <code>Nginx</code> 与 <code>Lua</code> 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于<strong>方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关</strong>。</p><p><code>OpenResty</code> 通过汇聚各种设计精良的 <code>Nginx</code> 模块（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx <strong>支持的各种 C 以及 Lua 模块</strong>，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。</p><p><code>OpenResty</code> 的目标是让你的 Web 服务直接跑在 Nginx 服务内部，<strong>充分利用 Nginx 的非阻塞 I/O 模型</strong>，不仅仅对 HTTP 客户端请求，甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。”</p></blockquote><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://openresty.org/cn/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/openresty.org.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">OpenResty官方文档</div>            <div class="tag-link-sitename"> https://openresty.org/cn/</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><strong>安装前的准备</strong></p><p>您必须将这些库 <code>perl 5.6.1+</code>, <code>libpcre</code>, <code>libssl</code>安装在您的电脑之中。 对于 Linux来说, 您需要确认使用 <code>ldconfig</code> 命令，让其在您的系统环境路径中能找到它们。</p></blockquote><ol><li>yum安装</li></ol><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install readline-devel pcre-devel openssl-devel</span><br></pre></td></tr></table></figure><ol><li>源码安装</li></ol><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://openresty.org/download/ngx_openresty-<span class="number">1.9</span>.<span class="number">7.1</span>.tar.gz   # 下载</span><br><span class="line">tar xzvf ngx_openresty-<span class="number">1.9</span>.<span class="number">7.1</span>.tar.gz       # 解压</span><br><span class="line">cd ngx_openresty-<span class="number">1.9</span>.<span class="number">7.1</span>/ </span><br><span class="line">./configure</span><br><span class="line">make </span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>dockerhub 拉取</li></ol><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull openresty/openresty</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>安装 OpenResty 成功后的目录结构如下（以默认安装目录为例）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/openresty/                          <span class="comment">#安装主目录</span></span><br><span class="line">├── bin                                     <span class="comment">#存放可执行文件</span></span><br><span class="line">├── luajit                                  <span class="comment">#LuaJIT运行库</span></span><br><span class="line">├── lualib                                  <span class="comment">#Lua组件</span></span><br><span class="line">├── Nginx                                   <span class="comment">#Nginx核心运行平台</span></span><br><span class="line">├── pod                                     <span class="comment">#参考手册（restydoc）使用的数据</span></span><br><span class="line">└── site                                    <span class="comment">#包管理工具（opm）使用的数据</span></span><br></pre></td></tr></table></figure><h2 id="Client-工具"><a href="#Client-工具" class="headerlink" title="Client 工具"></a>Client 工具</h2><p>如果你想安装命令行工具 resty，那么可以像下面这样安装 openresty-resty 包：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y openresty-resty</span><br></pre></td></tr></table></figure><p>OpenResty 的操作命令跟 Nginx 保持一致。可以使用 <code>-e</code> 参数可以在命令行里直接执行 Lua 代码，我们可以在命令行执行如下命令，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-5-centos ~]<span class="comment"># resty -e &quot;print(&#x27;hello world&#x27;)&quot;</span></span><br><span class="line">hello OpenResty</span><br></pre></td></tr></table></figure><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p><code>conf/nginx.conf</code>其中包含以下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/<span class="literal">error</span>.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">default_type</span> text/html;</span><br><span class="line">            <span class="section">content_by_lua_block</span> &#123;</span><br><span class="line">                ngx.say(&quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建VPN订阅工作流</title>
      <link href="/2024/04/17/ArrayList/selfvpn/"/>
      <url>/2024/04/17/ArrayList/selfvpn/</url>
      
        <content type="html"><![CDATA[<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p><strong>不想搭建可以使用博主搭建的，下滑就能找到</strong></p><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ol><li><a href="https://github.com/">github</a>账号</li><li><a href="https://dash.cloudflare.com/">cloudflare</a>账号</li></ol></div><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://github.com/Onezyh/Worker-Vless-2-USB">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">用到的Onezyh开源的项目</div>            <div class="tag-link-sitename"> https://github.com/Onezyh/Worker-Vless-2-USB</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://www.youtube.com/watch?v=hTohhSFMvBs">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/youtube.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">YouTuBe视频教程</div>            <div class="tag-link-sitename"> https://www.youtube.com/watch?v=hTohhSFMvBs</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><div class="note primary simple"><p>部署workers</p></div><ol><li>部署</li></ol><p>选择<code>Workers</code>和<code>pages</code>页面，然后点击<strong>创建应用程序</strong>。<br><img src="https://oss.gincode.icu/pics/asdqwa.png" alt=""></p><p><img src="https://oss.gincode.icu/pics/image-20240417004255224.png" alt="image-20240417004255224"></p><p>开始创建worker，创建完后<strong>部署</strong>。</p><ol><li>编辑代码</li></ol><p>部署完成后点击<strong>编辑代码</strong>。</p><p>打开<a href="https://github.com/Onezyh/Worker-Vless-2-USB">Onezyh</a>开源的项目。</p><p><img src="https://oss.gincode.icu/pics/image-20240417004651410.png" alt="image-20240417004651410"></p><p>将<a href="https://github.com/Onezyh/Worker-Vless-2-USB/blob/main/_worker.js">_worker.js</a>的代码<strong>内容复制粘贴</strong>到worker中然后从新部署。</p><div class="note primary simple"><p>部署自动获取订阅信息站点</p></div><ol><li>创建pages和下载文件</li></ol><p>继续选择·<code>Workers</code>和<code>pages</code>页面，然后点击创建应用程序（这一次选择<code>pages</code>）。</p><p><img src="https://oss.gincode.icu/pics/image-20240417004941007.png" alt="image-20240417004941007"></p><p>你可以将项目fork到你的仓库（不推荐，作者将项目压缩了），或者直接下载<a href="https://github.com/Onezyh/Worker-Vless-2-USB/blob/main/EDtunnel-main.zip">EDtunnel-main.zip</a>这个<strong>压缩包</strong>然后选择下面的进行上传。</p><ol><li>部署</li></ol><p>自己取个名字，然后将下载EDtunnel-main.zip压缩包上传，完成之后点击下方部署即可。</p><p>部署完成后我们需要点击设置，给站点<strong>添加一个UUID的环境变量</strong>（百度在线生成即可）</p><p><img src="https://oss.gincode.icu/pics/image-20240417005340388.png" alt="image-20240417005340388"></p><div class="note primary simple"><p>再次部署部署自动获取订阅信息站点</p></div><p>我们选择部署界面，点击创建新的部署（<strong>注意两次部署两次上传站点</strong>）</p><p><img src="https://oss.gincode.icu/pics/asfqwdasda.png" alt="asfqwdasda"></p><div class="note primary simple"><p>创建完成后将HOST添加到worker环境变量中</p></div><p>首先获取网站自动生成的域名</p><p><img src="https://oss.gincode.icu/pics/image-20240417010019515.png" alt="image-20240417010019515"></p><p>点击Worker和pages找到第一次部署的worker选择设置，点击变量添加两个环境变量（<strong>UUID和HOST域名</strong>）</p><p><img src="https://oss.gincode.icu/pics/image-20240417010203883.png" alt="image-20240417010203883"></p><h2 id="搭建完成获取订阅信息"><a href="#搭建完成获取订阅信息" class="headerlink" title="搭建完成获取订阅信息"></a>搭建完成获取订阅信息</h2><p>找到自己搭建的worker进入编辑代码界面GET旁别就是域名</p><p><img src="https://oss.gincode.icu/pics/awfdasga.png" alt="awfdasga"></p><p>我们在浏览器输入域名<strong>后面在添加一个/auto</strong></p><p>博主搭建的，可以直接获取使用如果不想搭建的话<br><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://selfvpn.2392189963.workers.dev/auto">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/blog.gincode.icu.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">获取订阅信息</div>            <div class="tag-link-sitename"> https://selfvpn.2392189963.workers.dev/auto</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div></p><p><img src="https://oss.gincode.icu/pics/image-20240417010837115.png" alt="image-20240417010837115"></p><p>就能获取到订阅信息</p><p>然后可以将他全选复制进V2rayN或者Clash都可以（下面以V2rayN为例）</p><h2 id="V2rayN订阅测试"><a href="#V2rayN订阅测试" class="headerlink" title="V2rayN订阅测试"></a>V2rayN订阅测试</h2><p>打开软件直接复制即可</p><ol><li>进行ping测试（TTL还是很短的）</li></ol><p><img src="https://oss.gincode.icu/pics/image-20240417011457597.png" alt="image-20240417011457597"></p><ol><li>速度测试</li></ol><p>打开YouTube4k视频</p><p><img src="https://oss.gincode.icu/pics/image-20240417011628152.png" alt="image-20240417011628152"></p><p>速度很nice 4k高画质流畅观看比一些收费的速度都要好。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JIT</title>
      <link href="/2024/01/11/ArrayList/jit/"/>
      <url>/2024/01/11/ArrayList/jit/</url>
      
        <content type="html"><![CDATA[<h2 id="JIT-编译器的引入"><a href="#JIT-编译器的引入" class="headerlink" title="JIT 编译器的引入"></a>JIT 编译器的引入</h2><p>JIT 编译器，也称为即时编译器，它是 JVM 的重要组成部分。与我们经常用的生成 Java 字节码的<code>javac</code>编译器不同，JIT 编译器是实现 Java 程序执行效率提升的核心利器。</p><p>经常有面试官会提出这样的一个问题：Java 程序是解释执行还是编译执行</p><p>源码程序<code>.java</code>文件，通过<code>javac</code>命令编译成<code>.class</code>字节码，最后通过<code>java</code>命令在虚拟机中利用解释器来执行代码。其中虚拟机的解释器作用，就是将字节码的操作指令和真正的平台体系之间的指令建立映射，比如把 Java 的<code>load</code>指令转换成<code>native code</code>的<code>load</code>指令，以此来完成程序的执行。</p><p>其实，准确的说，<strong>Java 既有解释执行，也有编译执行</strong>，其工作流程大致可以用如下图来描述。</p><p><img src="https://oss.gincode.icu/pics/jit01.jpg" alt="图片"></p><p>其中，<strong>JIT 编译器会将热点代码编译成本地平台相关的机器码，并进行各种层次的优化，从而实现程序执行效率的提升</strong>。</p><p>JIT 编译器的出现，可以说<strong>补强了虚拟机边运行边解释的低性能问题。</strong></p><p>也许有的同学会提出这样的疑问，既然引入了 JIT 编译器可以显著提升程序执行效率，那 HotSpot 为什么不直接采用 JIT 编译器来执行呢？</p><p>简单的说，解释器和编译器各有优势。</p><ul><li>当程序需要迅速启动和执行时，解释器可以首先发挥作用，省去编译的时间，可以立即执行</li><li>当程序运行后，随着时间的推移，JIT 编译器可以发挥作用，能把越来越多的代码编译成本地机器码，进一步提升程序的执行效率</li></ul><p><strong>这就是为什么 Java 程序既有解释执行，也有编译执行的原因</strong>。</p><p>用户可以通过<code>-XX:-BackgroundCompilation</code>参数来禁止后台编译，此时所有的编译请求会等待，直到编译完成后再开始执行本地机器码。</p><h2 id="JIT化技术"><a href="#JIT化技术" class="headerlink" title="JIT化技术"></a>JIT化技术</h2><p> 我们知道，想要把高级语言转变成计算机认识的机器语言有两种方式，分别是<strong>编译</strong>和<strong>解释</strong>，虽然Java转成机器语言的过程中有一个步骤是要编译成字节码，但是，这里的字节码并不能在机器上直接执行。</p><p>所以，JVM中内置了解释器(<code>interpreter</code>)，在运行时对字节码进行解释翻译成机器码，然后再执行。</p><p>解释器的执行方式是一边翻译，一边执行，因此执行效率很低。为了解决这样的低效问题，HotSpot引入了<code>JIT</code>技术（<strong>Just-In-Time</strong>）。</p><p>有了JIT技术之后，JVM还是通过解释器进行解释执行。但是，当JVM发现某个方法或代码块运行时执行的特别频繁的时候，就会认为这是“热点代码”（Hot Spot Code)。然后JIT会把部分“热点代码”翻译成本地机器相关的机器码，并进行优化，然后再把翻译后的机器码缓存起来，以备下次使用。</p><p><img src="https://oss.gincode.icu/pics/asdwdafa.png" alt="asdwdafa"></p><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><p>HotSpot虚拟机中内置了两个JIT编译器：<code>Client Complier</code>和<code>Server Complier</code>，分别用在客户端和服务端，目前主流的HotSpot虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。</p><p>当 JVM 执行代码时，它并不立即开始编译代码。首先，如果这段代码本身在将来只会被执行一次，那么从本质上看，编译就是在浪费精力。因为将代码翻译成 java 字节码相对于编译这段代码并执行代码来说，要快很多。第二个原因是最优化，当 JVM 执行某一方法或遍历循环的次数越多，就会更加了解代码结构，那么 JVM 在编译代码的时候就做出相应的优化。</p><p>在机器上，执行java -version命令就可以看到自己安装的JDK中JIT是哪种模式:</p><p>上图是我的机器上安装的jdk1.8，可以看到，他是Server Compile，但是，需要说明的是，无论是Client Complier还是Server Complier，解释器与编译器的搭配使用方式都是混合模式，即上图中的mixed mode。</p><p>它们之间的区别，可以用如下内容简要概括：</p><ul><li><code>Client Compiler</code>（C1编译器）：它是一个简单快速的编译器，主要关注点在于局部性的优化，而放弃了许多耗时间长的全局优化手段</li><li><code>Sever Compiler</code>（C2编译器）：它是专门面向服务端的典型应用并为服务端的性能配置特别调整过的编译器，它会执行所有经典的优化动作，如无用代码消除、循环展开、常量传播、基本块重排序等，还会实施一些与 Java 语言特性密切相关的优化技术，如范围检查消除、空值检查消除等，另外，还有可能根据解释器或 Client Compiler 提供的性能监控信息，进行一些不稳定的激进优化，如守护内联、分支频率预测等</li></ul><h2 id="热点检测"><a href="#热点检测" class="headerlink" title="热点检测"></a>热点检测</h2><p>上面我们说过，要想触发JIT，首先需要识别出热点代码。目前主要的热点代码识别方式是热点探测（Hot Spot Detection），有以下两种：</p><ol><li><p>基于采样的方式探测（Sample Based Hot Spot Detection) ：<br>周期性检测各个线程的栈顶，发现某个方法经常出现在栈顶，就认为是热点方法。好处就是简单，<br>缺点就是无法精确确认一个方法的热度。容易受线程阻塞或别的原因干扰热点探测。</p></li><li><p>基于计数器的热点探测（Counter Based Hot Spot Detection)。<br>采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，某个方法超过阀值就认为是热点方法，触发JIT编译。</p></li></ol><p>在HotSpot虚拟机中使用的是第二种——基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：<strong>方法调用计数器和回边计数器。</strong></p><ul><li>方法计数器。顾名思义，就是记录一个方法被调用次数的计数器。</li><li>回边计数器。是记录方法中的for或者while的运行次数的计数器。</li></ul><h3 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h3><p>方法调用计数器，通常用于统计方法被调用的次数。它的默认阈值在<code>Client</code>模式下是 1500 次，在<code>Server</code>模式下是 10000 次，这个阈值可以通过<code>-XX:CompileThreshold</code>参数来人为设定。</p><p>当一个方法被调用时，会检查方法是否存在被 JIT 编译过的版本，如果存在，则优先使用编译后的本地机器码来执行；如果不存在，将此方法的调用计数器值加 1，然后判断方法调用计数器和回边计数器之和是否超过方法调用计数器的阈值，如果超过，向即时编译器提交一个该方法的代码编译请求，在默认不设置的情况下，不会同步等待编译请求完成，而时直接以解释方式执行方法。</p><p>具体流程，可以用如下图来概括。</p><p><img src="https://oss.gincode.icu/pics/jit02.jpg" alt="图片"></p><h3 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h3><p>回边计数器，通常用于统计一个方法中循环体代码执行的次数。在字节码方法循环体中，遇到控制流向后跳转的指令成为”回边”，这个过程会产生“栈上替换”的行为，也就是方法栈帧还在栈上，只是方法被替换了，HotSpot 把这个过程触发的即时编译，称之为 OSR 编译。</p><p>关于回边计数器的阈值设置，虚拟机没有明确给出对应的参数，但是可以通过<code>-XX:OnStackReplacePercentage</code>参数来间接的调整回边计数器的阈值，这个参数也称为 ORS 比率，回边计数器的阈值计算公式如下：</p><ul><li>Client 模式：方法调用计数器阈值 × OSR 比率 / 1000，其中 OSR 比率默认值933，如果都取默认值，回边计数器的阈值应该是 13995</li><li>Server 模式：方法调用计数器阈值 × ( OSR 比率 - 解释器监控比率) / 100，其中 OSR 比率默认 140，解释器监控比率默认33，如果都取默认值，回边计数器阈值应该是 10700</li></ul><p>当解释器遇到一条回边指令时，会先查找需要执行的代码片段中是否有已经编译的版本，如果有，会优先执行已编译好的代码；如果没有，就会把回边计数器的值加 1，然后判断方法调用计数器和回边计数器值之和是否超过回边计数器的阈值，如果超过，就会向即时编译器提交一个 OSR 编译请求，并且把回边计数器的值降低一些，以便继续在解释器中执行循环。</p><p>具体流程，可以用如下图来概括。</p><p><img src="https://oss.gincode.icu/pics/jit03.jpg" alt="图片"></p><h2 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h2><p>前面提到过，JIT除了具有缓存的功能外，还会对代码做各种优化。说到这里，不得不佩服HotSpot的开发者，他们在JIT中对于代码优化真的算是面面俱到了。</p><p>主要的优化有：</p><blockquote><p>逃逸分析、 锁消除、 锁膨胀、 方法内联、 空值检查消除、 类型检测消除、 公共子表达式消除</p></blockquote><h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><p>逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他地方中，称为方法逃逸。</p><p>例如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title function_">craeteStringBuffer</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb; <span class="comment">// 动态作用域发生改变</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createStringBuffer</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb.toString(); <span class="comment">// 返回string StringBuffer动态作用域结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一段代码中的StringBuffer就逃逸了，而第二段代码中的StringBuffer就没有逃逸。</p><p>使用逃逸分析，编译器可以对代码做如下优化：</p><ol><li><p>同步省略。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p></li><li><p>将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。</p></li><li><p>分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</p></li></ol><p>在Java代码运行时，通过JVM参数可指定是否开启逃逸分析，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:+DoEscapeAnalysis： 表示开启逃逸分析</span><br><span class="line"></span><br><span class="line">-XX:-DoEscapeAnalysis ： 表示关闭逃逸分析 从jdk <span class="number">1.7</span>开始已经默认开始逃逸分析，</span><br><span class="line">    如需关闭，需要指定-XX:-DoEscapeAnalysis</span><br></pre></td></tr></table></figure><h3 id="同步省略"><a href="#同步省略" class="headerlink" title="同步省略"></a>同步省略</h3><p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。</p><p>如果同步块所使用的锁对象通过这种分析被证实只能够被一个线程访问，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这个取消同步的过程就叫同步省略，也叫<strong>锁消除</strong>。</p><p>如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;panther&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中对<strong>lock</strong>这个对象进行加锁，但是<strong>lock</strong>对象的生命周期只在process()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉。优化成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;panther&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，在使用synchronized的时候，如果JIT经过逃逸分析之后发现并无线程安全问题的话，就会做<strong>锁消除。</strong></p><h3 id="标量替换-amp-栈上分配"><a href="#标量替换-amp-栈上分配" class="headerlink" title="标量替换&amp;栈上分配"></a>标量替换&amp;栈上分配</h3><p> <strong>JIT优化可能带来的问题</strong> </p><p>大家理解了JIT编译的原理之后，其实可以知道，JIT优化是在运行期进行的，并且也不是Java进程刚一启动就能优化的，是需要先执行一段时间的，因为他需要先知道哪些是热点代码。</p><p>所以，在JIT优化开始之前，我们的所有请求，都是要经过解释执行的，这个过程就会相对慢一些。</p><p>而且，如果你们的应用的请求量比较大的的话，这种问题就会更加明显，在应用启动过程中，会有大量的请求过来，这就会导致解释器持续的在努力工作。</p><p>一旦解释器对CPU资源占用比较大的话，就会间接的导致CPU、LOAD等飙高，导致应用的性能进一步下降。这也是为什么很多应用在发布过程中，会出现刚刚重启好的应用会发生大量的超时问题了。</p><p>而随着请求的不断增多，JIT优化就会被触发，这就是使得后续的热点请求的执行可能就不需要在通过解释执行了，直接运行JIT优化后缓存的机器码就行了。</p><blockquote><p> <strong>如何解决</strong> </p><p>主要有两种思路：</p><ol><li><p>提升JIT优化的效率</p></li><li><p>降低瞬时请求量</p></li></ol><p>很多人都听说过缓存预热，其实思想是类似的。</p><p>就是说在应用刚刚启动的时候，通过调节负载均衡，不要很快的把大流量分发给他，而是先分给他一小部分流量，通过这部分流量来触发JIT优化，等优化好了之后，再把流量调大。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 主从复制</title>
      <link href="/2023/12/20/computer-science/java/UtilTools/redis/redisslave/"/>
      <url>/2023/12/20/computer-science/java/UtilTools/redis/redisslave/</url>
      
        <content type="html"><![CDATA[<h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><p><strong>Redis 单机部署一般存在如下几个问题：</strong></p><ol><li>机器故障，导致 Redis 不可用，数据丢失</li><li>容量瓶颈：容量不能水平扩展</li><li>QPS 瓶颈：一台机器的处理能力、网络宽带总是有限的，如果能够划分一些流量到其他机器，可以有效解决 QPS 问题</li></ol><p><strong>Redis 提供的主从复制功能，实现了一份数据存在多个相同的副本，它是实现 Redis 高可用的基础，作用</strong>有如下几个：</p><ul><li>数据冗余：主从复制实现了数据的热备份，是 Redis 持久化之外的一种数据冗余方式</li><li>故障恢复：当主节点出现故障时，可以将从节点晋升为主节点继续提供服务，实现快速的故障恢复</li><li>读写分离：主从复制可以实现读写分离，主节点写，从节点读，读写分离提高了服务器的负载能力</li><li>高可用的基石：主从复制是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础</li></ul><h3 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h3><p>默认情况下，Redis 所有节点都是主节点，节点与节点之间互不干涉，而参与主从复制的节点则是划分了主节点（<code>master</code>）和从节点（<code>slave</code>），它具有如下几个特点：</p><ol><li>主节点下有一个或者多个从节点</li><li>每一个从节点只能有一个主节点</li><li>数据的复制是单向的，只能由主节点复制到从节点，所以我们不能在从节点上面执行写的操作</li></ol><p>配置主从复制，只需要一个命令 slaveof ip port 即可，可以有三种方式</p><ol><li>配置在配置文件中添加 slaveof ip port</li><li>在 redis-server 启动命令后增加 —slaveof ip port</li><li>直接使用命令 slaveof ip port</li></ol><p>注意使用在从节点上面执行，ip 对应的是 masterIP，port 对应的也是 masterPort。下面来分析下主从复制的过程。<br>准备环境如下：</p><div class="table-container"><table><thead><tr><th><strong>角色</strong></th><th><strong>IP</strong></th><th><strong>port</strong></th></tr></thead><tbody><tr><td>master</td><td>127.0.0.1</td><td>6379</td></tr><tr><td>slave</td><td>127.0.0.1</td><td>6380</td></tr></tbody></table></div><p>注：在生产环境中不推荐将主从服务器搭建在同一台服务器上面，这里是为了演示方便。</p><p>windows 启动redis-server不会选择当前文件夹配置的配置文件，可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SH</span><br><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><ol><li>启动 6379 、 6380 两台服务器，在 6380 上面执行 <code>slaveof 127.0.0.1 6379</code></li><li>在 master 节点，执行命令 <code>set test panther</code></li><li>在 slave 节点，执行命令 <code>get test</code>，得到的结果 <code>panther</code>，表名 master 数据已经同步到 slave 节点，主从部署完成。如下图</li></ol><p><img src="https://oss.gincode.icu/pics/image-20231221172036068.png" alt="image-20231221172036068"></p><h3 id="主节点和从节点INFO信息"><a href="#主节点和从节点INFO信息" class="headerlink" title="主节点和从节点INFO信息"></a>主节点和从节点INFO信息</h3><p><img src="https://oss.gincode.icu/pics/123.png" alt="123"></p><blockquote><ul><li>主节点</li></ul><p>connected_slaves:1 # 当前节点下存在一个从节定<br>slave0:ip=127.0.0.1,port=6380,state=online,offset=410,lag=1 # offset偏移量<br>master_repl_offset:410 # 主机点偏移量<br>repl_backlog_active:1 #是否开启复制缓冲区，1 表示已开启<br>repl_backlog_size:1048576 # 复制缓冲区的最大长度<br>repl_backlog_first_byte_offset:2 #起始偏移量，用于计算当前缓冲区可用范围<br>repl_backlog_histlen:409 # 已保存数据的有效长度</p><ul><li>从节点</li></ul><p>role:slave # 角色为 slave 节点<br>master_host:127.0.0.1<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:4 # 从节点超时时间 从网络断开到恢复后<br>master_sync_in_progress:0 # 数据同步状态，0 表示没有在进行数据同步<br>slave_repl_offset:522 # 偏移量<br>slave_priority:100 # 优先级<br>slave_read_only:1 # 从节点只读<br>connected_slaves:0<br>master_repl_offset:0<br>repl_backlog_active:0<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:0<br>repl_backlog_histlen:0</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Redis 主从复制大体可以分为三个阶段：</p><ol><li>建立连接阶段</li><li>数据同步阶段</li><li>命令传播阶段</li></ol><h3 id="建立连接阶段"><a href="#建立连接阶段" class="headerlink" title="建立连接阶段"></a>建立连接阶段</h3><p>该阶段的主要作用就是主从节点建立连接，为数据同步做准备。</p><p><strong>1. 保存主节点信息</strong></p><p>当从节点执行 <code>slaveof masterIp masterPort</code> 命令后，就会将主节点的IP、port 信息保存下来，这里需要注意的是 <code>slaveof</code> 是异步命令，它在保存主节点信息后立刻返回，实际的建立连接阶段是之后进行的。</p><p><strong>2. 建立 socket 连接</strong></p><p>从节点内部通过定时任务（每秒执行一次）维护着复制相关的逻辑，如果发现有了新的主节点，便会根据主节点的 IP 和 PORT ，创建 socket 连接，如果连接成功</p><p><strong>3、发送 ping 命令</strong></p><p>当主从节点建立连接后，从节点则就变成了主节点的一个客户端，这时从节点就会向主节点发送 PING 命令，发送该命令的目的有两个：</p><ol><li>验证 socket 连接是否可用</li><li>判断主节点是否可以处理请求</li></ol><p>从节点发送 ping 命令后，它可能会收到三个类型的回复：</p><ol><li><strong>PONG</strong>：说明当前 socket 连接可用，且主节点可以处理请求，复制进程继续</li><li><strong>超时</strong>：说明当前 socket 不可用，从节点则断开连接，重连</li><li><strong>其他命令</strong>：如果主节点返回其他结果，说明主节点无法处理命令，当前可能正在处理其他超时运行的脚本，则从节点断开连接，重连</li></ol><h3 id="命令传播阶段"><a href="#命令传播阶段" class="headerlink" title="命令传播阶段"></a>命令传播阶段</h3><p>当主节点完成数据同步节点后，主节点已经将当前数据同步给从节点了，但是主节点还是在不断地接受命令，为了保证主从数据一致性，主节点需要持续不断地将写命令发送给从节点，需要注意的是，这个过程异步过程，即主节点发送写命令后并不会等待从节点的回复，因此主从节点之间的数据延迟是难免的，所以主从节点保证的是最终一致性。同时，主从之间的延迟与他们两者之间的网络状况、主节点写命令的执行频率、以及主节点中的 <code>repl-disable-tcp-nodelay</code> 配置等有关。</p><h2 id="全量复制与部分复制"><a href="#全量复制与部分复制" class="headerlink" title="全量复制与部分复制"></a>全量复制与部分复制</h2><p>触发全量复制的条件</p><ul><li>第一次复制</li></ul><p>由于是第一次进行数据同步，从节点并不知道主节点的 runid，所以发送 psync ? -1</p><p><img src="https://oss.gincode.icu/pics/1702978155055-e503ce18-067e-4ddc-b1eb-d602e62cd7f0.png" alt="image.png"></p><ul><li>节点运行 ID 不匹配</li></ul><p>我们将主机节点重启，主节点的ID会发送改变，这是从节点来复制数据就会触发全量复制</p><ul><li>复制偏移量 offset 不在复制积压缓冲区中</li></ul><p>触发部分复制</p><p>当主从节点在命令传播节点发生了网络中断，出现数据丢失情况，则从节点会向主节点请求发送丢失的数据，如果请求的偏移量在复制积压缓冲区中，则主节点就将剩余的数据补发给从节点，保持主从节点数据一致，由于补发的数据一般都会比较小，所以开销相当于全量复制而言也会很小，流程如下：</p><p><img src="https://oss.gincode.icu/pics/1703066068525-f2c88858-1818-423d-a0fb-5080b162f8aa.png" alt="image.png"></p><ol><li>由于主节点没有宕机，所以他依然会响应客户端命令，当然这些命令也不会丢失，都会存储在复制积压缓冲区中，默认 1MB。</li><li>当主从直接回复连接，从节点再次连接主节点</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMH - Java 代码性能测试</title>
      <link href="/2023/12/11/ArrayList/JMH/"/>
      <url>/2023/12/11/ArrayList/JMH/</url>
      
        <content type="html"><![CDATA[<h1 id="JMH-Java-代码性能测试的终极利器、必须掌握"><a href="#JMH-Java-代码性能测试的终极利器、必须掌握" class="headerlink" title="JMH - Java 代码性能测试的终极利器、必须掌握"></a>JMH - Java 代码性能测试的终极利器、必须掌握</h1><h2 id="JMH-介绍"><a href="#JMH-介绍" class="headerlink" title="JMH 介绍"></a>JMH 介绍</h2><p>那么如何对 Java 程序进行一次精准的性能测试呢？难道需要掌握很多 JVM 优化细节吗？难道要研究如何避免，并进行正确编码才能进行严格的性能测试吗？显然不是，如果是这样的话，未免过于困难了，好在有一款一款官方的微基准测试工具 - <strong>JMH</strong>.</p><p><strong>JMH</strong> 的全名是 Java Microbenchmark Harness，它是由 <strong>Java 虚拟机团队</strong>开发的一款用于 Java <strong>微基准测试工具</strong>。用自己开发的工具测试自己开发的另一款工具，以子之矛，攻子之盾果真手到擒来，如臂使指。使用 <strong>JMH</strong> 可以让你方便快速的进行一次严格的代码基准测试，并且有多种测试模式，多种测试维度可供选择；而且使用简单、增加注解便可启动测试。</p><h2 id="JMH-使用"><a href="#JMH-使用" class="headerlink" title="JMH 使用"></a>JMH 使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span> <span class="comment">//表明了类中变量的作用范围</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 3)</span><span class="comment">//用于做预热配置 iterations：预热迭代的次数</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5)</span> <span class="comment">// 与预热相同 ，并且执行结果会被统计到测试结果中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sample</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span><span class="comment">// 加上这个注解就会被扫描到</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.AverageTime)</span> <span class="comment">// 输出平均时间</span></span><br><span class="line">    <span class="meta">@OutputTimeUnit(TimeUnit.MILLISECONDS)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">stringAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            string = string + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span> <span class="comment">// 加上这个注解就会被扫描到</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.AverageTime)</span> <span class="comment">// 输出平均时间</span></span><br><span class="line">    <span class="meta">@OutputTimeUnit(TimeUnit.MILLISECONDS)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">stringBuilderAppend</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            stringBuilder.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException &#123;</span><br><span class="line">        <span class="type">Options</span> <span class="variable">opt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>()</span><br><span class="line">                .include(sample.class.getSimpleName()) <span class="comment">// 会扫描sample中@Benchmark的方法进行测试</span></span><br><span class="line">                .forks(<span class="number">1</span>) <span class="comment">// 线程数</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip bolt"><p>输出</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># JMH version: <span class="number">1.36</span></span><br><span class="line"># VM version: JDK <span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>, Java <span class="title function_">HotSpot</span><span class="params">(TM)</span> <span class="number">64</span>-Bit Server VM, <span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>+<span class="number">2</span>-<span class="number">6</span></span><br><span class="line"># VM invoker: D:\program\jdk-<span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>\bin\java.exe</span><br><span class="line"># VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA <span class="number">2022.3</span><span class="number">.2</span>\lib\idea_rt.jar=<span class="number">5220</span>:C:\Program Files\JetBrains\IntelliJ IDEA <span class="number">2022.3</span><span class="number">.2</span>\bin -Dfile.encoding=UTF-<span class="number">8</span> -Dsun.stdout.encoding=UTF-<span class="number">8</span> -Dsun.stderr.encoding=UTF-<span class="number">8</span></span><br><span class="line"># Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=<span class="literal">false</span> to disable)</span><br><span class="line"># Warmup: <span class="number">3</span> iterations, <span class="number">10</span> s each</span><br><span class="line"># Measurement: <span class="number">5</span> iterations, <span class="number">10</span> s each</span><br><span class="line"># Timeout: <span class="number">10</span> min per iteration</span><br><span class="line"># Threads: <span class="number">1</span> thread, will synchronize iterations</span><br><span class="line"># Benchmark mode: Average time, time/op</span><br><span class="line"># Benchmark: com.panther.DB.jmh.sample.stringAdd</span><br><span class="line"></span><br><span class="line"># Run progress: <span class="number">0.00</span>% complete, ETA <span class="number">00</span>:<span class="number">02</span>:<span class="number">40</span></span><br><span class="line"># Fork: <span class="number">1</span> of <span class="number">1</span></span><br><span class="line"># Warmup Iteration   <span class="number">1</span>: <span class="number">60.229</span> ms/op</span><br><span class="line"># Warmup Iteration   <span class="number">2</span>: <span class="number">69.095</span> ms/op</span><br><span class="line"># Warmup Iteration   <span class="number">3</span>: <span class="number">105.360</span> ms/op</span><br><span class="line">Iteration   <span class="number">1</span>: <span class="number">141.599</span> ms/op</span><br><span class="line">Iteration   <span class="number">2</span>: <span class="number">169.866</span> ms/op</span><br><span class="line">Iteration   <span class="number">3</span>: <span class="number">208.903</span> ms/op</span><br><span class="line">Iteration   <span class="number">4</span>: <span class="number">287.697</span> ms/op</span><br><span class="line">Iteration   <span class="number">5</span>: <span class="number">321.151</span> ms/op</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result <span class="string">&quot;com.panther.DB.jmh.sample.stringAdd&quot;</span>:</span><br><span class="line">  <span class="number">225.843</span> ±(<span class="number">99.9</span>%) <span class="number">294.688</span> ms/op [Average]</span><br><span class="line">  (min, avg, max) = (<span class="number">141.599</span>, <span class="number">225.843</span>, <span class="number">321.151</span>), stdev = <span class="number">76.529</span> <span class="comment">// 执行的最小、平均、最大、误差值</span></span><br><span class="line">  CI (<span class="number">99.9</span>%): [≈ <span class="number">0</span>, <span class="number">520.531</span>] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMH version: <span class="number">1.36</span></span><br><span class="line"># VM version: JDK <span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>, Java <span class="title function_">HotSpot</span><span class="params">(TM)</span> <span class="number">64</span>-Bit Server VM, <span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>+<span class="number">2</span>-<span class="number">6</span></span><br><span class="line"># VM invoker: D:\program\jdk-<span class="number">18.0</span><span class="number">.1</span><span class="number">.1</span>\bin\java.exe</span><br><span class="line"># VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA <span class="number">2022.3</span><span class="number">.2</span>\lib\idea_rt.jar=<span class="number">5220</span>:C:\Program Files\JetBrains\IntelliJ IDEA <span class="number">2022.3</span><span class="number">.2</span>\bin -Dfile.encoding=UTF-<span class="number">8</span> -Dsun.stdout.encoding=UTF-<span class="number">8</span> -Dsun.stderr.encoding=UTF-<span class="number">8</span></span><br><span class="line"># Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=<span class="literal">false</span> to disable)</span><br><span class="line"># Warmup: <span class="number">3</span> iterations, <span class="number">10</span> s each</span><br><span class="line"># Measurement: <span class="number">5</span> iterations, <span class="number">10</span> s each</span><br><span class="line"># Timeout: <span class="number">10</span> min per iteration</span><br><span class="line"># Threads: <span class="number">1</span> thread, will synchronize iterations</span><br><span class="line"># Benchmark mode: Average time, time/op</span><br><span class="line"># Benchmark: com.panther.DB.jmh.sample.stringBuilderAppend</span><br><span class="line"></span><br><span class="line"># Run progress: <span class="number">50.00</span>% complete, ETA <span class="number">00</span>:<span class="number">01</span>:<span class="number">21</span></span><br><span class="line"># Fork: <span class="number">1</span> of <span class="number">1</span></span><br><span class="line"># Warmup Iteration   <span class="number">1</span>: <span class="number">1.724</span> ms/op</span><br><span class="line"># Warmup Iteration   <span class="number">2</span>: <span class="number">4.094</span> ms/op</span><br><span class="line"># Warmup Iteration   <span class="number">3</span>: <span class="number">4.558</span> ms/op</span><br><span class="line">Iteration   <span class="number">1</span>: <span class="number">5.293</span> ms/op</span><br><span class="line">Iteration   <span class="number">2</span>: <span class="number">5.077</span> ms/op</span><br><span class="line">Iteration   <span class="number">3</span>: <span class="number">6.040</span> ms/op</span><br><span class="line">Iteration   <span class="number">4</span>: <span class="number">6.449</span> ms/op</span><br><span class="line">Iteration   <span class="number">5</span>: <span class="number">7.213</span> ms/op</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result <span class="string">&quot;com.panther.DB.jmh.sample.stringBuilderAppend&quot;</span>:</span><br><span class="line">  <span class="number">6.014</span> ±(<span class="number">99.9</span>%) <span class="number">3.349</span> ms/op [Average]</span><br><span class="line">  (min, avg, max) = (<span class="number">5.077</span>, <span class="number">6.014</span>, <span class="number">7.213</span>), stdev = <span class="number">0.870</span></span><br><span class="line">  CI (<span class="number">99.9</span>%): [<span class="number">2.666</span>, <span class="number">9.363</span>] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Run complete. Total time: <span class="number">00</span>:<span class="number">02</span>:<span class="number">43</span></span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use <span class="title function_">profilers</span> <span class="params">(see -prof, -lprof)</span>, design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM/OS/HW level, ask <span class="keyword">for</span> reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise</span><br><span class="line">extra caution when trusting the results, look into the generated code to check the benchmark still</span><br><span class="line">works, and factor in a small probability of <span class="keyword">new</span> <span class="title class_">VM</span> bugs. Additionally, <span class="keyword">while</span> comparisons between</span><br><span class="line">different JVMs are already problematic, the performance difference caused by different Blackhole</span><br><span class="line">modes can be very significant. Please make sure you use the consistent Blackhole mode <span class="keyword">for</span> comparisons.</span><br><span class="line"></span><br><span class="line">Benchmark                          Mode  Cnt    Score     Error  Units</span><br><span class="line">DB.jmh.sample.stringAdd            avgt    <span class="number">5</span>  <span class="number">225.843</span> ± <span class="number">294.688</span>  ms/op</span><br><span class="line">DB.jmh.sample.stringBuilderAppend  avgt    <span class="number">5</span>    <span class="number">6.014</span> ±   <span class="number">3.349</span>  ms/op</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>Result “com.panther.DB.jmh.sample.<strong>stringAdd</strong>“:<br>  225.843 ±(99.9%) 294.688 ms/op [Average]<br>  (min, avg, max) = (141.599, 225.843, 321.151), stdev = 76.529 // 执行的最小、平均、最大、误差值</p><p>Result “com.panther.DB.jmh.sample.stringBuilderAppend”:<br>  6.014 ±(99.9%) 3.349 ms/op [Average]<br>  (min, avg, max) = (5.077, 6.014, 7.213), stdev = 0.870</p><p>String 拼接的平均时间： 225.843ms</p><p>StringBuilder 拼接的平均时间： 6.014</p></blockquote><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><blockquote><ol><li><code>@Benchmark</code> 用于方法上且该方法必须使用public修饰，表明该方法为基准测试方法。</li><li>@<code>BenchmarkMode</code> 用于方法或类上，<strong>表明测试指标</strong><ul><li>Mode.Throughput，<strong>吞吐量</strong>，单位时间内执行的次数；</li><li>Mode.AverageTime，<strong>平均时间</strong>，执行方法的平均耗时；</li><li>Mode.SampleTime，<strong>操作时间采样</strong>，并输出结果分布;</li><li>Mode.SingleShotTime，<strong>单次操作时间</strong>，通常在不进行预热时测试冷启动的时间。</li></ul></li><li><code>@Warmup</code> 用于方法或类上，<strong>用于做预热配置</strong><ul><li>iterations，预热迭代的次数；</li><li>time，每个预热迭代的时间；</li><li>timeUnit，时间单位；</li><li>batchSize，每个操作调用的次数。</li></ul></li><li><code>@State</code>用于类上，<strong>表明了类中变量的作用范围</strong><ul><li>Scope.Benchmark，每个测试方法中使用一个变量；</li><li>Scope.Group，每个分组中使用同一个变量；</li><li>Scope.Thread，每个线程中使用同一个变量。</li></ul></li><li><code>@Setup</code>用于方法上，<strong>基准测试前的初始化操作</strong><ul><li>Level.Trial，所有基准测试执行时；</li><li>Level.Iteration，每次迭代时；</li><li>Level.Invocation，每次方法调用时。</li></ul></li><li><code>@TearDown</code>用于方法上，与Setup的作用相反，<strong>是基准测试后的操作</strong></li><li><code>@Threads</code>用于方法和类上，<strong>指定基准测试中的并行线程数</strong></li><li><code>@Fork</code>用于方法和类上，<strong>指定基准测试中Fork的子进程</strong>。Fork提供了6个参数：<ul><li>value，表示Fork出的子进程数量；</li><li>warmups，预热次数；</li><li>jvm，JVM的位置；</li><li>jvmArgs，需要<strong>替换</strong>的JVM参数；</li><li>jvmArgsPrepend，需要<strong>添加</strong>的JVM参数；</li><li>jvmArgsAppend，需要<strong>追加</strong>的JVM参数。</li></ul></li><li>CompilerControl用于方法，构造器或类上，<strong>指定编译方式</strong><ul><li>BREAK，将断点插入到编译后的代码；</li><li>PRINT，打印方法及其配置；</li><li>EXCLUDE，禁止编译；</li><li>INLINE，使用内联；</li><li>DONT_INLINE，禁止内联；</li><li>COMPILE_ONLY，仅编译。</li></ul></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟线程</title>
      <link href="/2023/12/07/ArrayList/VirtualThread/"/>
      <url>/2023/12/07/ArrayList/VirtualThread/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟线程"><a href="#虚拟线程" class="headerlink" title="虚拟线程"></a>虚拟线程</h1><h3 id="线程术语定义"><a href="#线程术语定义" class="headerlink" title="线程术语定义"></a>线程术语定义</h3><p><strong>操作系统线程（OS Thread）</strong>：由操作系统管理，是操作系统调度的基本单位。</p><p><strong>平台线程（Platform Thread）</strong>：Java.Lang.Thread 类的每个实例，都是一个平台线程，是 Java 对操作系统线程的包装，与操作系统是 1:1 映射。</p><p><strong>虚拟线程（Virtual Thread）</strong>：一种轻量级，由 JVM 管理的线程。对应的实例 java.lang.VirtualThread 这个类。</p><p><strong>载体线程（Carrier Thread）</strong>：指真正负责执行虚拟线程中任务的平台线程。一个虚拟线程装载到一个平台线程之后，那么这个平台线程就被称为虚拟线程的载体线程。</p><h3 id="虚拟线程定义"><a href="#虚拟线程定义" class="headerlink" title="虚拟线程定义"></a>虚拟线程定义</h3><p>JDK 中 java.lang.Thread 的每个实例都是一个平台线程。平台线程在底层操作系统线程上运行 Java 代码，并在代码的整个生命周期内独占操作系统线程，平台线程实例本质是由系统内核的线程调度程序进行调度，并且<strong>平台线程的数量受限于操作系统线程的数量</strong>。</p><blockquote><p><strong>而虚拟线程(Virtual Thread)它不与特定的操作系统线程相绑定</strong>。它在平台线程上运行 Java 代码，但在代码的整个生命周期内不独占平台线程。<strong>这意味着许多虚拟线程可以在同一个平台线程上运行他们的 Java 代码，共享同一个平台线程。</strong>同时虚拟线程的成本很低，<strong>虚拟线程的数量可以比平台线程的数量大得多。</strong></p></blockquote><p><img src="https://oss.gincode.icu/pics/bf9bfaeeeeb6632b19c71f98aad3b303.png" alt="17.png"></p><h3 id="虚拟线程和平台线程的区别"><a href="#虚拟线程和平台线程的区别" class="headerlink" title="虚拟线程和平台线程的区别"></a>虚拟线程和平台线程的区别</h3><p>首先，<strong>虚拟线程总是守护线程</strong>。<code>setDaemon (false)</code>方法不能将虚拟线程更改为非守护线程。所以，需要注意的是，当所有启动的非守护线程都终止时，JVM将终止。这意味着JVM不会等待虚拟线程完成后才退出。</p><p>其次，即使使用setPriority()方法，<strong>虚拟线程始终具有normal的优先级</strong>，且不能更改优先级。在虚拟线程上调用此方法没有效果。</p><p>还有就是，虚拟线程是不支持stop()、suspend()或resume()等方法。这些方法在虚拟线程上调用时会抛出UnsupportedOperationException异常。</p><h2 id="虚拟线程创建"><a href="#虚拟线程创建" class="headerlink" title="虚拟线程创建"></a>虚拟线程创建</h2><ol><li>直接创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">vt</span> <span class="operator">=</span> Thread.startVirtualThread(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello wolrd virtual thread&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><strong>创建虚拟线程但不自动运行，手动调用start()开始运行</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread.ofVirtual().unstarted(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello wolrd virtual thread&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">vt.start();</span><br></pre></td></tr></table></figure><ol><li><strong>通过虚拟线程的 ThreadFactory 创建虚拟线程</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadFactory</span> <span class="variable">tf</span> <span class="operator">=</span> Thread.ofVirtual().factory();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">vt</span> <span class="operator">=</span> tf.newThread(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Start virtual thread...&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">vt.start();</span><br></pre></td></tr></table></figure><ol><li><strong>通过</strong>Executors创建虚拟线程池</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">Future&lt;?&gt; submit = executor.submit(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Start virtual thread...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">executor.execute(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Start virtual thread...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="虚拟线程实现原理"><a href="#虚拟线程实现原理" class="headerlink" title="虚拟线程实现原理"></a>虚拟线程实现原理</h2><p>虚拟线程是由 Java 虚拟机调度，而不是操作系统。虚拟线程占用空间小，同时使用轻量级的任务队列来调度虚拟线程，避免了线程间基于内核的上下文切换开销，因此可以极大量地创建和使用。</p><p><strong>简单来看，虚拟线程实现如下：virtual thread =continuation+scheduler+runnable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">mount();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Continuation.run();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    unmount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚拟线程会把任务（java.lang.Runnable实例）包装到一个 <code>Continuation</code> 实例中:</p><ul><li><p>当任务需要阻塞挂起的时候，会调用 Continuation 的 yield 操作进行阻塞，虚拟线程会从平台线程卸载。</p></li><li><p>当任务解除阻塞继续执行的时候，调用 Continuation.run 会从阻塞点继续执行。</p><p><code>Scheduler</code> 也就是执行器，由它将任务提交到具体的载体线程池中执行。</p></li><li><p>它是 java.util.concurrent.Executor 的子类。</p></li><li><p>虚拟线程框架提供了一个默认的 FIFO 的 ForkJoinPool 用于执行虚拟线程任务。</p></li></ul><p>Runnable 则是真正的任务包装器，由 Scheduler 负责提交到载体线程池中执行。</p><p>JVM 把虚拟线程分配给平台线程的操作称为 mount（挂载），取消分配平台线程的操作称为 unmount（卸载）：</p><blockquote><p><strong>mount 操作</strong>：虚拟线程挂载到平台线程，虚拟线程中包装的 Continuation 堆栈帧数据会被拷贝到平台线程的线程栈，这是一个从堆复制到栈的过程。</p><p><strong>unmount 操作</strong>：虚拟线程从平台线程卸载，此时虚拟线程的任务还没有执行完成，所以虚拟线程中包装的 Continuation 栈数据帧会会留在堆内存中。</p></blockquote><p>从 Java 代码的角度来看，其实是看不到虚拟线程及载体线程共享操作系统线程的，会认为虚拟线程及其载体都在同一个线程上运行，因此，在同一虚拟线程上多次调用的代码可能会在每次调用时挂载的载体线程都不一样。JDK 中使用了 <strong>FIFO 模式的 ForkJoinPool 作为虚拟线程的调度器</strong>，从这个调度器看虚拟线程任务的执行流程大致如下：</p><blockquote><ol><li>调度器（线程池）中的平台线程等待处理任务。</li><li>一个虚拟线程被分配平台线程，该平台线程作为载体线程执行虚拟线程中的任务。</li><li>虚拟线程运行其 Continuation，Mount(挂载)平台线程后，最终执行 Runnable 包装的用户实际任务。</li><li>虚拟线程任务执行完成，标记 Continuation 终结，标记虚拟线程为终结状态，清空上下文，等待 GC 回收，解除挂载载体线程会返还到调度器（线程池）中等待处理下一个任务。</li></ol><p><img src="https://oss.gincode.icu/pics/image-20231207104910149.png" alt="image-20231207104910149"></p></blockquote><p>上面是没有阻塞场景的虚拟线程任务执行情况，如果遇到了阻塞(例如 Lock 等)场景，会触发 Continuation 的 yield 操作让出控制权，等待虚拟线程重新分配载体线程并且执行，具体见下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">       Thread.startVirtualThread(() -&gt; &#123;</span><br><span class="line">           lock.lock();    </span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">// 确保锁已经被上面的虚拟线程持有</span></span><br><span class="line">       Thread.sleep(<span class="number">1000</span>);  </span><br><span class="line">       Thread.startVirtualThread(() -&gt; &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">           <span class="comment">//会触发Continuation的yield操作</span></span><br><span class="line">           lock.lock(); </span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               lock.unlock();</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="性能差异"><a href="#性能差异" class="headerlink" title="性能差异"></a>性能差异</h2><p>我们写一个简单的任务，在控制台中打印消息之前等待1秒：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">      System.out.println(e);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;Work Done - &quot;</span> + atomicInteger.incrementAndGet());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，我们将从这个Runnable创建10000个线程，并使用虚拟线程和平台线程执行它们，以比较两者的性能。</p><p>先来我们比较熟悉的平台线程的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">var</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">100</span>)) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    executor.submit(runnable);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">finish</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"><span class="type">long</span> <span class="variable">timeElapsed</span> <span class="operator">=</span> Duration.between(start, finish).toMillis();  </span><br><span class="line">System.out.println(<span class="string">&quot;总耗时 : &quot;</span> + timeElapsed);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p>总耗时 : <code>102323</code></p><p>总耗时大概100秒左右。接下来再用虚拟线程跑一下看看</p><p>在JDK 21中已经是正式功能了，但是在JDK 19中，虚拟线程是一个预览API，默认是禁用。所以需要使用$ java——source 19——enable-preview xx.java 的方式来运行代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">var</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">     executor.submit(runnable);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">finish</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"><span class="type">long</span> <span class="variable">timeElapsed</span> <span class="operator">=</span> Duration.between(start, finish).toMillis();  </span><br><span class="line">System.out.println(<span class="string">&quot;总耗时 : &quot;</span> + timeElapsed);</span><br></pre></td></tr></table></figure><p>使用 Executors.newVirtualThreadPerTaskExecutor()来创建虚拟线程，执行结果如下：</p><p>总耗时 : <code>1674</code></p><p>总耗时大概1.6秒左右。</p><p><strong>100秒和1.6秒的差距，足以看出虚拟线程的性能提升还是立竿见影的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生赛</title>
      <link href="/2023/11/26/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/nowcode3/"/>
      <url>/2023/11/26/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/nowcode3/</url>
      
        <content type="html"><![CDATA[<h1 id="题-A"><a href="#题-A" class="headerlink" title="题 A"></a>题 A</h1><details class="folding-tag" ><summary> 最大化网格图中正方形空洞的面积 </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>给你一个网格图，由 <code>n + 2</code> 条 横线段 和 <code>m + 2</code> 条 竖线段 组成，一开始所有区域均为 1 x 1 的单元格。<br>所有线段的编号从 1 开始。给你两个整数 <code>n</code> 和 <code>m</code> 。</p><p>同时给你两个整数数组 <code>hBars</code> 和 <code>vBars</code> 。</p><p><code>hBars</code> 包含区间 [2, n + 1] 内 互不相同 的横线段编号。<br><code>vBars</code> 包含 [2, m + 1] 内 互不相同的 竖线段编号。<br>如果满足以下条件之一，你可以 移除 两个数组中的部分线段：</p><p>如果移除的是横线段，它必须是 <code>hBars</code> 中的值。<br>如果移除的是竖线段，它必须是 <code>vBars</code> 中的值。</p></div>输入描述:<div class="note info simple"><p>两个正整数 1 ≤ n ≤ 10^9 ,1 ≤ m ≤ 10^9 。<br>接下来两个数组<br>1 &lt;= hBars.length &lt;= 100<br>2 &lt;= hBars[i] &lt;= n + 1<br>1 &lt;= vBars.length &lt;= 100<br>2 &lt;= vBars[i] &lt;= m + 1</p></div>输出描述:<div class="note info simple"><p>请你输出移除一些线段后（可能不移除任何线段），剩余网格图中 最大正方形 空洞的面积，正方形空洞的意思是正方形 内部 不含有任何线段。</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2, m = 1, hBars = [2,3], vBars = [2]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><img src="https://assets.leetcode.com/uploads/2023/11/05/screenshot-from-2023-11-05-22-40-25.png" alt=""></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>思路：统计横竖的最宽间隔, 然后取小后平方;</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximizeSquareHoleArea</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span>[] hBars, <span class="type">int</span>[] vBars)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        Arrays.sort(hBars);</span><br><span class="line">        Arrays.sort(vBars);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hBars.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hBars[i + <span class="number">1</span>] - hBars[i] == <span class="number">1</span>) temp++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                row = Math.max(row,temp);</span><br><span class="line">                temp = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        row = Math.max(row,temp);</span><br><span class="line">        temp = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vBars.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vBars[i + <span class="number">1</span>] - vBars[i] == <span class="number">1</span>) temp++;</span><br><span class="line">            <span class="keyword">else</span>  &#123;</span><br><span class="line">                col = Math.max(col,temp);</span><br><span class="line">                temp = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        col = Math.max(col,temp);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)Math.pow(Math.min(col,row) + <span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-B"><a href="#题-B" class="headerlink" title="题 B"></a>题 B</h1><details class="folding-tag" ><summary> 所有路径 </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>给定一个 n * m 矩阵 ，角色只能往下或者往右<br>从左上角走到右下角的所有路径</p></div>输入描述:<div class="note info simple"><p>两个正整数 n 和 m 分别表示 矩阵的行和列<br>2 &lt;= n &lt;= 1000<br>2 &lt;= n &lt;= 1000</p></div>输出描述:<div class="note info simple"><p>返回到达右下角的所有路径</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">  2 8</span><br><span class="line">输出</span><br><span class="line">  45</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>思路：本题在新生赛中数据量非常小，所有下面三种方法都可以解答<br>1.DFS    2.组合数     3. dp<br>就给出2的解法，<br>当数据量在 10^9时 只有2的解法可以</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                matrix[i][j] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(solve2(matrix));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组合数求解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">solve2</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;n:&quot; + n + &quot;  ==m:&quot; + m);</span></span><br><span class="line">        <span class="keyword">return</span> factorial(n + m, m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// (40!)/(20!)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m + <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            result *= i;</span><br><span class="line">            result /= (i - m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-C"><a href="#题-C" class="headerlink" title="题 C"></a>题 C</h1><details class="folding-tag" ><summary> 小红的01连续段 </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>小红定义一个01串的“连续段”为：连续相同字符的极大长度。例如：”110001111”有一个长度为2的连续段，有一个长度为3的连续段，有一个长度为4的连续段。<br>小红拿到了一个01串，但其中有一些字符不可见了（用’?’表示）。小红想知道，这个01串的连续段长度的最大值最多能达到多少？</p></div>输入描述:<div class="note info simple"><p>一个仅由’0’、’1’、’?’组成的字符串，长度不超过200000。</p></div>输出描述:<div class="note info simple"><p>一个正整数，代表连续段长度的最大长度。</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">  1?0?1?</span><br><span class="line">输出</span><br><span class="line">  3</span><br><span class="line">说明</span><br><span class="line">  该字符串可以是&quot;100011&quot;，最大的连续段长度为3。</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>思路：可以想到，当最长连续段是 0 时 把所有的？变成0为最优解 ，1同理</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line"> </span><br><span class="line">        <span class="type">char</span>[] c = s.replaceAll(<span class="string">&quot;\\?&quot;</span>,<span class="string">&quot;0&quot;</span>).toCharArray();</span><br><span class="line">        <span class="comment">// 将 ？ 看成 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> process(c);</span><br><span class="line">        <span class="comment">// 将 ？ 看成 1</span></span><br><span class="line">        c = s.replaceAll(<span class="string">&quot;\\?&quot;</span>,<span class="string">&quot;1&quot;</span>).toCharArray();</span><br><span class="line">        System.out.println(Math.max(t,process(c)));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[] c)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//1?0?1?</span></span><br><span class="line">        <span class="keyword">while</span> (r &lt; c.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[l] != c[r]) &#123;</span><br><span class="line">                res = Math.max(res, r - l);</span><br><span class="line">                l = r;</span><br><span class="line">            &#125;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, r - l);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-D"><a href="#题-D" class="headerlink" title="题 D"></a>题 D</h1><details class="folding-tag" ><summary> 小红的01串构造 </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>小红希望你构造一个长度为n的01串，其中恰好有<br>k个1，且恰好有t对相邻字符都是1。你能帮帮她吗?</p></div>输入描述:<div class="note info simple"><p>三个正整数n,k,t，用空格隔开。<br>1 ≤ n ≤ 10^5<br>0 ≤ k,t ≤ n</p></div>输出描述:<div class="note info simple"><p>如果无法完成构造，请输出-1。否则输出任意一个满足条件01串即可。</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">  3 2 1</span><br><span class="line">输出</span><br><span class="line">  110</span><br><span class="line">说明</span><br><span class="line">  &quot;110&quot;为长度为3的01串，恰好有2个1，恰好有1对相邻数字是1。满足要求。</span><br><span class="line">  输出&quot;011&quot;也是可以通过本样例的。</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>思路：依照思路构造即可</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在有 k 个 1的情况下构造t对1相邻至少需要 t+1 个1 </span></span><br><span class="line">        <span class="keyword">if</span>(k &lt; t + <span class="number">1</span> || n &lt; t + <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 后续只能拼接 01 不破换构造 剩下 (k - t - 1) 个 1 还有 (n -t - 1) 个坑位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> k - t - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span>  n - t - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s &lt; <span class="number">2</span>*y)&#123;</span><br><span class="line">            System.out.println(-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造字符串</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= t; i++) &#123;</span><br><span class="line">            ans.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; y; i++) &#123;</span><br><span class="line">            ans.append(<span class="string">&quot;01&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - t - <span class="number">1</span> - <span class="number">2</span> * y; i++) &#123;</span><br><span class="line">            ans.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="/2023/11/20/ArrayList/webSocketDemo/"/>
      <url>/2023/11/20/ArrayList/webSocketDemo/</url>
      
        <content type="html"><![CDATA[<h2 id="WebSocket-的由来"><a href="#WebSocket-的由来" class="headerlink" title="WebSocket 的由来"></a>WebSocket 的由来</h2><ul><li>在 WebSocket 出现之前，我们想实现实时通信、变更推送、服务端消息推送功能，我们一般的方案是使用 Ajax 短轮询、长轮询两种方式：</li><li>比如我们想实现一个服务端数据变更时，立即通知客户端功能，没有 WebSocket 之前我们可能会采用以下两种方案：短轮询或长轮询</li></ul><p><img src="https://oss.gincode.icu/pics/081006d4a442a7005b1ee94611cd457b.png" alt="短轮询、长轮询（来源：即时通讯网）"></p><ul><li>上面两种方案都有比较明显的缺点：<ol><li>HTTP 协议包含的较长的请求头，有效数据只占很少一部分，浪费带宽 </li><li>短轮询频繁轮询对服务器压力较大，即使使用长轮询方案，客户端较多时仍会对客户端造成不小压力</li></ol></li></ul><h2 id="WebSocket-是什么"><a href="#WebSocket-是什么" class="headerlink" title="WebSocket 是什么"></a>WebSocket 是什么</h2><ul><li>WebSocket 是一种网络传输协议，可在单个 TCP 连接上进行全双工通信，位于 OSI 模型的应用层。</li><li>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。</li></ul><p><img src="https://oss.gincode.icu/pics/6ce3f5196ce0a05211c9af505952d32e.png" alt="短轮询和WebSocket的区别（来源：即时通讯网）"></p><blockquote><h3 id="WebSocket-优缺点"><a href="#WebSocket-优缺点" class="headerlink" title="WebSocket 优缺点"></a>WebSocket 优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>实时性： WebSocket 提供了<code>双向通信</code>，服务器可以主动向客户端推送数据，实现实时性非常高，适用于实时聊天、在线协作等应用。</li><li>减少网络延迟： 与轮询和长轮询相比，WebSocket 可以显著减少网络延迟，因为不需要在每个请求之间建立和关闭连接。</li><li>较小的数据传输开销： WebSocket 的数据帧相比于 HTTP 请求报文较小，减少了在每个请求中传输的开销，特别适用于需要频繁通信的应用。</li><li>较低的服务器资源占用： 由于 WebSocket 的长连接特性，服务器可以处理更多的并发连接，相较于短连接有更低的资源占用。</li><li>跨域通信： 与一些其他跨域通信方法相比，WebSocket 更容易实现跨域通信。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>连接状态保持： 长时间保持连接可能会导致服务器和客户端都需要维护连接状态，可能增加一些负担。</li><li>不适用于所有场景： 对于一些请求-响应模式较为简单的场景，WebSocket 的实时特性可能并不是必要的，使用 HTTP 请求可能更为合适。</li><li>复杂性： 与传统的 HTTP 请求相比，WebSocket 的实现和管理可能稍显复杂，尤其是在处理连接状态、异常等方面。</li></ul></blockquote><h3 id="WebSocket-适用场景"><a href="#WebSocket-适用场景" class="headerlink" title="WebSocket 适用场景"></a>WebSocket 适用场景</h3><ul><li>实时聊天应用： WebSocket 是实现实时聊天室、<a href="https://cloud.tencent.com/product/im?from_column=20065&amp;from=20065">即时通讯</a>应用的理想选择，因为它能够提供低延迟和高实时性。</li><li>在线协作和协同编辑： 对于需要多用户协同工作的应用，如协同编辑文档或绘图，WebSocket 的实时性使得用户能够看到其他用户的操作。</li><li>实时数据展示： 对于需要实时展示数据变化的应用，例如股票行情、实时监控系统等，WebSocket 提供了一种高效的通信方式。</li><li>在线游戏： 在线游戏通常需要快速、实时的通信，WebSocket 能够提供低延迟和高并发的通信能力。</li><li>推送服务： 用于实现消息推送服务，向客户端主动推送更新或通知。</li></ul><h3 id="WebSocket-通信过程以及原理"><a href="#WebSocket-通信过程以及原理" class="headerlink" title="WebSocket 通信过程以及原理"></a>WebSocket 通信过程以及原理</h3><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><ul><li>WebSocket 协议属于应用层协议，依赖传输层的 <code>TCP 协议</code>。它通过 HTTP/1.1 协议的 101 状态码进行握手建立连接。</li></ul><h5 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h5><ul><li>客户端发送一个 HTTP GET 请求到服务器，请求的路径是 WebSocket 的路径（类似 ws://example.com/socket）。请求中包含一些特殊的头字段，如 Upgrade: websocket 和 Connection: Upgrade，以表明客户端希望升级连接为 WebSocket。</li><li>服务器收到这个请求后，会返回一个 HTTP 101 状态码（协议切换协议）。同样在响应头中包含 Upgrade: websocket 和 Connection: Upgrade，以及一些其他的 WebSocket 特定的头字段，例如 Sec-WebSocket-Accept，用于验证握手的合法性。</li><li>客户端和服务器之间的连接从普通的 HTTP 连接升级为 WebSocket 连接。之后，客户端和服务器之间的通信就变成了 WebSocket 帧的传输，而不再是普通的 HTTP 请求和响应。`</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端请求</span></span><br><span class="line">GET ws<span class="punctuation">:</span><span class="comment">//localhost:8888/ HTTP/1.1</span></span><br><span class="line">Host<span class="punctuation">:</span> localhost<span class="punctuation">:</span><span class="number">8888</span></span><br><span class="line">Connection<span class="punctuation">:</span> Upgrade</span><br><span class="line">Upgrade<span class="punctuation">:</span> websocket</span><br><span class="line">Origin<span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//localhost:63342</span></span><br><span class="line">Sec-WebSocket-Version<span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">Accept-Encoding<span class="punctuation">:</span> gzip<span class="punctuation">,</span> deflate<span class="punctuation">,</span> br</span><br><span class="line">Accept-Language<span class="punctuation">:</span> zh-CN<span class="punctuation">,</span>zh;q=<span class="number">0.9</span><span class="punctuation">,</span>ja;q=<span class="number">0.8</span><span class="punctuation">,</span>en;q=<span class="number">0.7</span></span><br><span class="line">Sec-WebSocket-Key<span class="punctuation">:</span> b7wpWuB9MCzOeQZg2O/yPg==</span><br><span class="line">Sec-WebSocket-Extensions<span class="punctuation">:</span> permessage-deflate; client_max_window_bits</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端响应</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">101</span> Web Socket Protocol Handshake</span><br><span class="line">Connection<span class="punctuation">:</span> Upgrade</span><br><span class="line">Date<span class="punctuation">:</span> Wed<span class="punctuation">,</span> <span class="number">22</span> Nov <span class="number">2023</span> <span class="number">08</span><span class="punctuation">:</span><span class="number">15</span><span class="punctuation">:</span><span class="number">00</span> GMT</span><br><span class="line">Sec-WebSocket-Accept<span class="punctuation">:</span> Q4TEk+qOgJsKy7gedijA5AuUVIw=</span><br><span class="line">Server<span class="punctuation">:</span> TooTallNate Java-WebSocket</span><br><span class="line">Upgrade<span class="punctuation">:</span> websocket</span><br></pre></td></tr></table></figure><p><strong>Sec-WebSocket-Key</strong></p><ul><li>与服务端响应头部的 Sec-WebSocket-Accept 是配套的，提供基本的防护，比如恶意的连接，或者无意的连接；这里的“配套”指的是：Sec-WebSocket-Accept 是根据请求头部的 Sec-WebSocket-Key 计算而来，计算过程大致为基于 SHA1 算法得到摘要并转成 base64 字符串。</li></ul><p><strong>Sec-WebSocket-Extensions</strong></p><ul><li>用于协商本次连接要使用的 WebSocket 扩展。</li></ul><h4 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h4><ul><li>WebSocket 的每条消息可能会被切分成多个数据帧（最小单位）。发送端会将消息切割成多个帧发送给接收端，接收端接收消息帧并将关联的帧重新组装成完整的消息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class="line">|N|V|V|V|       |S|             |   (<span class="keyword">if</span> payload len==126/127)   |</span><br><span class="line">| |1|2|3|       |K|             |                               |</span><br><span class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class="line">|     Extended payload length continued, <span class="keyword">if</span> payload len == 127  |</span><br><span class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class="line">|                               |Masking-key, <span class="keyword">if</span> MASK <span class="built_in">set</span> to 1  |</span><br><span class="line">+-------------------------------+-------------------------------+</span><br><span class="line">| Masking-key (continued)       |          Payload Data         |</span><br><span class="line">+-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class="line">:                     Payload Data continued ...                :</span><br><span class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class="line">|                     Payload Data continued ...                |</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p><code>帧头（Frame Header）</code></p><ul><li>FIN（1比特）： 表示这是消息的最后一个帧。如果消息分成多个帧，FIN 位在最后一个帧上设置为 1。</li><li>RSV1、RSV2、RSV3（各1比特）： 保留位，用于将来的扩展。</li><li>Opcode（4比特）： 指定帧的类型，如文本帧、二进制帧、连接关闭等。</li><li>Mask（1比特）： 指示是否使用掩码对负载进行掩码操作。</li><li>Payload Length： 指定数据的长度。如果小于 126 字节，直接表示数据的长度。如果等于 126 字节，后面跟着 16 比特的无符号整数表示数据的长度。如果等于 127 字节，后面跟着 64 比特的无符号整数表示数据的长度。</li></ul><p><code>掩码（Masking）</code></p><ul><li><p>如果 Mask 位被设置为 1，则帧头后面的 4 字节即为掩码，用于对负载数据进行简单的异或操作，以提高安全性。</p><p><code>负载数据（Payload Data）</code></p></li><li><p>实际要传输的数据，可以是文本、二进制数据等</p></li></ul><h2 id="使用-WebSocket-实现一个简易聊天室"><a href="#使用-WebSocket-实现一个简易聊天室" class="headerlink" title="使用 WebSocket 实现一个简易聊天室"></a>使用 WebSocket 实现一个简易聊天室</h2><h3 id="前端源码"><a href="#前端源码" class="headerlink" title="前端源码"></a>前端源码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实时监控<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#ffd7e4</span> <span class="number">0%</span>, <span class="number">#c8f1ff</span> <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#55ff00</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.nowI</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#ff0000</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sendBut</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sendBut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messageInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type your message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>     <span class="attr">onclick</span>=<span class="string">&quot;sendMessage()&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;right: 0;float: right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.id&#125;&#125;.&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&#x27;item.state==-1?&quot;nowI&quot;:&quot;&quot;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">state</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">state</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">state</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;韩梅梅&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">state</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;李磊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">state</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> webSocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:9001/user/&#x27;</span>+ <span class="title function_">getUUID</span>());;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//连接成功</span></span></span><br><span class="line"><span class="language-javascript">        webSocket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已连接&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            webSocket.<span class="title function_">send</span>(<span class="string">&quot;消息发送测试&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//接收到消息</span></span></span><br><span class="line"><span class="language-javascript">        webSocket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//处理消息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> messageDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chat&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> messageParagraph = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            messageParagraph.<span class="property">textContent</span> = event.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">            messageDiv.<span class="title function_">appendChild</span>(messageParagraph);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//关闭事件</span></span></span><br><span class="line"><span class="language-javascript">        webSocket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;websocket已关闭&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//发生了错误事件</span></span></span><br><span class="line"><span class="language-javascript">        webSocket.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;websocket发生了错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;很遗憾，您的浏览器不支持WebSocket！&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> messageInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageInput&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> message = messageInput.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        webSocket.<span class="title function_">send</span>(message);</span></span><br><span class="line"><span class="language-javascript">        messageInput.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getUUID</span>(<span class="params"></span>) &#123;    <span class="comment">//获取唯一的UUID</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&#x27;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/[xy]/g</span>, <span class="keyword">function</span> (<span class="params">c</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span> | <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                v = c == <span class="string">&#x27;x&#x27;</span> ? r : (r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> v.<span class="title function_">toString</span>(<span class="number">16</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.panther.springboot.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gin 琴酒</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2023/11/19 18:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/user/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">onlineCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网络套接字设置 concurrent包的线程安全Set，用来存放每个客户端对应的WebSocket对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话 与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;userId&quot;)</span> String userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="built_in">this</span>);   <span class="comment">// 加入set中</span></span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        addOnlineCount();      <span class="comment">// 在线数加1</span></span><br><span class="line">        log.info(<span class="string">&quot;有新客户端开始监听,userId=&quot;</span> + userId + <span class="string">&quot;,当前在线人数为:&quot;</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">()</span> &#123;</span><br><span class="line">        webSocketSet.remove(<span class="built_in">this</span>); <span class="comment">// 从set中删除</span></span><br><span class="line">        subOnlineCount();       <span class="comment">// 在线数减1</span></span><br><span class="line">        <span class="comment">// 断开连接情况下，更新主板占用情况为释放</span></span><br><span class="line">        log.info(<span class="string">&quot;释放的userId=&quot;</span> + userId + <span class="string">&quot;的客户端&quot;</span>);</span><br><span class="line">        releaseResource();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">releaseResource</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;有一连接关闭！当前在线人数为&quot;</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, Session session)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;收到来自客户端 userId=&quot;</span> + userId + <span class="string">&quot; 的信息:&quot;</span> + message);</span><br><span class="line">        <span class="comment">// 群发消息</span></span><br><span class="line">        HashSet&lt;String&gt; userIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            userIds.add(item.userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendMessage(<span class="string">&quot;客户端 &quot;</span> + <span class="built_in">this</span>.userId + <span class="string">&quot;发布消息：&quot;</span> + message, userIds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Session session, Throwable error)</span> &#123;</span><br><span class="line">        log.error(session.getBasicRemote() + <span class="string">&quot;客户端发生错误&quot;</span>);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, HashSet&lt;String&gt; toSids)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;推送消息到客户端 &quot;</span> + toSids + <span class="string">&quot;，推送内容:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//这里可以设定只推送给传入的userId，为null则全部推送</span></span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        onlineCount.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">subOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        onlineCount.getAndDecrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀树，布隆过滤器</title>
      <link href="/2023/10/15/ArrayList/TrieTree/"/>
      <url>/2023/10/15/ArrayList/TrieTree/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h1><p><strong>前缀树的3个基本性质：</strong></p><ol><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同。</li></ol><h1 id="前缀树实现敏感词过滤"><a href="#前缀树实现敏感词过滤" class="headerlink" title="前缀树实现敏感词过滤"></a>前缀树实现敏感词过滤</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;傻&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;逼&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;isEnd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Y&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;子&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;isEnd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Y&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;大&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;个&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;isEnd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Y&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="树结构："><a href="#树结构：" class="headerlink" title="树结构："></a>树结构：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        Map&lt;Character, TrieNode&gt; children;</span><br><span class="line">        <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">        TrieNode() &#123;</span><br><span class="line">            children = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            isEnd = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="前缀树的创建"><a href="#前缀树的创建" class="headerlink" title="前缀树的创建"></a><strong>前缀树的创建</strong></h2><p>好比假设有b，abc，abd，bcd，abcd，efg，hii 这6个单词,那我们创建trie树就得到</p><p><img src="https://oss.gincode.icu/pics/v2-9d07fbd164fc0d737aabe428b4484bd1_b.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertWord</span><span class="params">(String word)</span> &#123;</span><br><span class="line">       <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">           node.children.computeIfAbsent(c, k -&gt; <span class="keyword">new</span> <span class="title class_">TrieNode</span>());</span><br><span class="line">           node = node.children.get(c);</span><br><span class="line">       &#125;</span><br><span class="line">       node.isEnd = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="搜索文本中匹配的敏感词"><a href="#搜索文本中匹配的敏感词" class="headerlink" title="搜索文本中匹配的敏感词"></a>搜索文本中匹配的敏感词</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">matchWords</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        List&lt;String&gt; sensitiveWords = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wordLen</span> <span class="operator">=</span> checkWord(text, i);</span><br><span class="line">            <span class="keyword">if</span> (wordLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> text.substring(i, i + wordLen);</span><br><span class="line">                sensitiveWords.add(word);</span><br><span class="line">                i += wordLen - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sensitiveWords;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="前缀树测试敏感词过滤"><a href="#前缀树测试敏感词过滤" class="headerlink" title="前缀树测试敏感词过滤"></a>前缀树测试敏感词过滤</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        insertWord(<span class="string">&quot;你是傻逼&quot;</span>);</span><br><span class="line">        insertWord(<span class="string">&quot;你是傻逼啊&quot;</span>);</span><br><span class="line">        insertWord(<span class="string">&quot;你是坏蛋&quot;</span>);</span><br><span class="line">        insertWord(<span class="string">&quot;你个大笨蛋&quot;</span>);</span><br><span class="line">        insertWord(<span class="string">&quot;我去年买了个表&quot;</span>);</span><br><span class="line">        insertWord(<span class="string">&quot;shit&quot;</span>);,</span><br><span class="line">        System.out.println(matchWords(<span class="string">&quot;你你你你是傻逼啊你，说你呢，你个大笨蛋。&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss.gincode.icu/pics/image-20231014231254498.png" alt="image-20231014231254498"></p><blockquote><p>虽然简单实现了但却很容易被破解，比如说，我在待检测文本中的敏感词中间加个空格，就可以成功绕过了。要解决这个问题也不难，有一个简单的方法是初始化一个无效字符库，比如：空格、*、#、@等字符，然后在检测文本前，先将待检测文本中的无效字符去除，这样的话被检测字符就不存在这些无效字符了，<br>如果敏感词是英文，则还要考虑大小写的问题。有一个比较简单的解决方案是在初始化敏感词时，将敏感词都以小写形式存储。同时，在检测文本时，也统一将待检测文本转化为小写，这样就能解决大小写的问题了。<br>比较棘手的是中文跟拼音混合的情况，比如“傻逼”这个敏感词，可以通过“sha逼”这种中文跟拼音混合的方式轻松绕过。</p></blockquote><h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><p>布隆过滤器的典型应用有：</p><ul><li>数据库防止穿库。 Google Bigtable，HBase 和 Cassandra 以及 Postgresql 使用BloomFilter来减少不存在的行或列的磁盘查找。避免代价高昂的磁盘查找会大大提高数据库查询操作的性能。</li><li>业务场景中判断用户是否阅读过某视频或文章，比如抖音或头条，当然会导致一定的误判，但不会让用户看到重复的内容。</li><li>缓存宕机、缓存击穿场景，一般判断用户是否在缓存中，如果在则直接返回结果，不在则查询db，如果来一波冷数据，会导致缓存大量击穿，造成雪崩效应，这时候可以用布隆过滤器当缓存的索引，只有在布隆过滤器中，才去查询缓存，如果没查询到，则穿透到db。如果不在布隆器中，则直接返回。</li><li>WEB拦截器，如果相同请求则拦截，防止重复被攻击。用户第一次请求，将请求参数放入布隆过滤器中，当第二次请求时，先判断请求参数是否被布隆过滤器命中。可以提高缓存命中率。Squid 网页代理缓存服务器在 cache digests 中就使用了布隆过滤器。Google Chrome浏览器使用了布隆过滤器加速安全浏览服务</li><li>Venti 文档存储系统也采用布隆过滤器来检测先前存储的数据。</li><li>SPIN 模型检测器也使用布隆过滤器在大规模验证问题时跟踪可达状态空间。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>程序根据实际情况实现hash函数，将要添加的元素进行Hash计算得到的hash值金进行对应填充到bitmap中</p><p><strong>不同的字符串可能哈希出来的位置相同，这种情况我们可以适当增加位数组大小或者调整我们的哈希函数。</strong></p><p>综上，我们可以得出：<strong>布隆过滤器说某个元素存在，小概率会误判（也许不存在）。但是布隆过滤器说某个元素不在，那么这个元素一定不在。</strong></p></blockquote><p><img src="https://oss.gincode.icu/pics/bloom-filter-simple-schematic-diagram.png" alt="Bloom Filter 的简单原理示意图"></p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>看过HashSet源码的都知道，hashSet就是基于HashMap来实现的，我们可以仿照HashSet的实现来实现一个简单的布隆过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bloom</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Object&gt; BloomMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SetBloom</span><span class="params">(String[] keys)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(String s : keys) BloomMap.put(s,object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contain</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BloomMap.put(key,object) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bloom</span> <span class="variable">bloom</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Bloom</span>();</span><br><span class="line">        bloom.SetBloom(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;123&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;test&quot;</span>&#125;);</span><br><span class="line">        System.out.println(bloom.contain(<span class="string">&quot;12345&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(bloom.contain(<span class="string">&quot;test&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抖音有声小说</title>
      <link href="/2023/08/25/ArrayList/novel/"/>
      <url>/2023/08/25/ArrayList/novel/</url>
      
        <content type="html"><![CDATA[<h1 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h1><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>该死的抖音小说推广，每每看到高潮结束，然后就是各种广告和软件下载。</p><p>程序员能受这气？直接开搞。</p></div><h1 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h1><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ol><li>找书源</li><li>爬取小说内容</li><li>文字转语音</li></ol></div><h2 id="首先找一个书源"><a href="#首先找一个书源" class="headerlink" title="首先找一个书源"></a>首先找一个书源</h2><blockquote><p><strong>笔趣阁</strong>（很全但是有”DDoS protection by Cloudflare”）</p><p><strong>铅笔小说</strong> 没有很多权限，很适合我这种半吊子选手</p></blockquote><h2 id="开爬"><a href="#开爬" class="headerlink" title="开爬"></a>开爬</h2><ol><li>首先看url是否正确读取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> ur</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.23qb.net/book/232488/90659053.html&quot;</span></span><br><span class="line"></span><br><span class="line">req = ur.Request(url)</span><br><span class="line">req.add_header(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = ur.urlopen(req)</span><br><span class="line">html = response.read()</span><br><span class="line"><span class="built_in">print</span>(html) <span class="comment"># 正确输出网页数据</span></span><br></pre></td></tr></table></figure><ol><li>解析小说文章内容把多余的去掉</li></ol><blockquote><p>检查网页发现内容是一个一个<code>P</code>标签构成的</p><p>我们可以找<code>p</code>标签的开头和结尾，发现开头都是<code>toolbarm()</code>以这个函数开始，结束都有一句<code>铅笔小说 23qb.net</code>广告</p><p><img src="https://oss.gincode.icu/pics/novel-image123.png" alt=""></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">content = []</span><br><span class="line">start = html.find(<span class="string">&quot;toolbarm();&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">end = html.find(<span class="string">&quot;铅笔小说&quot;</span>, start, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">a = html.find(<span class="string">&quot;&lt;p&gt;&quot;</span>, start, end)</span><br><span class="line"><span class="keyword">while</span> a &lt; end:</span><br><span class="line">    b = html.find(<span class="string">&quot;&lt;/p&gt;&quot;</span>, a, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> b &lt; end:</span><br><span class="line">        content.append(html[a + <span class="number">3</span>: b])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    a = html.find(<span class="string">&quot;&lt;p&gt;&quot;</span>, b + <span class="number">3</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><ol><li>每次自能保存一章继续找找有没有下一章的连接</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网页中存在url_next 那就取出即可</span></span><br><span class="line">a = html.find(<span class="string">&quot;url_next:&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">b = html.find(<span class="string">&quot;,&quot;</span>, a, a + <span class="number">128</span>)</span><br><span class="line"><span class="built_in">print</span>(html[a + <span class="number">10</span>: b - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><ol><li>保存文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(title + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> content_list:</span><br><span class="line">        f.write(<span class="string">&quot;    &quot;</span> + content + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h3 id="献上完整代码"><a href="#献上完整代码" class="headerlink" title="献上完整代码"></a>献上完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> ur</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> easygui <span class="keyword">as</span> e</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_open</span>(<span class="params">url</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    req = ur.Request(url)</span><br><span class="line">    req.add_header(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                                 <span class="string">&quot;Chrome/80.0.3987.116 Safari/537.36&quot;</span>)</span><br><span class="line"></span><br><span class="line">    response = ur.urlopen(req)</span><br><span class="line">    html = response.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_next</span>(<span class="params">html</span>):</span><br><span class="line">    a = html.find(<span class="string">&quot;url_next:&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    b = html.find(<span class="string">&quot;,&quot;</span>, a, a + <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> html[a + <span class="number">10</span>: b - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_title</span>(<span class="params">html</span>):</span><br><span class="line">    a = html.find(<span class="string">&quot;mlfy_main_text&quot;</span>)</span><br><span class="line">    b = html.find(<span class="string">&quot;&lt;/h1&gt;&quot;</span>, a, a + <span class="number">255</span>)</span><br><span class="line">    title = html[a + <span class="number">24</span>: b]</span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_content</span>(<span class="params">html</span>):</span><br><span class="line">    content = []</span><br><span class="line">    start = html.find(<span class="string">&quot;toolbarm();&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    end = html.find(<span class="string">&quot;铅笔小说&quot;</span>, start, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    a = html.find(<span class="string">&quot;&lt;p&gt;&quot;</span>, start, end)</span><br><span class="line">    <span class="keyword">while</span> a &lt; end:</span><br><span class="line">        b = html.find(<span class="string">&quot;&lt;/p&gt;&quot;</span>, a, -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> b &lt; end:</span><br><span class="line">            content.append(html[a + <span class="number">3</span>: b])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        a = html.find(<span class="string">&quot;&lt;p&gt;&quot;</span>, b + <span class="number">3</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_file</span>(<span class="params">file_name, title, content_list</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(title + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> content_list:</span><br><span class="line">            f.write(<span class="string">&quot;    &quot;</span> + content + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># html = url_open(&quot;https://www.23qb.net/book/232488/90659053.html&quot;).decode(&quot;gbk&quot;)</span></span><br><span class="line">    url_next = <span class="string">&quot;/book/232488/92437490.html&quot;</span></span><br><span class="line">    <span class="keyword">while</span> url_next != <span class="string">&quot;/book/232488/92437636.html&quot;</span>:</span><br><span class="line">        html = url_open(<span class="string">&quot;https://www.23qb.net&quot;</span> + url_next).decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">        <span class="comment"># 找到标题</span></span><br><span class="line">        my_title = find_title(html)</span><br><span class="line">        <span class="built_in">print</span>(my_title)</span><br><span class="line">        <span class="comment"># 找到内容</span></span><br><span class="line">        my_contents = find_content(html)</span><br><span class="line">        <span class="comment"># 保存成txt</span></span><br><span class="line">        save_file(<span class="string">&quot;./content/&quot;</span> + <span class="built_in">str</span>(my_title).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&quot;.txt&quot;</span>, my_title, my_contents)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;保存完毕&quot;</span>)</span><br><span class="line">        <span class="comment"># 找到下个网址</span></span><br><span class="line">        url_next = find_next(html)</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p><p><img src="https://oss.gincode.icu/pics/1.png" alt="运行实例"></p></blockquote><h2 id="接下来就是文字转语音"><a href="#接下来就是文字转语音" class="headerlink" title="接下来就是文字转语音"></a>接下来就是文字转语音</h2><p>提供一个<strong>开源软件内置了微软文字转语音接口</strong>~<a href="https://loker-page.lgwawork.com/">空降官网</a>      <a href="https://github.com/LokerL/tts-vue">仓库链接</a></p><p>运行示例</p><p><img src="https://oss.gincode.icu/pics/image-20230825145456489.png" alt="image-20230825145456489"></p><p>右方可自行配置</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><audio controls="controls" loop="loop"><source src="https://oss.gincode.icu/1692946640551.mp3" type="audio/mp3"></source></audio>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流</title>
      <link href="/2023/08/01/ArrayList/limit/"/>
      <url>/2023/08/01/ArrayList/limit/</url>
      
        <content type="html"><![CDATA[<h1 id="限流的经典算法"><a href="#限流的经典算法" class="headerlink" title="限流的经典算法"></a>限流的经典算法</h1><p><img src="https://pic3.zhimg.com/80/v2-1cfa71e869bd0baeac0eee9087eff17e_720w.webp" alt=""></p><h1 id="常见限流用法"><a href="#常见限流用法" class="headerlink" title="常见限流用法"></a>常见限流用法</h1><h2 id="固定窗口限流"><a href="#固定窗口限流" class="headerlink" title="固定窗口限流"></a>固定窗口限流</h2><p>首先维护一个计数器，将单位时间段当做一个窗口，计数器记录这个窗口接收请求的次数。</p><ol><li>当次数少于限流阀值，就允许访问，并且计数器+1</li><li>当次数大于限流阀值，就拒绝访问。</li><li>当前的时间窗口过去之后，计数器清零。</li></ol><p>假设单位时间是1秒，限流阀值为3。在单位时间1秒内，每来一个请求,计数器就加1，如果计数器累加的次数超过限流阀值3，后续的请求全部拒绝。等到1s结束后，计数器清0，重新开始计数。如下图：<br><img src="https://pic3.zhimg.com/80/v2-5e3d307d66b6406c8d7ce6d1a5cbaa7e_720w.webp" alt=""></p><p><strong>伪代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 固定窗口时间算法</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">fixedWindowsTryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">long</span> <span class="variable">windowUnit</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//设置窗口时间单位</span></span><br><span class="line">     <span class="type">long</span> <span class="variable">lastTime</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 初始时间</span></span><br><span class="line">     <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();  <span class="comment">//获取系统当前时间</span></span><br><span class="line">     <span class="keyword">if</span> (currentTime - lastRequestTime &gt; windowUnit) &#123;  <span class="comment">//检查是否在时间窗口内</span></span><br><span class="line">         counter = <span class="number">0</span>;  <span class="comment">// 计数器清0</span></span><br><span class="line">         lastRequestTime = currentTime;  <span class="comment">//开启新的时间窗口</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (counter &lt; threshold) &#123;  <span class="comment">// 小于阀值</span></span><br><span class="line">         counter++;  <span class="comment">//计数器加1</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>优势</strong>： 实现简单</li><li><strong>缺点</strong>：不能均匀的分配时间，可能出现流量突刺(<strong>在两个时间窗口临界位置来10个请求</strong>)</li></ol><p><img src="https://pic1.zhimg.com/80/v2-a29cffdcda8be8fc120f0cfb4b4830d8_720w.webp" alt=""></p></blockquote><h2 id="滑动窗口限流算法"><a href="#滑动窗口限流算法" class="headerlink" title="滑动窗口限流算法"></a>滑动窗口限流算法</h2><p>滑动窗口限流解决固定窗口临界值的问题。它将单位时间周期分为n个小周期，分别记录每个小周期内接口的访问次数，并且根据时间滑动删除过期的小周期。</p><p><img src="https://pic4.zhimg.com/80/v2-db41d8f8cc10c75c50ec68818ccb4907_720w.webp" alt=""></p><blockquote><p><strong>每次过期一个小窗口，计算大窗口的请求是否达到阈值，如果大窗口达到阈值，就会拒接临界的小窗口请求</strong></p><ol><li><strong>优势</strong>： 能够解决上述流量突刺的问题</li><li><strong>缺点</strong>：实现相对固定窗口来说比较复杂</li></ol></blockquote><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><p>漏桶算法面对限流，就更加的柔性，不存在直接的粗暴拒绝。</p><p>它的原理很简单，可以认为就是<strong>注水漏水</strong>的过程。往漏桶中以任意速率流入水，以固定的速率流出水。当水超过桶的容量时，会被溢出，也就是被丢弃。因为桶容量是不变的，保证了整体的速率。</p><p><img src="https://pic2.zhimg.com/80/v2-5f158af9928ab084133362fb04a765ad_720w.webp" alt=""></p><p><strong>伪代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 漏桶算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">leakybucketLimitTryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();  <span class="comment">//获取系统当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">outWater</span> <span class="operator">=</span> (currentTime - refreshTime) / <span class="number">1000</span> * rate; <span class="comment">//流出的水量 =(当前时间-上次刷新时间)* 出水率</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">currentWater</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, currentWater - outWater); <span class="comment">// 当前水量 = 之前的桶内水量-流出的水量</span></span><br><span class="line">    refreshTime = currentTime; <span class="comment">// 刷新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前剩余水量还是小于桶的容量，则请求放行</span></span><br><span class="line">    <span class="keyword">if</span> (currentWater &lt; capacity) &#123;</span><br><span class="line">        currentWater++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 当前剩余水量大于等于桶的容量，限流</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>优势</strong>：能够一定程度上应对流量突刺，能够固定速率处理请求，保证服务器的安全。</li><li><strong>缺点</strong>：没有固定速率处理一批请求，只能一个一个按顺序来处理（固定速率的缺点无法应对访问高峰期）</li></ol></blockquote><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><p>面对<strong>突发流量</strong>的时候，我们可以使用令牌桶算法限流。</p><blockquote><p>令牌桶算法（Token Bucket Algorithm） 令牌桶算法可以看作一个令牌桶，其中令牌以恒定的速率产生。当一个请求到达时，如果令牌桶中仍然有令牌，则该请求得到处理并从令牌桶中减去一个令牌。如果令牌桶中没有令牌，则请求将被拒绝。在此算法中，令牌代表请求能够被处理的数量，而桶则代表着请求被处理的容器。</p><p>实现过程：</p><ol><li>初始化令牌桶容量和速率；</li><li>以恒定速率往令牌桶中添加令牌；</li><li>当请求到达时，如令牌桶中仍有令牌，则从桶中移除一个令牌，并处理该请求；</li><li>如果没有足够的令牌，拒绝该请求。</li></ol><p>令牌桶算法可以缓解漏桶算法的缺点，但在一些场景下可能存在一定问题。比如在应对短时间内的高并发请求时，由于令牌数有限，引入过大的并发请求会导致严重的性能问题，也可能会造成请求失败或者拒绝。</p></blockquote><p>管理员先生成一批令牌，每秒生成10个令牌；当用户要操作前，先去拿到一个令牌，有令牌的人就有资格执行操作、同时执行操作；拿不到令牌的就等着</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 令牌桶算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tokenBucketTryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();  <span class="comment">//获取系统当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">generateToken</span> <span class="operator">=</span> (currentTime - refreshTime) / <span class="number">1000</span> * putTokenRate; <span class="comment">//生成的令牌 =(当前时间-上次刷新时间)* 放入令牌的速率</span></span><br><span class="line">        currentToken = Math.min(capacity, generateToken + currentToken); <span class="comment">// 当前令牌数量 = 之前的桶内令牌数量+放入的令牌数量</span></span><br><span class="line">        refreshTime = currentTime; <span class="comment">// 刷新时间</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//桶里面还有令牌，请求正常处理</span></span><br><span class="line">        <span class="keyword">if</span> (currentToken &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            currentToken--; <span class="comment">//令牌数量-1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>优势</strong>：能够并发处理同时的请求，并发性能会更高</li><li><strong>缺点</strong>：时间单位较难选取</li></ol></blockquote><h1 id="限流的常用实现"><a href="#限流的常用实现" class="headerlink" title="限流的常用实现"></a>限流的常用实现</h1><h2 id="单机限流"><a href="#单机限流" class="headerlink" title="单机限流"></a>单机限流</h2><p>本地限流（单机限流）</p><p> 每个服务器单独限流，一般适用于单体项目，就是你的 项目只有一个服务器 。</p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>30.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>Guava RateLimiter：业务实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doLimter</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">    <span class="comment">// 每秒限流5个请求 </span></span><br><span class="line">    <span class="type">RateLimiter</span> <span class="variable">limiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">5.0</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> limiter.tryAcquire(); <span class="comment">// true 接受请求   false 拒接请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分布式限流"><a href="#分布式限流" class="headerlink" title="分布式限流"></a>分布式限流</h2><p>如果你的项目有多个服务器，比如微服务，那么建议使用分布式限流。</p><ol><li>把用户的使用频率等数据放到一个集中的存储进行统计，比如Rdis,这样无论用户的请求落到了哪台服务器，都以集中的数据存储内的数据为准 (Redisson，是一个操作Redis的工具库)</li><li>在网关集中进行限流和统计（比如Sentinel、Spring Cloud Gateway)</li></ol><p><strong>Redisson限流实现</strong></p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.21.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure><ol><li>创建RedissonConfig配置类，用于初始化RedissonClient对象单例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer database;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer timeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setDatabase(database)</span><br><span class="line">                .setAddress(<span class="string">&quot;redis://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port)</span><br><span class="line">                .setPassword(password)</span><br><span class="line">            .setTimeout(timeout);</span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create();</span><br><span class="line">        <span class="keyword">return</span> redisson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>编写RedisLimiterManager</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLimiterManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 区分不同的限流器，比如不同的用户 id 应该分别统计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRateLimit</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个限流器</span></span><br><span class="line">        <span class="type">RRateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> redissonClient.getRateLimiter(key);</span><br><span class="line">        <span class="comment">// 每秒最多访问 2 次</span></span><br><span class="line">        <span class="comment">// 参数1 type：限流类型，可以是自定义的任何类型，用于区分不同的限流策略。</span></span><br><span class="line">        <span class="comment">// 参数2 rate：限流速率，即单位时间内允许通过的请求数量。</span></span><br><span class="line">        <span class="comment">// 参数3 rateInterval：限流时间间隔，即限流速率的计算周期长度。</span></span><br><span class="line">        <span class="comment">// 参数4 unit：限流时间间隔单位，可以是秒、毫秒等。</span></span><br><span class="line">        rateLimiter.trySetRate(RateType.OVERALL, <span class="number">2</span>, <span class="number">1</span>, RateIntervalUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 每当一个操作来了后，请求一个令牌</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">canOp</span> <span class="operator">=</span> rateLimiter.tryAcquire(<span class="number">1</span>);</span><br><span class="line">        ThrowUtils.throwIf(!canOp,ErrorCode.TOO_MANY_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客周赛</title>
      <link href="/2023/07/16/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/nowcode2/"/>
      <url>/2023/07/16/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/nowcode2/</url>
      
        <content type="html"><![CDATA[<h1 id="题-A"><a href="#题-A" class="headerlink" title="题 A"></a>题 A</h1><details class="folding-tag" ><summary> 游游的7的倍数 </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>游游拿到了一个正整数x,她希望在x中添加一个数字，使它成为7的倍数。你能帮帮她吗？</p></div>输入描述:<div class="note info simple"><p>一个正整数x。<br>1 ≤ x ≤ 10^9</p></div>输出描述:<div class="note info simple"><p>x添加一个数字后形成的数。请务必保证操作的合法性，且一定是7的倍数。如果有多解，输出任意一个合法解。可以证明，至少存在一个正确答案。</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">  1</span><br><span class="line">输出</span><br><span class="line">  21</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>思路：每十个数里一定有至少一个7的倍数，因此枚举个位即可。</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> in.nextLong();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span>( ( n * <span class="number">10</span> + i ) % <span class="number">7</span> == <span class="number">0</span> )&#123;</span><br><span class="line">               System.out.println(n * <span class="number">10</span> + i);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-B"><a href="#题-B" class="headerlink" title="题 B"></a>题 B</h1><details class="folding-tag" ><summary> 游游的字母串 </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>对于一个小写字母而言，游游可以通过一次操作把这个字母变成相邻的字母。’a’和’b’相邻,’b’和’c’相邻，以比类推。特殊的,’a’和’Z也是相邻的。可以认为，小写字母的相邻规侧为一个环。游游拿到了一个仅包含小写字母的字符串，她想知道，使得所有字母都相等至少要多少次操作？</p></div>输入描述:<div class="note info simple"><p>一个仅包含小写字母，长度不超过100000的字符串。</p></div>输出描述:<div class="note info simple"><p>一个整数，代表最小的操作次数。</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">  yab</span><br><span class="line">输出</span><br><span class="line">  3</span><br><span class="line">说明</span><br><span class="line">  第一次操作，把&#x27;y&#x27;变成&#x27;z&#x27;，字符串变成了&quot;zab&quot;</span><br><span class="line">  第二次操作，把&#x27;b&#x27;变成&#x27;a&#x27;，字符串变成了&quot;zaa&quot;</span><br><span class="line">  第三次操作，把&#x27;z&#x27;变成&#x27;a&#x27;，字符串变成了&quot;aaa&quot;</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>思路：枚举将字符串中的所有字符变成某个字母所需的步数，取最小值即可。</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> Math.abs(s.charAt(j) - <span class="string">&#x27;a&#x27;</span> - i);</span><br><span class="line">                cnt += Math.min(tmp, <span class="number">26</span> - tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.min(ans, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-C"><a href="#题-C" class="headerlink" title="题 C"></a>题 C</h1><details class="folding-tag" ><summary> 游游的水果大礼包 </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>游游有个n苹果，m个桃子。她可以把2个苹果和1个桃子组成价值a元的一号水果大礼包，也可以把1个苹果和2个桃子组成价值b元的二号水果大礼包。游游想知道，自己最多能组成多少价值总和的大礼包？</p></div>输入描述:<div class="note info simple"><p>四个正整数n,m,a,b用空格隔开。分别代表苹果的数量、桃子的数量、一号大礼包价值、二号大礼包价值。<br>1 ≤ n ,m ,a , b ≤ 10^9</p></div>输出描述:<div class="note info simple"><p>一个整数，代表大礼包的最大价值总和。</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">  3 4 1 2</span><br><span class="line">输出</span><br><span class="line">  4</span><br><span class="line">说明</span><br><span class="line">  组成两个二号水果大礼包，使用了2个苹果和4个桃子。总价值为4。</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>思路：枚举第一个礼包打包的数量，那么第二个礼包打包的数量就可以算出来了。</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">long</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 枚举一号大礼包</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt;= Math.min(n / <span class="number">2</span>, m); i++ )&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            count = i * a + Math.min ( (n - <span class="number">2</span>*i) , (m - i)/<span class="number">2</span> ) * b;</span><br><span class="line">            ans = Math.max(count , ans);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-D"><a href="#题-D" class="headerlink" title="题 D"></a>题 D</h1><details class="folding-tag" ><summary> 游游的矩阵权值 </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>游游定义一个矩阵权值为：每一对相邻元素之和的总和。<br>例如，对于短阵：<br>1 2<br>3 4<br>它的权值是(1+2)+(1+3)+(2+4)+(3+4)=3+4+6+7=20。<br>游游希望你构造一个<code>n X n</code> 的矩阵，矩阵中的元素为1到n^2且每个数恰好出现一次。<br>她希望最终矩阵的权值尽可能大。你能帮帮她吗？由于矩阵可能过大，你不需要输出最终的矩阵，只需要输出这个最大权值即可。答案对10e9十7取模。</p></div>输入描述:<div class="note info simple"><p>一个正整数 n<br>2 &lt;= n &lt;= 10^9</p></div>输出描述:<div class="note info simple"><p>矩阵权值的最大值，对10e9+7取模</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">  2</span><br><span class="line">输出</span><br><span class="line">  20</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>思路：在矩阵角落的数字只会加两次，在边上的数字会加三次，在矩阵内部的数字会加四次。<br>这里可能需要费马小定律来求逆元</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> in.nextLong();</span><br><span class="line">        <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> <span class="number">1000000007</span>;</span><br><span class="line">        <span class="comment">// 四个角的值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">part1</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 边</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">part2</span> <span class="operator">=</span> <span class="number">4</span> * (n - <span class="number">2</span>) % mod * (<span class="number">5</span> + (<span class="number">4</span> + (<span class="number">4</span> * (n - <span class="number">2</span>)))) % mod * quick(<span class="number">2</span>, mod - <span class="number">2</span>, mod) * <span class="number">3</span> % mod;</span><br><span class="line">        <span class="comment">// 内部</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">part3</span> <span class="operator">=</span> ((n - <span class="number">2</span>) * (n - <span class="number">2</span>)) % mod * ((<span class="number">1</span> * n * n % mod + (<span class="number">5</span> + <span class="number">4</span> * (n - <span class="number">2</span>))) * <span class="number">2</span>) % mod;</span><br><span class="line">        System.out.print( (part1+part2+part3)%mod );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快速幂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">quick</span><span class="params">(<span class="type">long</span> a , <span class="type">long</span> k , <span class="type">int</span> mod)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>( (k &amp; <span class="number">1</span>) == <span class="number">1</span> )&#123;</span><br><span class="line">                ans = ans * a % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            a = a * a % mod;</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/07/04/ArrayList/designModel/"/>
      <url>/2023/07/04/ArrayList/designModel/</url>
      
        <content type="html"><![CDATA[<h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><div class="note primary simple"><p>饿汉式（在使用时进行实例化，线程不安全）</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">achieve1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> achieve1 singleton ;</span><br><span class="line">    <span class="comment">// 私有化构造器 禁止外部构造 不能防止反射破环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">achieve1</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给外界提供获取实例方法 线程不安全</span></span><br><span class="line">    <span class="comment">// 不安全的原因：同时多个线程去构造实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> achieve1 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">achieve1</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法:</p><ol><li>加<code>synchronized</code>关键字</li></ol><blockquote><p>此方法是最简单又有效的方法，不过对<strong>性能上会有所损失</strong>。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加<code>synchronized</code>就显得有些浪费性能。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> achieve1 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">achieve1</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>用<code>双重检查加锁</code></li></ol><blockquote><p>线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用<code>synchronized</code>关键字，而第一次后就不用<code>synchronized</code>关键字呢？答案是当然有的，就是用<code>volatile</code>来修饰静态变量，保持其可见性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">achieveVolatile</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> achieveVolatile singleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">achieveVolatile</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> achieveVolatile <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (achieveVolatile.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>) singleton = <span class="keyword">new</span> <span class="title class_">achieveVolatile</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>饿汉式(在创建时就初始化完成,线程安全)</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">achieve2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">achieve2</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">achieve2</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">achieve2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> achieve2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>使用 CAS 实现线程安全的单例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AchieveByCAS</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReference&lt;AchieveByCAS&gt; INSTANCE = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;AchieveByCAS&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例核心 私有化构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AchieveByCAS</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AchieveByCAS <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">AchieveByCAS</span> <span class="variable">achieveByCAS</span> <span class="operator">=</span> INSTANCE.get();</span><br><span class="line">            <span class="keyword">if</span>(achieveByCAS != <span class="literal">null</span>) <span class="keyword">return</span> achieveByCAS;</span><br><span class="line">            </span><br><span class="line">            achieveByCAS = <span class="keyword">new</span> <span class="title class_">AchieveByCAS</span>();</span><br><span class="line">            <span class="keyword">if</span>(INSTANCE.compareAndSet(<span class="literal">null</span>,achieveByCAS))&#123;</span><br><span class="line">                <span class="keyword">return</span> achieveByCAS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>意图：</p><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><div class="note primary simple"><p>简单工厂（不影响其他代码的情况下扩展产品创建部分代码。）</p></div><p>定制生产交通工具的流程, 应该怎么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="comment">// 统一的创建</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产车。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">plane</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产飞机。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">plane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">plane</span>();</span><br><span class="line">        car.create();</span><br><span class="line">        plane.create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>抽象工厂（不影响其他代码的情况下扩展产品创建部分代码。）</p></div><blockquote><p>我们需要一种交通工具以到达某个城市外, 可能还需要一把AK47, 并且还需要一个苹果以备路上不时之需.</p><ul><li><p>所以我们需要给他一个工厂来制造这一系列产品.</p></li><li><p>为了提高可扩展性, 我们还希望不同的工厂可以制作不同系列的产品, 比如上面说的A工厂制造的是汽车, AK47, 苹果; 而B工厂制造的是飞机, 火箭炮, 旺仔小馒头.</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Vehiche</span> &#123; <span class="comment">// 交通工具的抽象类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Weapon</span> &#123; <span class="comment">// 武器的抽象类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">fire</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Food</span> &#123; <span class="comment">// 食物的抽象类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123; <span class="comment">// 抽象工厂 提供多种产品的实现</span></span><br><span class="line">    Vehiche <span class="title function_">createVehiche</span><span class="params">()</span>;</span><br><span class="line">    Weapon <span class="title function_">createWeapon</span><span class="params">()</span>;</span><br><span class="line">    Food <span class="title function_">createFood</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehiche</span>&#123; <span class="comment">// 汽车产品的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小汽车启动...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AK47</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span>&#123; <span class="comment">// 武器产品的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fire</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;哒哒哒...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Food</span>&#123; <span class="comment">// 食物的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃苹果。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryImpl</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123; <span class="comment">// 不同产品对应工厂的不同实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Vehiche <span class="title function_">createVehiche</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Weapon <span class="title function_">createWeapon</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AK47</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">createFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FactoryImpl</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryImpl</span>();</span><br><span class="line">        <span class="type">Vehiche</span> <span class="variable">vehiche</span> <span class="operator">=</span> factory.createVehiche();</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon</span> <span class="operator">=</span> factory.createWeapon();</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> factory.createFood();</span><br><span class="line"></span><br><span class="line">        vehiche.run();</span><br><span class="line">        weapon.fire();</span><br><span class="line">        food.eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>总结一下, 抽象工厂和简单工厂各有什么优劣?</li><li>抽象工厂能够生产<strong>一系列产品</strong>, 也能方便地<strong>替换掉一系列产品</strong>, 但是如果想要在产品系列中添加多一个品种将会非常麻烦. 比如说在上面的系列产品中添加一个盔甲抽象类, 那么抽象工厂以及对应的实现都要修改源码了.</li><li>而简单工厂能够灵活的生产但一个品种的产品, 但是如果生产的品种较多, 会出现工厂泛滥的问题.</li><li>两者优劣互补, 那么有没有可以兼容两者优点的工厂实现呢? 下面看 <code>spring</code>的工厂实现, 它给出了一种解决方案.</li></ul></blockquote> <div class="note primary simple"><p><strong>Spring的Bean工厂</strong> </p></div><p><strong>模拟 Spring工厂实现</strong> </p><p>模拟 IOC：</p><ul><li>都说 <code>Spring</code>是个 <code>bean</code>容器, 以下的代码将展示它是如何生成 <code>bean</code>, 并把 <code>bean</code>放入容器中供用户获取的.</li><li>思路比较简单:</li></ul><ol><li>创建 <code>BeanFactory</code>工厂接口, 添加方法 <code>getBean()</code>.</li><li>创建 <code>BeanFactory</code>的实现类 <code>ClassPathXmlApplicationContext</code>. 将在该实现类中展示 <code>IOC</code>的具体实现.</li><li><code>ClassPathXmlApplicationContext</code>需要一个 <code>container</code>容器存放创建的 <code>bean</code>对象, 这里使用 <code>HashMap</code>实现.</li><li>在 <code>ClassPathXmlApplicationContext</code>的构造方法中读取 <code>spring</code>的配置文件, 这里使用到了 <code>dom4j</code>. 读取配置文件后根据 <code>bean</code>的 <code>class</code>属性使用反射创建出 <code>bean</code>对象. 然后把 <code>id</code>和 <code>bean</code>对象分别作为 <code>key</code>和 <code>value</code>添加到容器中.</li><li>当工厂被调用 <code>getBean()</code>方法时, 从容器中找到对应的 <code>bean</code>并返回.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123; <span class="comment">//极简 BeanFactory</span></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String beanId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// BeanFactory的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; BeanDefinition = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造方法读取配置文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String proper)</span> &#123;</span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.getClass()</span><br><span class="line">                .getClassLoader()</span><br><span class="line">                .getResource(proper)</span><br><span class="line">                .toURI());</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(file);</span><br><span class="line">        <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line"></span><br><span class="line">        List&lt;Element&gt; childElements = root.elements();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element child : childElements) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> Class.forName(child.attributeValue(<span class="string">&quot;class&quot;</span>)).newInstance();</span><br><span class="line">            BeanDefinition.put(child.attributeValue(<span class="string">&quot;id&quot;</span>), bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BeanDefinition.containsKey(beanId) ? BeanDefinition.get(beanId) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//xml中配置的 bean</span></span><br><span class="line">&lt;bean id=<span class="string">&quot;v&quot;</span>class=<span class="string">&quot;designPattern.factory.Car&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">run</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line">        <span class="type">Vehiche</span> <span class="variable">v</span> <span class="operator">=</span> (Vehiche) run.getBean(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        v.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p><strong>原型模式</strong>是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。</p><p>原型模式通常包括两个角色：原型类和具体原型类。</p><blockquote><ol><li><strong>原型类</strong>是一个抽象的类或接口，声明了用于复制自己的方法。</li><li><strong>具体原型类</strong>是具体的实现类，在实现父类（或接口）中定义的复制方法时，需要注意实现深拷贝和浅拷贝，以确保复制出来的对象完全符合预期。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonalInfo</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> String sex;</span><br><span class="line">    <span class="keyword">protected</span> String age;</span><br><span class="line">    。。。。</span><br><span class="line"><span class="comment">// 省略构造和get set</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resume</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PersonalInfo personalInfo;</span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> String workTime;</span><br><span class="line">    。。。。</span><br><span class="line">    <span class="comment">// 省略构造和get set</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现clone方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Resume <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Resume</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 使用克隆对象进行克隆内容</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = (Resume) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;克隆异常了&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PersonalInfo</span> <span class="variable">personal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonalInfo</span>(<span class="string">&quot;Shier&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line">        <span class="type">Resume</span> <span class="variable">resume1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume</span>();</span><br><span class="line">        resume1.SetPersonalInfo(personal);</span><br><span class="line">        resume1.setWorkExperience(<span class="string">&quot;琴酒1&quot;</span>, <span class="string">&quot;2023-04~05&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用resume1进行调用clone对象</span></span><br><span class="line">        <span class="type">Resume</span> <span class="variable">resume2</span> <span class="operator">=</span> resume1.clone();</span><br><span class="line">        personal.setName(<span class="string">&quot;panther&quot;</span>);</span><br><span class="line">        resume2.setWorkExperience(<span class="string">&quot;琴酒2&quot;</span>, <span class="string">&quot;2023-04~06&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Resume</span> <span class="variable">resume3</span> <span class="operator">=</span> resume1.clone();</span><br><span class="line">        resume3.setWorkExperience(<span class="string">&quot;琴酒3&quot;</span>, <span class="string">&quot;2023-04~07&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resume1.showResume();</span><br><span class="line">        resume2.showResume();</span><br><span class="line">        resume3.showResume();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果 姓名都被覆盖了</span></span><br><span class="line"> 姓名：panther年龄<span class="number">19</span>性别男</span><br><span class="line">工作经历：琴酒<span class="number">1</span>时间：<span class="number">2023</span>-<span class="number">04</span>~<span class="number">05</span></span><br><span class="line">姓名：panther年龄<span class="number">19</span>性别男</span><br><span class="line">工作经历：琴酒<span class="number">2</span>时间：<span class="number">2023</span>-<span class="number">04</span>~<span class="number">06</span></span><br><span class="line">姓名：panther年龄<span class="number">19</span>性别男</span><br><span class="line">工作经历：琴酒<span class="number">3</span>时间：<span class="number">2023</span>-<span class="number">04</span>~<span class="number">07</span></span><br></pre></td></tr></table></figure><blockquote><p>现在’简历’对象里的数据存在是String型的，而String是一种拥有值类型特点的特殊引用类型，super.clone()方法是这样，如果字段是值类型的，则对该字段执行逐位复制，如果字段是引用类型，则复制引用但不复制引用的对象；因此，原始对象及其副本引用同一对象。什么意思呢？就是说如果你的’简历’类当中有对象引用，那么<strong>引用的对象数据是不会被克隆</strong>过来的。</p></blockquote> <div class="note primary simple"><p>扩展<strong>深拷贝</strong>和<strong>浅拷贝</strong> </p></div><ol><li>浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而<strong>所有的对其他对象的引用都仍然指向原来的对象</strong>。但我们可能更需要这样的一种需求，把要复制的对象所引用的对象都复制一遍</li><li>深拷贝：是指创建一个新对象，并将原始对象中的所有非静态字段及其关联对象的值复制到新对象中。如果字段是基本数据类型，则拷贝它们的值；如果字段是引用类型，则<strong>递归地拷贝它们所指向的对象</strong>，直到所有引用对象都被拷贝为止。因此，<strong>原始对象和副本对象将不共享任何对象。</strong></li></ol><p>改进程序(将personalInfo类也实现Cloneable接口添加克隆方法)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// personalInfo类也实现Cloneable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonalInfo</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> String sex;</span><br><span class="line">    <span class="keyword">protected</span> String age;</span><br><span class="line">    <span class="comment">// 添加克隆代码</span></span><br><span class="line">    <span class="keyword">public</span> PersonalInfo <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PersonalInfo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 使用克隆对象进行克隆内容</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = (PersonalInfo) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;克隆异常了&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加深拷贝代码</span></span><br><span class="line"><span class="keyword">public</span> Resume <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Resume</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 使用克隆对象进行克隆内容</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        object = (Resume) <span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="comment">//深拷贝代码</span></span><br><span class="line">        <span class="built_in">this</span>.personalInfo = <span class="built_in">this</span>.personalInfo.clone();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;克隆异常了&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">姓名：Shier年龄<span class="number">19</span>性别男</span><br><span class="line">工作经历：琴酒<span class="number">1</span>时间：<span class="number">2023</span>-<span class="number">04</span>~<span class="number">05</span></span><br><span class="line">姓名：panther年龄<span class="number">19</span>性别男</span><br><span class="line">工作经历：琴酒<span class="number">2</span>时间：<span class="number">2023</span>-<span class="number">04</span>~<span class="number">06</span></span><br><span class="line">姓名：Shier年龄<span class="number">19</span>性别男</span><br><span class="line">工作经历：琴酒<span class="number">3</span>时间：<span class="number">2023</span>-<span class="number">04</span>~<span class="number">07</span></span><br></pre></td></tr></table></figure><blockquote><p>原型模式优点：</p><ol><li>可以在不编写创建代码的情况下创建新对象。</li><li>可以<strong>减少代码重复</strong>，因为我们可以通过<strong>拷贝现有对象</strong>来避免多次编写相同的创建代码。</li><li>可以<strong>减少初始化操作或构造函数</strong>，并使代码更加灵活和可扩展。</li></ol><p>原型模式缺点：</p><ol><li>如果拷贝操作很复杂，可能会导致性能问题。</li><li>如果<strong>对象有循环依赖关系</strong>，则需要特殊处理。</li></ol></blockquote><h1 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h1><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式（Adapter Pattern），<strong>它将一个类的接口转换成客户端所期望的另一种接口，让原本不兼容的接口可以在一起工作</strong>。适配器模式常被用于将<strong>旧的代码和新的代码无缝地集成在一起</strong>，从而减少系统重构的成本。</p><div class="note primary simple"><p>对象适配器 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提供给客户的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户普通请求!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要适配的特殊接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">adaptee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specificRequest</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;需要适配的特殊请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新建一个适配器适配特殊接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapte</span> <span class="keyword">extends</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">adaptee</span> <span class="variable">adaptee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">adaptee</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 适配的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>&#123;</span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapte</span>();</span><br><span class="line">        target1.request(); <span class="comment">// 客户普通请求!!</span></span><br><span class="line">        target2.request(); <span class="comment">// 需要适配的特殊请求</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>适配器模式的<strong>优点</strong></p><blockquote><ol><li>解决接口不兼容性：适配器模式可以帮助解决不同类之间接口不兼容的问题，使得原本无法协同工作的类能够一起工作。</li><li>可复用性：适配器模式可以复用现有的类，而无需修改其代码结构。通过适配器，可以使得已经存在的类能够适应新的接口。</li><li>系统扩展性：当需要引入新的类并与现有类协同工作时，适配器模式可以提供一种灵活的方式，而无需修改现有类的代码。</li><li>客户代码可以统一调用同一接口，让程序更简单、更直接、更紧凑。</li></ol></blockquote><p>适配器模式的<strong>缺点</strong></p><blockquote><ol><li>是需要增加额外的代码来完成适配器的实现，从而增加了系统的复杂度。因此，在确定使用适配器模式时，需要权衡其优点和缺点，选择最合适的实现方式。</li><li>增加了复杂性：引入适配器模式会增加代码的复杂性，特别是当存在多个适配器时，可能会导致代码更难理解和维护。</li><li>运行时性能损耗：由于适配器需要进行接口转换和数据处理，可能会导致一定的运行时性能损耗。</li></ol></blockquote><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>模式结构</p><p><img src="https://oss.gincode.icu/pics/5701d79a19f11cf4598c5bad94408574.jpg" alt="设计模式之代理模式"></p><blockquote><p><code>Subject（抽象主题角色）</code> <code>Proxy（代理主题角色)</code>  <code>RealSubject（真实主题角色)</code></p><p>在代理模式中，通常会涉及到三个角色：抽象主题角色、真实主题角色和代理主题角色。</p><ol><li>抽象主题角色声明了<strong>真实主题角色和代理主题角色的公共方法</strong></li><li>真实主题角色实现了抽象主题角色定义的接口，代表着真实的业务实现</li><li>代理主题角色持有真实主题角色的引用，可以访问真实主题角色，同时还可以在真实主题角色基础上添加一些附加的操作</li></ol></blockquote><div class="note primary simple"><p>模拟小王给小红送花</p></div><ul><li>小王和小红</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xiaowang</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xiaohong</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是小王没有胆量直接送花所以联系了花店(提供送花服务)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">flowerShop</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">giveFlower</span><span class="params">(String buyName , String sellName)</span>&#123;</span><br><span class="line">        System.out.println(buyName + <span class="string">&quot;给&quot;</span>+sellName+<span class="string">&quot;送花&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是小王还想添加一些创意，不想只是送花</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">flowerShopProxy</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">flowerShop</span> <span class="variable">flowerShop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">flowerShop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preProcess</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 前置操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">giveFlower</span><span class="params">(String buyName , String sellName)</span>&#123;</span><br><span class="line">        preProcess();</span><br><span class="line">        flowerShop.giveFlower(buyName,sellName);</span><br><span class="line">        postProcess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postProcess</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 后置操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代理模式的优点：</p><ul><li>职责清晰</li><li>高扩展性</li><li>智能化</li></ul><p>常见代理模式的应用</p><ol><li>远程代理，也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实</li><li>虚拟代理，是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象</li><li>安全代理，用来控制真实对象访问时的权限</li><li>智能指引，是指当调用真实的对象时，代理处理另外一些事</li></ol></blockquote><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>享元模式是一种结构型设计模式，旨在<strong>通过共享对象来减少内存使用和提高性能</strong>。它主要用于处理<strong>大量细粒度对象</strong>的情况，其中许多对象具有相似的属性和行为。</p><p>在享元模式中，对象分为两种类型（可共享的内部状态和不可共享的外部状态）：</p><p><code>内部状态（Intrinsic State)</code> 和 <code>外部状态（Extrinsic State）</code>。</p><ol><li>内部状态是对象的固有属性，它们不随外部环境的改变而改变。</li><li>外部状态取决于外部环境，它们在运行时可以改变。</li></ol><p>享元模式的核心思想是<strong>将具有相同内部状态的对象共享</strong>，以减少内存占用。当需要创建一个对象时，首先检查是否已经存在具有相同内部状态的对象。如果存在，则重用该对象，而不是创建一个新的对象。如果不存在，则创建一个新的对象并将其添加到共享池中，以供以后使用。典型的享元类代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网站接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Website</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体网站类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteWebsite</span> <span class="keyword">implements</span> <span class="title class_">Website</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteWebsite</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用 &quot;</span> + type + <span class="string">&quot; 网站&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网站工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebsiteFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Website&gt; websites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Website <span class="title function_">getWebsite</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!websites.containsKey(type)) &#123;</span><br><span class="line">            websites.put(type, <span class="keyword">new</span> <span class="title class_">ConcreteWebsite</span>(type));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> websites.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWebsiteCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> websites.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyweightPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WebsiteFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebsiteFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Website</span> <span class="variable">blog</span> <span class="operator">=</span> factory.getWebsite(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        blog.use();</span><br><span class="line"></span><br><span class="line">        <span class="type">Website</span> <span class="variable">forum</span> <span class="operator">=</span> factory.getWebsite(<span class="string">&quot;论坛&quot;</span>);</span><br><span class="line">        forum.use();</span><br><span class="line"></span><br><span class="line">        <span class="type">Website</span> <span class="variable">blog2</span> <span class="operator">=</span> factory.getWebsite(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        blog2.use();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;网站数量：&quot;</span> + factory.getWebsiteCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外观模式（门面模式）"><a href="#外观模式（门面模式）" class="headerlink" title="外观模式（门面模式）"></a>外观模式（门面模式）</h2><p>意图：能为子系统、框架或其他复杂类<strong>提供一个简单的接口。</strong>（类比淘宝，你只需要下单付款，不需要了解内部实现，淘宝内部经过一些列的处理最终将货物送到你手里）从而使子系统更易用、更易懂、更易扩展。</p><p>外观模式的<strong>核心思想是封装</strong>，即将一组复杂的类或接口封装在一个外观类中，客户端只<strong>与外观类进行交互</strong>，而不直接与复杂的子系统进行交互。外观类隐藏了子系统的复杂性，客户端只需要知道如何使用外观类提供的接口即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现三个子系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">childOne</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SystemOne</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;第一个子系统&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">childTwo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SystemTwo</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;第二个子系统&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">childThree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SystemThree</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;第三个子系统&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现外观类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">facade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">childOne</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">childOne</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">childTwo</span> <span class="variable">two</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">childTwo</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">childThree</span> <span class="variable">three</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">childThree</span>();</span><br><span class="line">    <span class="comment">// 提供外界的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">(<span class="type">int</span> nums)</span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (nums)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               one.SystemOne();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               two.SystemTwo();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               three.SystemThree();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               System.out.println(<span class="string">&quot;sorry!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">facade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">facade</span>();</span><br><span class="line">        facade.use(<span class="number">1</span>); <span class="comment">// 第一个子系统</span></span><br><span class="line">        facade.use(<span class="number">2</span>); <span class="comment">// 第二个子系统</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用外观模式的<strong>时机</strong></p><blockquote><ol><li>在设计初期阶段，应该要有意识地将不同的两个层分离。比如经典的三层架构，就需要考虑在数据访问层和业务逻辑层、业务逻辑层和表示层的层与层之间建立外观Facade，这样可以为复杂的子系统提供一个简单的接口，使得耦合大大降低。</li><li>在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂。大多数的模式使用时也都会产生很多很小的类，这本是好事，但也给外部调用它们的用户程序带来了使用上的困难，增加外观Facade可以提供一个简单的接口，减少它们之间的依赖。</li><li>在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了，但因为它包含非常重要的功能，新的需求开发必须要依赖于它。此时用外观模式Facade也是非常合适的。</li></ol></blockquote><p>外观模式的<strong>优缺点</strong></p><blockquote><p>外观模式的<strong>优点</strong>包括：</p><ol><li><strong>简化了客户端代码</strong>：外观模式提供了一个统一的接口，客户端只需要调用外观类提供的方法即可完成复杂的操作，避免了直接调用多个子系统类的情况，从而简化了客户端代码。</li><li><strong>降低了耦合度</strong>：由于外观模式将客户端与子系统解耦，使得子系统的变化对客户端的影响降到最低，从而提高了系统的可维护性、可扩展性和灵活性。</li><li><strong>隐藏了复杂性</strong>：外观模式将复杂的子系统封装在外观类中，客户端不需要了解子系统的实现细节，从而降低了系统的复杂度，让客户端能够更加轻松地使用该系统。</li></ol><p>外观模式的<strong>缺点</strong>包括：</p><ol><li><strong>不能很好地限制客户端使用子系统类</strong>：由于外观模式只是封装了一部分子系统的功能，而并未限制客户端直接使用子系统类，所以客户端可能会绕过外观类直接使用子系统类，从而导致系统的混乱和不稳定。</li><li><strong>增加了系统的复杂度</strong>：外观模式需要增加一个外观类来封装子系统，这样就会增加系统的复杂度和代码量。</li></ol></blockquote><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h1 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h1><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p><strong>模板设计模式：定义算法的骨架</strong></p><p>模板方法模式是一种行为型设计模式，定义了一个算法的框架，将其中一些<strong>步骤延迟到子类中实现</strong>。它使得子类可以在不改变算法结构的情况下，重新定义算法中某些步骤的具体实现方式。</p><p>模板方法模式通常由两部分组成：</p><ol><li><strong>抽象模板类（Abstract Template Class）</strong>：定义了算法的框架和每个步骤应该如何执行，但并不实现全部方法，并且该类中的某些方法可以有默认实现。</li><li><strong>具体实现类（Concrete Implementation Class）</strong>：实现抽象模板类中的未实现方法，以及定义算法中的一些细节。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceTemplate</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义顶层策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">strategy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提供一个具体策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceTemplate</span> <span class="keyword">implements</span> <span class="title class_">InterfaceTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">strategy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体策略&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提供一个模板策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">UserTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">strategy</span><span class="params">(InterfaceTemplate template)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultTemplate</span> <span class="keyword">extends</span> <span class="title class_">UserTemplate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">strategy</span><span class="params">(InterfaceTemplate template)</span> &#123;</span><br><span class="line">        template.strategy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户可以自定义策略</span></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InstanceTemplate</span> <span class="variable">instanceTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstanceTemplate</span>();</span><br><span class="line">        instanceTemplate.strategy();</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultTemplate</span> <span class="variable">defaultTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultTemplate</span>();</span><br><span class="line">        defaultTemplate.strategy(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;diy strategy&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>模板方法模式是通过把不变行为搬移到超类，去除子类中的重复代码来体现它的优势。</p><p><strong>由于策略模式不可能定义所有的策略，所有一般会搭配模板模式提供自定义策略</strong></p><blockquote><p>模板方法模式优点：</p><ol><li><ol><li>避免重复代码：将公共的方法提取到抽象模板类中，子类不再需要编写相同的代码段。</li><li>提高代码可扩展性：子类可以通过实现抽象模板类中的具体方法来改变算法的实现方式，从而达到扩展算法的目的，而不会影响到算法的整体结构。</li><li>降低代码耦合度：算法的框架和具体实现分别由抽象模板类和其子类实现，它们之间通过接口或者抽象父类进行交互，不直接依赖于具体的实现类。</li></ol></li></ol><p>缺点：</p><ol><li><ol><li>违反了单一职责原则：抽象模板类将算法的各个步骤定义在一个类中，其中包含了不同的逻辑分支，在一些情况下可能会使得该类变得比较庞大，难以维护和拓展。</li><li>可能导致代码复杂性增加：模板方法模式要求实现类必须提供某些具体的实现方法，这可能会导致实现类在实现这些方法时需要考虑更多的细节问题，从而增加了代码的复杂度。</li><li>破坏了封装性：实现类需要实现抽象模板类中定义的某些方法，这意味着实现类需要访问抽象模板类中的一些属性和方法，从而破坏了抽象模板类的封装性。</li></ol></li></ol></blockquote><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式（Strategy Pattern）是一种<strong>面向对象设计模式</strong>，它在一个对象中<strong>封装了不同的算法</strong>，使得这些算法可以相互替换。通过使用策略模式，客户端可以选择不同的算法来完成特定的任务，同时还可以轻松地替换算法和添加新的算法。</p><blockquote><p>在策略模式中，一般有三个角色：<strong>策略接口、具体策略类和环境类。</strong></p><ol><li>策略接口定义了所有具体策略类所需要实现的方法</li><li>具体策略类实现了策略接口，并提供了不同的算法实现</li><li>环境类则持有一个策略接口类型的引用，并将实际的算法执行委托给该引用所指向的具体策略类。</li></ol><p>策略模式的优点</p><ol><li>可以方便地扩展和修改算法的实现，而不必修改环境类的代码。</li><li>可以将算法的实现与其他部分的代码分离，提高代码的可维护性和可复用性。</li></ol></blockquote><p><img src="http://oss.gincode.icu/pics/a966e657df95433fab62b329026df46a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230410224824707"></p><div class="note primary simple"><p>实现一个商场记账 </p></div><ol><li>最开始的实现没有用到设计模式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//商品单价</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="comment">//商品购买数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当前商品合计费用</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">totalPrices</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="comment">//总计所有商品费用</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0d</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 不断输入进货的商品数量和单价，直到输入的价格或和数量小于0</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入商品单价：&quot;</span>);</span><br><span class="line">            price = Double.parseDouble(sc.nextLine());</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入商品数量：&quot;</span>);</span><br><span class="line">            num = Integer.parseInt(sc.nextLine());</span><br><span class="line">            <span class="keyword">if</span> (price &lt;= <span class="number">0</span> || num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            totalPrices = price * num;</span><br><span class="line">            total = total + totalPrices;</span><br><span class="line">            System.out.println(<span class="string">&quot;单价：&quot;</span> + price + <span class="string">&quot;元  数量：&quot;</span> + num + <span class="string">&quot; 合计：&quot;</span> + totalPrices + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 算出最终的 价格 </span></span><br><span class="line">        System.out.println(<span class="string">&quot;总计：&quot;</span> + total + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>扩展性太弱了，商场出活动（打折等）代码就不能用了。</p><ol><li>提前给出几个策略，并给出一个可扩展的策略</li></ol><p><img src="http://oss.gincode.icu/pics/strategy.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  根据需求选择合适的策略            </span><br><span class="line"><span class="comment">//AbstractStrategy strategy1 = new FullReduction(100,20);</span></span><br><span class="line"><span class="comment">//AbstractStrategy strategy2 = new Discounts(0.6);</span></span><br><span class="line"><span class="comment">//totalPrices = strategy1.strategy(price,num);</span></span><br><span class="line"><span class="comment">//totalPrices = strategy2.strategy(price,num);</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>优点</li></ul><ol><li>简化单元测试：通过对应的接口进行单独测试，就不用测试到其他的功能接口。、</li><li>算法可重用性强：将算法封装成独立的类，使其可以在不同的应用中被复用，提高了代码的可维护性和可扩展性。</li><li>策略切换方便：对于相同的行为，在不同的场景下可能需要不同的实现算法，策略模式可以方便地切换算法实现。</li><li>避免使用多重条件分支语句：使用策略模式可以避免使用复杂的if-else分支语句，提高代码的可读性和可维护性，降低代码的圈复杂度</li><li>扩展性良好：向系统中增加新的策略类很容易，不需要修改原有代码，符合开闭原则。</li></ol></blockquote><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase</title>
      <link href="/2023/06/18/ArrayList/javase/"/>
      <url>/2023/06/18/ArrayList/javase/</url>
      
        <content type="html"><![CDATA[<h2 id="for-循环的执行顺序"><a href="#for-循环的执行顺序" class="headerlink" title="for 循环的执行顺序"></a>for 循环的执行顺序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">foo</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">     System.out.print(c);</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(foo(<span class="string">&#x27;A&#x27;</span>);foo(<span class="string">&#x27;B&#x27;</span>)&amp;&amp;(i&lt;<span class="number">2</span>);foo(<span class="string">&#x27;C&#x27;</span>))&#123;</span><br><span class="line">         i++;</span><br><span class="line">         foo(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 ABDC BDCB</span></span><br></pre></td></tr></table></figure><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try catch finally"></a>try catch finally</h2><div class="note info simple"><p>当Java程序执行try块、catch块时遇到了<strong>return或throw</strong>语句，这两个语句都会导致该方法立即结束，但是系统执行这两个语句并不会结束该方法，而是去寻找该异常处理流程中是否包含finally块，如果没有finally块，程序立即执行return或throw语句，方法终止；如果有finally块，系统立即开始执行finally块。只有<strong>当finally块执行完成后，系统才会再次跳回来执行try块、catch块里的return或throw语句；如果finally块里也使用了return或throw等语句，finally块会终止方法，系统将不会跳回去执行try块、catch块里的任何代码。</strong></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;return value of getValue(): &quot;</span> + getValue()); <span class="comment">// 2 finally的返回值</span></span><br><span class="line">   &#125;</span><br><span class="line"> <span class="comment">// 全局 i等于三</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           i = <span class="number">4</span>/<span class="number">0</span>;</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           i++;</span><br><span class="line">           <span class="keyword">return</span> i + <span class="number">1</span>; <span class="comment">// 在返回之前如果有finally 会执行完finally的语句</span></span><br><span class="line">       &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">           i++;</span><br><span class="line">           <span class="keyword">return</span> i - <span class="number">1</span>; <span class="comment">// 最终的返回值</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>但是在遇到<code>System.exit(0)</code>语句时finally语句不会执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 只会输出 0</span></span><br></pre></td></tr></table></figure><h2 id="同步问题"><a href="#同步问题" class="headerlink" title="同步问题"></a>同步问题</h2><p>同步是害怕在操作过程的时候被其他线程也进行读取操作，一旦是原子性的操作就不会发生这种情况。 </p><p>++x , x++ , x = y 都不是原子操作（都需要先取值在赋值），而 x = 1 原子操作</p><h2 id="精度丢失"><a href="#精度丢失" class="headerlink" title="精度丢失"></a>精度丢失</h2><p>小范围转化为大范围的数值型变量，jvm在进行编译的过程中将进行类型的自动提升 </p><p>  <strong>大范围到小范围（向下转型）会丢失精度</strong> </p><p>  <strong>范围大小依次是：byte、char、short、int、long、float、double</strong></p><h2 id="负数取绝对值还是负数"><a href="#负数取绝对值还是负数" class="headerlink" title="负数取绝对值还是负数"></a>负数取绝对值还是负数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int 的范围为 -2^31 ~ 2^31 - 1</span></span><br><span class="line">System.out.println(Math.abs(Integer.MIN_VALUE));<span class="comment">//-2147483648</span></span><br></pre></td></tr></table></figure><h2 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Math.min(Double.MIN_VALUE, <span class="number">0.0</span>)); <span class="comment">// 0.0</span></span><br><span class="line">System.out.println(<span class="number">1.0</span> / <span class="number">0.0</span>); <span class="comment">// Infinity</span></span><br><span class="line">System.out.println(<span class="number">0.0</span> / <span class="number">0.0</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> , b = <span class="number">2</span>; </span><br><span class="line"><span class="type">byte</span> <span class="variable">c</span>  <span class="operator">=</span> a + b; <span class="comment">// 被final修饰的变量是常量，这里的c=a+b可以看成是c=3；</span></span><br><span class="line">b = <span class="number">127</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">c1</span> <span class="operator">=</span> a + b <span class="comment">// a + b 已经超出byte的范围会被认定为 int 向下转型会出现编译出错</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">1</span> , b1 = <span class="number">2</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">c2</span> <span class="operator">=</span> a1 + b1;  <span class="comment">// 运算出的结果会被转换成int 出现编译错误</span></span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="number">1</span> : <span class="number">1.0</span>;</span><br><span class="line">System.out.println(o1);  <span class="comment">// 1.0</span></span><br><span class="line"><span class="comment">// 其实输出的还是 1 只不过是 返回的类型会自动变成范围更大的类型</span></span><br></pre></td></tr></table></figure><h2 id="BigDecimal的equals方法"><a href="#BigDecimal的equals方法" class="headerlink" title="BigDecimal的equals方法"></a>BigDecimal的equals方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bigDecimal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bigDecimal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.10&quot;</span>);</span><br><span class="line"><span class="comment">// 对于0.1和0.10这两个数字，他们的值虽然一样，但是精度是不一样的，所以在使用equals比较的时候会返回false。</span></span><br><span class="line">System.out.println(bigDecimal2.equals(bigDecimal1)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bigDecimal3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bigDecimal4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="comment">// BigDecimal一共有以下4个构造方法</span></span><br><span class="line"><span class="comment">// 最简单的就是BigDecimal(long) 和BigDecimal(int)，因为是整数，所以标度就是0 </span></span><br><span class="line"><span class="comment">// BigDecimal(double),double都会转成一个近似值标度为55</span></span><br><span class="line"><span class="comment">// BigDecimal(String)，和string的小数一致，BigDecimal(&quot;0.10000&quot;)，标度也就是5。</span></span><br><span class="line">System.out.println(bigDecimal3.equals(bigDecimal4)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 阿里规范强制使用compareTo进行等值比较</span></span><br><span class="line">System.out.println(bigDecimal1.compareTo(bigDecimal2)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="跳出多层循环"><a href="#跳出多层循环" class="headerlink" title="跳出多层循环"></a>跳出多层循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flag:</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;,j=&quot;</span> + j);</span><br><span class="line">           <span class="keyword">if</span> (j == <span class="number">5</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span> flag;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="子类和父类"><a href="#子类和父类" class="headerlink" title="子类和父类"></a>子类和父类</h2><ol><li>构造函数不能被继承，构造方法只能被显式或隐式的调用。</li></ol><div class="note info simple"><p>子类不能继承父类的构造方法原因：</p></div><ol><li>构造器的目的主要是为了构造对象，很显然父类的构造器只是为了给父类造对象的，但是我们通过继承extends关键字就已经继承到了父类的属性和方法，就不需要父类对象；</li><li>不知道你会不会想着在子类造父类对象，例如    子类类型     变量名   =  new  父类类型( );  先不说这样写有没有问题，我们就看有没有意义，在编译期这是个子类的类型，我们只能调用子类里的属性和方法，如果我们调用子类独有的属性和方法时，运行期发现实际上是父类类型   没有这个调用子类独有的方法和属性那么就会报错，如果这是调用父类中的属性和方法，那可以直接new子类对象就好了  没必要new父类；</li></ol><div class="note info simple"><p>不会初始化子类的几种场景</p></div><blockquote><ol><li>调用的是<strong>父类</strong>的<strong>static</strong>方法或者字段 </li><li>调用的是<strong>父类</strong>的<strong>final</strong>方法或者字段 </li><li>通过<strong>数组来引用</strong></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">P</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">abc</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> <span class="string">&quot;final&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  String[] fields = &#123;<span class="string">&quot;final1&quot;</span> ,<span class="string">&quot;final2&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;P is init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">world</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;world ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">S</span> <span class="keyword">extends</span> <span class="title class_">P</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;S is init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(S.abc); <span class="comment">// P is init \n 123</span></span><br><span class="line">        S.hello();<span class="comment">//hello ....</span></span><br><span class="line">        System.out.println(S.field); <span class="comment">// final</span></span><br><span class="line">        S.world();<span class="comment">//world ....</span></span><br><span class="line">        System.out.println(S.fields[<span class="number">0</span>]);<span class="comment">//final1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info simple"><p>只要是被子类重写的方法，不被super调用都是调用子类方法   </p></div><p><img src="https://uploadfiles.nowcoder.com/images/20200724/624288791_1595596652709_2ACE7E0DDC324F941D9408346EC00132" alt=""></p><h2 id="String-对象的引用"><a href="#String-对象的引用" class="headerlink" title="String 对象的引用"></a>String 对象的引用</h2><h4 id="String类型的常量池比较特殊。它的主要使用方法有两种："><a href="#String类型的常量池比较特殊。它的主要使用方法有两种：" class="headerlink" title="String类型的常量池比较特殊。它的主要使用方法有两种："></a>String类型的常量池比较特殊。它的主要使用方法有两种：</h4><p> (1) 直接使用<strong>双引号声明</strong>出来的String对象会直接存储在常量池中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Stirng</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;<span class="comment">// 常量池</span></span><br></pre></td></tr></table></figure><p> (2) 会在堆中创建对象，并在没被任何引用时回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// 堆内存</span></span><br><span class="line"> ----- 使用intern 可以获取常量池数据地址 -----</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>.intern();</span><br></pre></td></tr></table></figure><h4 id="字符串拼接："><a href="#字符串拼接：" class="headerlink" title="字符串拼接："></a>字符串拼接：</h4><p> (1) 如果时<strong>双引号</strong>拼接则相当于直接赋值，存储在常量池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> <span class="comment">// 相当于 d = &quot;ab&quot; 存在常量池</span></span><br></pre></td></tr></table></figure><p>（2）引用对象拼接对象 在堆中创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">     </span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> a + b; <span class="comment">//在堆上创建的新的对象     </span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">System.out.println(str1 == str2);<span class="comment">//false</span></span><br><span class="line">System.out.println(str1 == str3);<span class="comment">//true </span></span><br><span class="line">System.out.println(str2 == str3);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="查看常量池"><a href="#查看常量池" class="headerlink" title="查看常量池"></a>查看常量池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">javap -c -verbose test.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Constant</span> pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">4.</span>#<span class="number">13</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = String             #<span class="number">14</span>            <span class="comment">// hello,world</span></span><br><span class="line">   #<span class="number">3</span> = Class              #<span class="number">15</span>            <span class="comment">// test</span></span><br><span class="line">   #<span class="number">4</span> = Class              #<span class="number">16</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">5</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">6</span> = Utf8               ()V</span><br><span class="line">   #<span class="number">7</span> = Utf8               Code</span><br><span class="line">   #<span class="number">8</span> = Utf8               LineNumberTable</span><br><span class="line">   #<span class="number">9</span> = Utf8               main</span><br><span class="line">  #<span class="number">10</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">11</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">12</span> = Utf8               test.java</span><br><span class="line">  #<span class="number">13</span> = NameAndType        #<span class="number">5</span>:#<span class="number">6</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">14</span> = Utf8               hello,world</span><br><span class="line">  #<span class="number">15</span> = Utf8               test</span><br><span class="line">  #<span class="number">16</span> = Utf8               java/lang/Object</span><br></pre></td></tr></table></figure><h2 id="烦人的空指针"><a href="#烦人的空指针" class="headerlink" title="烦人的空指针"></a>烦人的空指针</h2><ul><li>你是不是还在这样判空</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getStreetName</span><span class="params">( Province province )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( province != <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="type">City</span> <span class="variable">city</span> <span class="operator">=</span> province.getCity();</span><br><span class="line">        <span class="keyword">if</span>( city != <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="type">District</span> <span class="variable">district</span> <span class="operator">=</span> city.getDistrict();</span><br><span class="line">            <span class="keyword">if</span>( district != <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="type">Street</span> <span class="variable">street</span> <span class="operator">=</span> district.getStreet();</span><br><span class="line">                <span class="keyword">if</span>( street != <span class="literal">null</span> ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> street.getName();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;未找到该道路名&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Optional语法专治上面的<strong>俄罗斯套娃式 if 判空</strong>，因此上面的代码可以重构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getStreetName</span><span class="params">( Province province )</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable( province )</span><br><span class="line">            .map( i -&gt; i.getCity() )</span><br><span class="line">            .map( i -&gt; i.getDistrict() )</span><br><span class="line">            .map( i -&gt; i.getStreet() )</span><br><span class="line">            .map( i -&gt; i.getName() )</span><br><span class="line">            .orElse( <span class="string">&quot;未找到该道路名&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><div class="note info simple"><p>用<strong>start()来启动线程</strong>，实现了真正意义上的启动线程，此时会出现<strong>异步执行</strong>的效果，即在线程的创建和启动中所述的随机性。 而如果使用<strong>run()来启动线程</strong>，就不是异步执行了，而是<strong>同步执行</strong>，不会达到使用线程的意义</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.run();</span><br><span class="line">        thread2.run();</span><br><span class="line"><span class="comment">// 输出 0 1 2 3 4 0 1 2 3 4</span></span><br><span class="line">=================================================================</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"><span class="comment">// 输出 0 1 0 1 2 3 4 2 3 4  数据量不是很大会出现很多可能</span></span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p><code>Object</code>中含有： <code>getClass()、hashCode()、equals()、clone()、toString()、notify()、notifyAll()、wait(long)、wait(long,int)、wait()、finalize()</code> 共<strong>十一个方法</strong>。</p><ol><li><strong>equals</strong></li></ol><p>用于比较当前对象与目标对象是否相等，默认是比较<strong>引用是否指向同一对象</strong>。为 <code>public</code>方法，子类可重写。</p><ol><li><strong>clone</strong></li></ol><p>此方法返回当前对象的一个副本（生成新对象，但属性是原引用）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">demo</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 构造函数和get set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> demo <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (demo)<span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">demo</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo</span>(<span class="string">&quot;john&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">demo</span> <span class="variable">clone</span> <span class="operator">=</span> john.clone();</span><br><span class="line">        System.out.println(clone == john);</span><br><span class="line">        System.out.println(clone.getAge() == john.getAge());</span><br><span class="line">        System.out.println(clone.getName() == john.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 false true true</span></span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ol><li>Arrays.asList（不支持<strong>添加</strong>和<strong>删除</strong>，<strong>修改会改变原数组</strong>）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">String[] s = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(s);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;4&quot;</span>); <span class="comment">// Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span><br><span class="line"><span class="comment">// Arrays.asList(s)返回的对象并不是真正的ArrayList </span></span><br><span class="line"></span><br><span class="line">list.set(<span class="number">0</span> , <span class="string">&quot;0&quot;</span>); <span class="comment">// 修改list的数据原数组也同步修改了</span></span><br><span class="line">        System.out.println(Arrays.toString(s)); <span class="comment">// [0, 2, 3]</span></span><br><span class="line">        System.out.println(list.toString());    <span class="comment">// [0, 2, 3]</span></span><br><span class="line"><span class="comment">// 源码</span></span><br><span class="line"> <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;varargs&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span> include</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">RandomAccess</span>, java.io.Serializable</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 。。。。。实现了自己的ArrayList类</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 增加和删除都直接抛异常了</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>修复办法</strong>(套娃)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(arrays));</span><br></pre></td></tr></table></figure><ol><li>那原本的ArrayList就没有坑了吗</li></ol><p>JDK 另一个方法 <code>List#subList</code> 生成新集合也会与原始 <code>List</code> 互相影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; subList = list.subList(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        subList.set(<span class="number">0</span>, <span class="number">10</span>); </span><br><span class="line">        System.out.println(list.toString()); <span class="comment">// 10 2 3 原List集合也受到了影响</span></span><br><span class="line">        System.out.println(subList.toString()); <span class="comment">// 10</span></span><br><span class="line">===================================================================</span><br><span class="line">    subList.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(list.toString()); <span class="comment">// [1, 4, 2, 3] // 原数组也添加了新元素</span></span><br><span class="line">        System.out.println(subList.toString()); <span class="comment">// [1, 4]</span></span><br></pre></td></tr></table></figure><ol><li>unmodifiableList不可集合真的不能变吗</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>));</span><br><span class="line">      List&lt;String&gt; unmodifiableList = Collections.unmodifiableList(list);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 直接修改会报错   UnsupportedOperationException </span></span><br><span class="line">      <span class="comment">//unmodifiableList.add(&quot;4&quot;);</span></span><br><span class="line">      <span class="comment">//unmodifiableList.set(0,&quot;10&quot;);</span></span><br><span class="line">      <span class="comment">//unmodifiableList.remove(1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是我们修改原数组，可以发现不可变数组也发生了变化</span></span><br><span class="line">list.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">      System.out.println(unmodifiableList.toString()); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">      list.set( <span class="number">0</span>, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">      System.out.println(unmodifiableList.toString()); <span class="comment">// [10, 2, 3, 4]</span></span><br><span class="line">      list.remove( <span class="number">0</span>);</span><br><span class="line">      System.out.println(unmodifiableList.toString()); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库知识点补充</title>
      <link href="/2023/05/24/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/HeMysql/"/>
      <url>/2023/05/24/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/HeMysql/</url>
      
        <content type="html"><![CDATA[<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><ul><li>查看表的存储引擎<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> bills;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span> bills <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `bills` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 </span><br><span class="line">  <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li>查看数据库支持的存储引擎<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engines;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------------------------------------</span></span><br><span class="line"><span class="operator">|</span> Engine     <span class="operator">|</span> Support <span class="operator">|</span> Comment            <span class="operator">|</span> Transactions <span class="operator">|</span> XA   <span class="operator">|</span> Savepoints <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------------------------------------</span></span><br><span class="line"><span class="operator">|</span> MEMORY     <span class="operator">|</span> YES  <span class="operator">|</span> 存储在内存一般用于临时表  <span class="operator">|</span> <span class="keyword">NO</span>     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MRG_MYISAM <span class="operator">|</span> YES  <span class="operator">|</span> 允许多表合并             <span class="operator">|</span> <span class="keyword">NO</span>     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CSV        <span class="operator">|</span> YES  <span class="operator">|</span> 文件存储引擎可以导出数据  <span class="operator">|</span> <span class="keyword">NO</span>     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FEDERATED  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> 远程表存储引擎           <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PERFORMANCE_SCHEMA <span class="operator">|</span> YES <span class="operator">|</span> 管理和监控MySQL服务器性能的工具<span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MyISAM     <span class="operator">|</span> YES <span class="operator">|</span> 读取性能高 全文索引 表级锁      <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> InnoDB     <span class="operator">|</span> <span class="keyword">DEFAULT</span> <span class="operator">|</span> 默认引擎 行级锁            <span class="operator">|</span> YES    <span class="operator">|</span> YES  <span class="operator">|</span> YES    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLACKHOLE  <span class="operator">|</span> YES <span class="operator">|</span> 不存储真实数据，主要进行数据流的传输和路由 <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span><span class="keyword">NO</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ARCHIVE    <span class="operator">|</span> YES <span class="operator">|</span> 基于行的存储引擎     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li>存储结构<br><img src="https://pic1.imgdb.cn/item/646e116a0d2dde57774f9170.png" alt=""></li><li>常用存储引擎的区别<br><img src="https://pic1.imgdb.cn/item/646e146a0d2dde577753b586.png" alt=""><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>按「<code>数据结构</code>」分类：B+tree索引、Hash索引、Full-text索引。<br>按「<code>物理存储</code>」分类：聚簇索引（主键索引）、二级索引（辅助索引）。<br>按「<code>字段特性</code>」分类：主键索引、唯一索引、普通索引、前缀索引。<br>按「<code>字段个数</code>」分类：单列索引、联合索引。</p></div></li></ul><ul><li>优势和劣势</li></ul><div class="table-container"><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高搜索效率 降低IO成本吗</td><td>索引列占用额外空间</td></tr><tr><td>降低排序成本，降低CPU消耗</td><td>提高了查找效率，但是降低的修改效率</td></tr></tbody></table></div><h2 id="桉数据结构分类"><a href="#桉数据结构分类" class="headerlink" title="桉数据结构分类"></a>桉数据结构分类</h2><ul><li>常见的存储引擎支持的数据结构</li></ul><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E5%88%86%E7%B1%BB.drawio.png" alt=""></p><p><strong>Innodb</strong>存储引擎会根据不同的场景选择不同的列作为索引：</p><ul><li>如果有主键，默认会使用主键作为聚簇索引的索引键（key）；</li><li>如果没有主键，就选择第一个不包含 NULL 值的唯一（UNIQUE）列作为聚簇索引的索引键（key）；</li><li>在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列作为聚簇索引的索引键（key）；</li></ul><h2 id="按物理存储分类"><a href="#按物理存储分类" class="headerlink" title="按物理存储分类"></a>按物理存储分类</h2><ul><li>主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；</li><li>二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> 分析查表步骤 假设id为主键</span><br><span class="line">①<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">②<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;john&#x27;</span>;</span><br><span class="line"><span class="operator">-</span> 第一个查询走主键索引直接查询到数据</span><br><span class="line"><span class="operator">-</span> 第二个查询走二级索引先查询到对应主键值再回表根据主键索引查询数据</span><br></pre></td></tr></table></figure><h2 id="按字段特性分类"><a href="#按字段特性分类" class="headerlink" title="按字段特性分类"></a>按字段特性分类</h2><p><img src="https://pic1.imgdb.cn/item/646e20f80d2dde577764ed1e.png" alt=""></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>创建索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX indexName <span class="keyword">ON</span> <span class="keyword">table</span> (col_Name，。。。); <span class="comment">-- 创建唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> FULLETEXT INDEX indexName <span class="keyword">ON</span> <span class="keyword">table</span> (col_Name，。。。); <span class="comment">-- 创建全文索引</span></span><br></pre></td></tr></table></figure><ul><li>查看索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">on</span> table_name;</span><br></pre></td></tr></table></figure><ul><li><strong>小案例</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 准备一张表</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> emila           <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Gin      <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> zerotwo  <span class="operator">|</span> zerotwo<span class="variable">@163</span>.com <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> panther  <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查看索引</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> <span class="keyword">user</span>；</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+-------</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> Non_unique <span class="operator">|</span> Key_name <span class="operator">|</span> Seq_in_index <span class="operator">|</span> Column_name <span class="operator">|</span> <span class="keyword">Collation</span> <span class="operator">|</span> <span class="keyword">Cardinality</span> <span class="operator">|</span> Sub_part <span class="operator">|</span> Packed <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Index_type <span class="operator">|</span> Comment <span class="operator">|</span> Index_comment <span class="operator">|</span> Visible <span class="operator">|</span> Expression <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>  <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> id          <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span> YES     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+-------</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 给name字段创建索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> <span class="keyword">user</span>(username);</span><br><span class="line"><span class="comment">-- 给emila创建唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_user_em <span class="keyword">on</span> <span class="keyword">user</span>(emila);</span><br><span class="line"><span class="comment">-- 创建联合索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_name_em <span class="keyword">on</span> <span class="keyword">user</span>(name , emila);</span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">drop</span> index idx_user_name <span class="keyword">on</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>① 慢sql的分析</p><p>② 索引的失效</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表修改和查询的操作</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;com_______&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Com_binlog    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_commit    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_delete    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_import    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_insert    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_repair    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_revoke    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_select    <span class="operator">|</span> <span class="number">21</span>    <span class="operator">|</span> <span class="comment">-- 该表查询了21次</span></span><br><span class="line"><span class="operator">|</span> Com_signal    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_update    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_xa_end    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 慢查询日志</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name  <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 如果是关闭状态可以再 /etc/my.cnf中添加</span></span><br><span class="line">slow_query_log <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- 开启慢sql查询日志</span></span><br><span class="line">long_query_time <span class="operator">=</span> <span class="number">2</span> <span class="comment">-- 设置超过多少秒为慢查询</span></span><br><span class="line">slow_query_log_file <span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>slow.log <span class="comment">-- 指定日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日志格式</span></span><br><span class="line"><span class="type">Time</span>           Id Command              Argument</span><br><span class="line"># <span class="type">Time</span>: <span class="number">2023</span><span class="number">-05</span><span class="number">-23</span>T15:<span class="number">45</span>:<span class="number">39.6886792</span></span><br><span class="line"># <span class="keyword">User</span> @ Host:root [root]localhost [Id:<span class="number">8</span></span><br><span class="line"># Query <span class="type">time</span>: <span class="number">13.350650</span> <span class="comment">-- 查询时间 </span></span><br><span class="line"># Lock <span class="type">time</span>: <span class="number">0.000358</span> <span class="keyword">Rows</span> sent:<span class="number">1</span><span class="keyword">Rows</span> examined:<span class="number">0</span></span><br><span class="line">use test; <span class="comment">-- 使用的数据库</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">timestamp</span><span class="operator">=</span><span class="number">1635435926</span>; <span class="comment">-- 总查询时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>）<span class="keyword">from</span> tb_sku; <span class="comment">-- 执行的sql语句</span></span><br><span class="line">             </span><br><span class="line"><span class="comment">-- 查看profile了解sql的用时</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@have</span>_profiling; <span class="comment">-- 查看数据库支不支持</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@have</span>_profiling <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> YES              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@profiling</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@profiling</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>  <span class="comment">-- 默认关闭</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line">             </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> profiling <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 开启profiling</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line">             </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> profiles; <span class="comment">-- 查看sql执行的时间</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query                                          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00032050</span> <span class="operator">|</span> <span class="keyword">SELECT</span> DATABASE()                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">0.01238825</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span> <span class="number">0.00036200</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span> <span class="number">0.00098675</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%two&#x27;</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span> <span class="number">0.00023250</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)                                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------------------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查看操作的详情</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> profile <span class="keyword">for</span> query <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Status                         <span class="operator">|</span> Duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> starting                       <span class="operator">|</span> <span class="number">0.000093</span> <span class="operator">|</span>  <span class="comment">-- 开始执行sql</span></span><br><span class="line"><span class="operator">|</span> Executing hook <span class="keyword">on</span> transaction  <span class="operator">|</span> <span class="number">0.000003</span> <span class="operator">|</span>  <span class="comment">-- 开启事务</span></span><br><span class="line"><span class="operator">|</span> starting                       <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> checking permissions           <span class="operator">|</span> <span class="number">0.000004</span> <span class="operator">|</span>  <span class="comment">-- 检查权限</span></span><br><span class="line"><span class="operator">|</span> Opening tables                 <span class="operator">|</span> <span class="number">0.000054</span> <span class="operator">|</span>  <span class="comment">-- 打开表</span></span><br><span class="line"><span class="operator">|</span> init                           <span class="operator">|</span> <span class="number">0.000003</span> <span class="operator">|</span>  <span class="comment">-- 初始化</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> lock                    <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span>  <span class="comment">-- </span></span><br><span class="line"><span class="operator">|</span> optimizing                     <span class="operator">|</span> <span class="number">0.000027</span> <span class="operator">|</span>  <span class="comment">-- 语法优化</span></span><br><span class="line"><span class="operator">|</span> statistics                     <span class="operator">|</span> <span class="number">0.000064</span> <span class="operator">|</span>  <span class="comment">-- 统计分析</span></span><br><span class="line"><span class="operator">|</span> preparing                      <span class="operator">|</span> <span class="number">0.000010</span> <span class="operator">|</span>  <span class="comment">-- 执行</span></span><br><span class="line"><span class="operator">|</span> executing                      <span class="operator">|</span> <span class="number">0.000009</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">end</span>                            <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query <span class="keyword">end</span>                      <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waiting <span class="keyword">for</span> handler <span class="keyword">commit</span>     <span class="operator">|</span> <span class="number">0.000009</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> closing tables                 <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> freeing items                  <span class="operator">|</span> <span class="number">0.000056</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cleaning up                    <span class="operator">|</span> <span class="number">0.000010</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"><span class="number">17</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"> <span class="comment">-- 分析可能失效的索引、</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%two&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">or</span> username <span class="operator">=</span> <span class="string">&#x27;Gin&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+------------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> length(username)<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">+</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------</span></span><br><span class="line">             </span><br><span class="line"><span class="operator">-</span> ① 模糊匹配中有左<span class="operator">%</span> 索引失效 进行了全表扫描</span><br><span class="line"><span class="operator">-</span> ② 使用 <span class="keyword">or</span> 关键字时 如果 两边有一边没有索引则索引失效</span><br><span class="line"><span class="operator">-</span> ③ 对索引使用函数 因为索引保存的是索引字段的原始值，而不是经过函数计算后的值</span><br><span class="line"><span class="operator">-</span> ④ 对索引进行表达式计算</span><br></pre></td></tr></table></figure><p><img src="https://cdn.xiaolincoding.com//mysql/other/a9e6a9708a6dbbcc65906d1338d2ae70.png" alt=""></p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给username 和email创建单列索引</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_user_username <span class="keyword">on</span> <span class="keyword">user</span>(username);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_user_email <span class="keyword">on</span> <span class="keyword">user</span>(email);</span><br><span class="line"><span class="comment">-- 分析查询走的索引</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> id,username,email <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;panther&#x27;</span> <span class="keyword">and</span> emila <span class="operator">=</span> <span class="string">&#x27;Gin@163.com&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+----------------------------------+-------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys                    <span class="operator">|</span> key               <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+----------------------------------+-------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_user_username,idx_user_email <span class="operator">|</span> idx_user_username <span class="operator">|</span> <span class="number">83</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+----------------------------------+-------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 发现Extra字段为 NULL 说明本次查询产生了回表查询，因为根据KEY发现此次查询走username索引但是二级索引子节点只存放了主键</span></span><br><span class="line"><span class="comment">-- 没有email字段 所以数据库要进行回表查询效率就低了</span></span><br><span class="line"><span class="comment">-- 创建覆盖索引</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_username_email <span class="keyword">on</span> <span class="keyword">user</span>(username,email);</span><br><span class="line"><span class="comment">-- 再次分析发现Extra为Using index 说明走了索引没有进行回表，因为</span></span><br><span class="line"><span class="comment">-- 覆盖索引中存在username 和 email字段的值不需要回表查询</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> id,username,emila <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;panther&#x27;</span> <span class="keyword">and</span> emila <span class="operator">=</span> <span class="string">&#x27;Gin@163.com&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+-----------------------------------------------------+--------------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys                                       <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>         <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+-----------------------------------------------------+--------------------+---------+-------------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_user_username,idx_user_email,idx_username_email <span class="operator">|</span> idx_username_email <span class="operator">|</span> <span class="number">286</span>     <span class="operator">|</span> const,const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+-----------------------------------------------------+--------------------+---------+-------------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><h2 id="count-和count（1）的区别-，哪个性能好？"><a href="#count-和count（1）的区别-，哪个性能好？" class="headerlink" title="count(*) 和count（1）的区别 ，哪个性能好？"></a>count(*) 和count（1）的区别 ，哪个性能好？</h2><p><img src="https://cdn.xiaolincoding.com//mysql/other/af711033aa3423330d3a4bc6baeb9532.png" alt=""></p><ul><li><p><strong>COUNT()</strong>统计符合查询条件的记录中，函数指定的参数不为 NULL 的记录有多少个。</p></li><li><h3 id="count-主键字段-如果表里只有主键索引，没有二级索引时，那么，InnoDB-循环遍历聚簇索引，将读取到的记录返回给-server-层，然后读取记录中的-id-值"><a href="#count-主键字段-如果表里只有主键索引，没有二级索引时，那么，InnoDB-循环遍历聚簇索引，将读取到的记录返回给-server-层，然后读取记录中的-id-值" class="headerlink" title="count(主键字段)如果表里只有主键索引，没有二级索引时，那么，InnoDB 循环遍历聚簇索引，将读取到的记录返回给 server 层，然后读取记录中的 id 值"></a><strong>count(主键字段)如果表里只有主键索引，没有二级索引时，那么，InnoDB 循环遍历聚簇索引，将读取到的记录返回给 server 层，然后读取记录中的 id 值</strong></h3></li><li><p><strong>count(1)InnoDB 循环遍历聚簇索引（主键索引），将读取到的记录返回给 server 层，但是不会读取记录中的任何字段的值</strong></p></li><li><p><strong>count(*) 执行过程跟 count(1) 执行过程基本一样的</strong></p></li><li><p>count(字段) 对于这个查询来说，会采用全表扫描的方式来计数，所以它的执行效率是比较差的。</p></li></ul><h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1> <div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>① 大批量的插入 </p><p>② order by 、limit、count、update等常见关键字优化</p></div><h2 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 连接数据库添加 --local-infile</span></span><br><span class="line">PS C:\Users\admin<span class="operator">&gt;</span> mysql <span class="comment">--local-infile -uroot -p</span></span><br><span class="line"><span class="comment">-- 查看大批量插入是否开启</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@local</span>_infile;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@local</span>_infile <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span> <span class="comment">-- 默认关闭</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 打开大批量插入</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 编写数据脚本</span></span><br><span class="line"><span class="number">4</span>, john1,jogn1<span class="variable">@163</span>.com,<span class="number">123456</span></span><br><span class="line"><span class="number">5</span>, john2,jogn2<span class="variable">@163</span>.com,<span class="number">123456</span></span><br><span class="line"><span class="number">6</span>, john3,jogn3<span class="variable">@163</span>.com,<span class="number">123456</span></span><br><span class="line">。。。。。</span><br><span class="line"><span class="comment">-- 大批量插入</span></span><br><span class="line">mysql<span class="operator">&gt;</span> load data <span class="keyword">local</span> infile <span class="string">&#x27;D:\loadTest.sql&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">user</span> fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>; <span class="comment">-- 字段的分割符可自定义以及行的分隔符</span></span><br></pre></td></tr></table></figure><h2 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h2><div class="note info simple"><p>顺序插入比乱序插入性能更高（因为sql的数据结构为B+Tree是有序的当乱序插入数据，需要多出调整树结构的复杂度）</p></div><h2 id="order-by-优化"><a href="#order-by-优化" class="headerlink" title="order by 优化"></a>order by 优化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在没有索引的情况下 Using filesort 文件排序效率较低</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> username;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> <span class="keyword">user</span>(username);</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> username <span class="keyword">asc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="comment">-- 如果降序排序</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> <span class="keyword">user</span>(username <span class="keyword">desc</span>);</span><br><span class="line"><span class="comment">-- 如果多个字段排序</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> <span class="keyword">user</span>(username <span class="keyword">desc</span> ,age <span class="keyword">asc</span>);</span><br></pre></td></tr></table></figure><h2 id="limit-优化"><a href="#limit-优化" class="headerlink" title="limit 优化"></a>limit 优化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- limit 开始数据越往后效率越慢</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">1000000</span>,<span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 通过主键索引或者覆盖索引优化</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">1000000</span>,<span class="number">10</span>; <span class="comment">-- 主键索引</span></span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">1000000</span>,<span class="number">10</span>; <span class="comment">-- 通过创建ID和name的覆盖索引避免回表达到优化</span></span><br></pre></td></tr></table></figure><h2 id="count-优化"><a href="#count-优化" class="headerlink" title="count 优化"></a>count 优化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- count(*) 走索引但不需要统计值效率高</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>     <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key        <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> employees <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> dept_id_fk <span class="operator">|</span> <span class="number">5</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">107</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- count(1) 走索引但不需要统计值效率高</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>     <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key        <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> employees <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> dept_id_fk <span class="operator">|</span> <span class="number">5</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">107</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- count(employee_id) 走索引但是需要主键的值 效率较高</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(employee_id) <span class="keyword">from</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>     <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key        <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> employees <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> dept_id_fk <span class="operator">|</span> <span class="number">5</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">107</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- count(字段) 没走索引 效率低</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(last_name) <span class="keyword">from</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>     <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> employees <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">107</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="update-优化"><a href="#update-优化" class="headerlink" title="update 优化"></a>update 优化</h2><div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">第一个会话</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">第二个会话</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 此时锁住id为一的行数据</span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 没有索引的字段开启事务</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name没有索引此时锁住整张表，会话2不能修改任何数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;123666&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;panther&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加name索引就不会形成表锁</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在第一个会话没有提交事务前修改 id为3的数据可以成功修改</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;666666&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"><span class="comment">-- 在第一个会话没有提交事务前修改 id为1的数据不可以修改</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;666666&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">光标停在这里</span><br><span class="line"><span class="comment">-- 第一个会话的事务提交后 修改成功</span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">33.62</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- </span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p><img src="https://cdn.xiaolincoding.com//mysql/other/1e37f6994ef44714aba03b8046b1ace2.png" alt=""></p><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><ul><li>要使用全局锁，则要执行这条命令：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush tables <span class="keyword">with</span> read lock;</span><br></pre></td></tr></table></figure><p>执行后，<strong>整个数据库就处于只读状态了</strong>，这时其他线程执行以下操作，都会被阻塞：</p><ul><li>对数据的增删改操作，比如 insert、delete、update等语句；</li><li>对表结构的更改操作，比如 alter table、drop table 等语句。</li></ul><p>如果要释放全局锁，则要执行这条命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock tables</span><br></pre></td></tr></table></figure><ul><li>演示</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 一般在数据备份时会需要全局锁，保证数据在备份期间不被改变</span></span><br><span class="line">mysql<span class="operator">&gt;</span> flush tables <span class="keyword">with</span> read lock;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没问题</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> emila           <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Gin      <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">666666</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> zerotwo  <span class="operator">|</span> zerotwo<span class="variable">@163</span>.com <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> panther  <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">666666</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 修改报错</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">ERROR <span class="number">1223</span> (HY000): Can<span class="string">&#x27;t execute the query because you have a conflicting read lock</span></span><br><span class="line"><span class="string">-- 备份 mysqldump不是mysql的语法 而是mysql提供的工具 所以在CMD中运行即可</span></span><br><span class="line"><span class="string">PS C:\Users\admin&gt; mysqldump -uroot -pxxxx test &gt; D:\test.sql</span></span><br><span class="line"><span class="string">mysqldump: [Warning] Using a password on the command line interface can be insecure.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- 释放锁</span></span><br><span class="line"><span class="string">mysql&gt; unlock tables;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br></pre></td></tr></table></figure><h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><ul><li>表锁；</li><li>元数据锁（MDL）;</li><li>意向锁；</li></ul><div class="note info simple"><p>表锁</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加锁</span></span><br><span class="line"><span class="comment">-- 表级别的共享锁，也就是读锁； 其他会话可以读但不能写</span></span><br><span class="line">lock tables 表名 read;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表级别的独占锁，也就是写锁； 自己进行读和写操作 其他会话不能读也不能写</span></span><br><span class="line">lock tables 表名 write;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放锁</span></span><br><span class="line">unlock tables</span><br></pre></td></tr></table></figure><div class="note info simple"><p>元数据锁</p></div><p>我们不需要显示的使用 MDL(元数据锁)，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：</p><ul><li>对一张表进行 CRUD 操作时，加的是 <strong>MDL 读锁</strong>；</li><li>对一张表做结构变更操作的时候，加的是 <strong>MDL 写锁</strong>；</li></ul><p>MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。</p><p><strong>MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看元数据锁</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> object_type,object_schema,object_name,lock_type,lock_duration <span class="keyword">from</span> performance_schema.metadata_locks;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+-------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> object_type <span class="operator">|</span> object_schema      <span class="operator">|</span> object_name    <span class="operator">|</span> lock_type   <span class="operator">|</span> lock_duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+-------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">TABLE</span>       <span class="operator">|</span> performance_schema <span class="operator">|</span> metadata_locks <span class="operator">|</span> SHARED_READ <span class="operator">|</span> TRANSACTION   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+-------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务 进行查找操作</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>；</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- 再次查看元数据锁 发现多了SHARED_READ锁在user表中</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> object_type,object_schema,object_name,lock_type,lock_duration <span class="keyword">from</span> performance_schema.metadata_locks;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+-------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> object_type <span class="operator">|</span> object_schema      <span class="operator">|</span> object_name    <span class="operator">|</span> lock_type   <span class="operator">|</span> lock_duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+-------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">TABLE</span>       <span class="operator">|</span> test               <span class="operator">|</span> <span class="keyword">user</span>           <span class="operator">|</span> SHARED_READ <span class="operator">|</span> TRANSACTION   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">TABLE</span>       <span class="operator">|</span> performance_schema <span class="operator">|</span> metadata_locks <span class="operator">|</span> SHARED_READ <span class="operator">|</span> TRANSACTION   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+-------------+---------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 开启事务 进行修改数据操作</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;123666&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 再次查看元数据锁 发现多了SHARED_WRITE锁在user表中</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> object_type,object_schema,object_name,lock_type,lock_duration <span class="keyword">from</span> performance_schema.metadata_locks;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+--------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> object_type <span class="operator">|</span> object_schema      <span class="operator">|</span> object_name    <span class="operator">|</span> lock_type    <span class="operator">|</span> lock_duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+--------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">TABLE</span>       <span class="operator">|</span> test               <span class="operator">|</span> <span class="keyword">user</span>          <span class="operator">|</span> SHARED_WRITE <span class="operator">|</span> TRANSACTION   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">TABLE</span>       <span class="operator">|</span> performance_schema <span class="operator">|</span> metadata_locks <span class="operator">|</span> SHARED_READ  <span class="operator">|</span> TRANSACTION   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------------+----------------+--------------+---------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 再执行修改表结构</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">column</span> age <span class="type">int</span>;</span><br><span class="line"><span class="comment">-- 发现操作在阻塞状态 原因是修改表结构是会产生排他锁，他和共享写、共享读锁互斥</span></span><br><span class="line"><span class="comment">-- 共享写、共享读锁可以同时存在</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>意向锁</p></div><ul><li>在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；</li><li>在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；</li></ul><p>也就是，当执行插入、更新、删除操作，需要先对表加上<code>意向独占锁</code>，然后对该记录加独占锁。</p><p><strong>意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables … read*）和独占表锁（*lock tables … write*）发生冲突。</strong></p><ul><li><strong>意向锁的目的是为了快速判断表里是否有记录被加锁</strong></li></ul><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p>行级锁的类型主要有三类：</p><ul><li>Record Lock，记录锁，也就是仅仅把一条记录锁上；</li><li>Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；</li><li>Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</li></ul><div class="note warning simple"><p>如果在检索数据时没有通过索引，进行了全表扫描，则行锁会升级成表锁</p></div><div class="note info simple"><p>Record Lock 记录锁（在隔离级别在READ COMMITED 和REPEATABLE READ 时生效）</p></div><p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S（共享锁） 锁和 X（排他锁） 锁之分的：</p><ul><li>当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;</li><li>当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。</li></ul><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/x%E9%94%81%E5%92%8Cs%E9%94%81.png" alt=""></p><ul><li>当执行常见的sql时，Innodb自动添加的锁</li></ul><p><img src="https://pic1.imgdb.cn/item/64720635f024cca17360a228.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 测试行级锁</span></span><br><span class="line"><span class="comment">-- 开启事务 测试共享锁</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="comment">-- 打开第二个会话 查看锁情况 可以发现data为1的record（数据）添加了一个S锁</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> object_schema,object_name,index_name,lock_type,lock_mode,lock_data <span class="keyword">from</span> performance_schema.data_locks;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> object_schema <span class="operator">|</span> object_name <span class="operator">|</span> index_name <span class="operator">|</span> lock_type <span class="operator">|</span> lock_mode     <span class="operator">|</span> lock_data <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> test          <span class="operator">|</span> <span class="keyword">user</span>        <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">TABLE</span>     <span class="operator">|</span> <span class="keyword">IS</span>            <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test          <span class="operator">|</span> <span class="keyword">user</span>        <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span> RECORD    <span class="operator">|</span> S,REC_NOT_GAP <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+---------------+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 在第二个会话测试查找和修改</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode; <span class="comment">-- 查询没有问题</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> emila       <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Gin      <span class="operator">|</span> Gin<span class="variable">@163</span>.com <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-------------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 修改在阻塞状态 说明修改的排他锁与共享锁互斥</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试排他锁</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="comment">-- 查看锁情况  data为1的record（数据）添加了一个X锁</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> object_schema,object_name,index_name,lock_type,lock_mode,lock_data <span class="keyword">from</span> performance_schema.data_locks;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> object_schema <span class="operator">|</span> object_name <span class="operator">|</span> index_name <span class="operator">|</span> lock_type <span class="operator">|</span> lock_mode     <span class="operator">|</span> lock_data <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> test          <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">TABLE</span>     <span class="operator">|</span> IX            <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test          <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span> RECORD    <span class="operator">|</span> X,REC_NOT_GAP <span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+---------------+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 测试在会话2的查找和修改 都处于阻塞状态说明排他锁与共享锁、排他锁都互斥</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode; <span class="comment">--阻塞状态</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 阻塞状态</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>Gap lock 间隙锁（只存在于可重复读隔离级别）</p></div><p>目的是为了解决可重复读隔离级别下幻读的现象。</p><p>假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。</p><p>间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，<strong>间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数据</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> email           <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> panther  <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">666666</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> john     <span class="operator">|</span> john<span class="variable">@163</span>.com    <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 测试间隙锁</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">12</span>; <span class="comment">-- 不存在12这条数据</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 查看锁情况 id为13到3之间添加了间隙排他锁 （不包含3和13这两条数据）</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> object_schema,object_name,index_name,lock_type,lock_mode,lock_data <span class="keyword">from</span> performance_schema.data_locks;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> object_schema <span class="operator">|</span> object_name <span class="operator">|</span> index_name <span class="operator">|</span> lock_type <span class="operator">|</span> lock_mode <span class="operator">|</span> lock_data <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> test          <span class="operator">|</span> <span class="keyword">user</span>        <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">TABLE</span>     <span class="operator">|</span> IX        <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test          <span class="operator">|</span> <span class="keyword">user</span>        <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span> RECORD    <span class="operator">|</span> X,GAP     <span class="operator">|</span> <span class="number">13</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+------------+-----------+-----------+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 开启第二个会话 会发现在操作 3 到 13 范围的数据都会处于阻塞状态</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">12</span> , <span class="string">&#x27;john&#x27;</span>  ,<span class="string">&#x27;john@163.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="note info simple"><p>Next-Key Lock 临键锁（只存在于可重复读隔离级别）</p></div><p>是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</p><p>表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id = 4 记录，也不能修改 id = 5 这条记录。</p><p><strong>如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的</strong></p><h1 id="Buffe-pool"><a href="#Buffe-pool" class="headerlink" title="Buffe pool"></a>Buffe pool</h1><p>Innodb 存储引擎设计了一个<strong>缓冲池（Buffer Pool）</strong>，来提高数据库的读写性能</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/%E7%BC%93%E5%86%B2%E6%B1%A0.drawio.png" alt=""></p><ul><li>当读取数据时，如果数据存在于 Buffer Pool 中，客户端就会直接读取 Buffer Pool 中的数据，否则再去磁盘中读取。</li><li>当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，最后由后台线程将脏页写入到磁盘。</li></ul><h2 id="buffer-pool-缓存的东西"><a href="#buffer-pool-缓存的东西" class="headerlink" title="buffer pool 缓存的东西"></a>buffer pool 缓存的东西</h2><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/bufferpool%E5%86%85%E5%AE%B9.drawio.png" alt=""></p><ul><li>buffer pool 默认的大小</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_buffer_pool_size&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name           <span class="operator">|</span> <span class="keyword">Value</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_size <span class="operator">|</span> <span class="number">8388608</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h1><h2 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当前读读取到的都是最新的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在第一个会话开启事务</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 查询数</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> email           <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Gin      <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> john     <span class="operator">|</span> john<span class="variable">@163</span>.com    <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在第二个会话开启事务修改数据并提交</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> username <span class="operator">=</span> <span class="string">&#x27;john2&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在第一个会话再次查询数据 发现虽然会话二已经提交了事务但是数据还是旧数据</span></span><br><span class="line"><span class="comment">-- 这是因为Innodb默认的隔离级别时 可重复读 两次读取的数据是一样的</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> email           <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Gin      <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> john     <span class="operator">|</span> john<span class="variable">@163</span>.com    <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 但是我们使用当前读就会查询到最新数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> email           <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Gin      <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> john2    <span class="operator">|</span> Gin<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">666666</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----------------+----------+</span></span><br></pre></td></tr></table></figure><h2 id="表中的三个隐藏字段"><a href="#表中的三个隐藏字段" class="headerlink" title="表中的三个隐藏字段"></a>表中的三个隐藏字段</h2><p><img src="https://pic1.imgdb.cn/item/64731ce5f024cca173908cad.png" alt=""></p><h2 id="undo-log日志（回滚日志）和-ReadView"><a href="#undo-log日志（回滚日志）和-ReadView" class="headerlink" title="undo log日志（回滚日志）和 ReadView"></a>undo log日志（回滚日志）和 ReadView</h2><div class="note info simple"><p>undo log日志（回滚日志）</p></div><p><img src="https://pic1.imgdb.cn/item/64732074f024cca17394a1f0.png" alt=""></p><p>对于「<strong>读提交</strong>」和<strong>「可重复读</strong>」隔离级别的事务来说，它们的快照读（普通 select 语句）是通过 Read View + undo log 来实现的，它们的区别在于创建 Read View 的时机不同：</p><ul><li>「读提交」隔离级别是在每个 select 都会生成一个新的 Read View，也意味着，事务期间的多次读取同一条数据，前后两次读的数据可能会出现不一致，因为可能这期间另外一个事务修改了该记录，并提交了事务。</li><li>「可重复读」隔离级别是启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View，这样就保证了在事务期间读到的数据都是事务启动前的记录。</li></ul><div class="note info simple"><p>ReadView(读视图)</p></div><p><img src="https://pic1.imgdb.cn/item/647323d2f024cca173998ca2.png" alt=""></p><h1 id="三大日志-binlog、redo-log和undo-log"><a href="#三大日志-binlog、redo-log和undo-log" class="headerlink" title="三大日志(binlog、redo log和undo log)"></a>三大日志(binlog、redo log和undo log)</h1> <div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>① <code>redo log</code>（重做日志)</p><p>② <code>binlog</code>（归档日志）</p><p>③ <code>undo log</code>（回滚日志）</p></div><h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><p><code>redo log</code>（重做日志）是<code>InnoDB</code>存储引擎独有的，它让<code>MySQL</code>拥有了崩溃恢复能力。</p><p><code>InnoDB</code> 存储引擎为 <code>redo log</code> 的刷盘策略（将buffer pool的数据写入磁盘中）提供了 <code>innodb_flush_log_at_trx_commit</code> 参数，它支持三种策略：</p><ul><li><strong>0</strong>：设置为 0 的时候，表示每次事务提交时不进行刷盘操作</li><li><strong>1</strong>：设置为 1 的时候，表示每次事务提交时都将进行刷盘操作</li><li><strong>2</strong>：设置为 2 的时候，表示每次事务提交时都只把 redo log buffer 内容写入 page cache</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看默认的类型</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_flush_log_at_trx_commit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                  <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_flush_log_at_trx_commit <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><p>Binlog（Binary Log）日志是MySQL Server层生成的一种记录，包含了数据库执行的所有操作，无论是SQL语句的执行还是数据库数据的变更。这个重要的日志类型记录了数据库实例的所有DML（数据操作语言）和DDL（数据定义语言）操作。</p><p>Binlog对于MySQL数据库系统至关重要。每当执行增、删、改操作（即DML操作）时，这些操作都会被记录在Binlog日志文件中。同时，对数据库结构进行更改的DDL操作也会在Binlog中留下记录。</p><p>Binlog的重要性不仅在于它存储了所有对数据库的更改，还在于当数据库发生故障时，它有助于数据的恢复。通过阅读Binlog日志中的数据变更内容，我们能够重新执行这些操作，从而实现对数据的恢复。</p><p><code>binlog</code> 日志有三种格式，可以通过<code>binlog_format</code>参数指定。</p><blockquote><ul><li><strong>statement</strong></li></ul><p>优点：不需要记录每一条SQL语句和每一行的数据变化，减少了binlog日志量，有助于提高性能</p><p>缺点：某些情况可能导致主从之间的数据不一致，例如在SQL语句中使用<code>sleep()</code>或<code>last_insert_id()</code>等操作</p><ul><li><strong>row</strong></li></ul><p>优点：任何情况下都可以复制，并且不会受到存储过程、函数等调用或触发器无法正确复制的问题的影响</p><p>缺点：binlog日志文件可能会变得非常大。相较于STATEMENT模式，可能导致更频繁的binlog并发写问题</p><ul><li><strong>mixed</strong></li></ul><p>是STATEMENT和ROW两种模式的混合使用</p><p>这种混合模式充分利用了两者的优势，同时避免了各自的缺点。</p></blockquote><p>binlog 用于备份恢复、主从复制</p><p><img src="https://pic.imgdb.cn/item/64c7b55a1ddac507cc08cb66.png" alt=""></p><p><strong>MySQL 集群的主从复制过程梳理成 3 个阶段</strong>：</p><ul><li><strong>写入 Binlog</strong>：主库写 binlog 日志，提交事务，并更新本地存储数据。</li><li><strong>同步 Binlog</strong>：把 binlog 复制到所有从库上，每个从库把 binlog 写到暂存日志中。</li><li><strong>回放 Binlog</strong>：回放 binlog，并更新存储引擎中的数据。</li></ul><p><strong>Binlog的写入时机</strong></p><ul><li>在事务执行期间，日志首先被写入到每个线程的 binlog cache 中。</li><li>在事务提交时，binlog cache 的内容会一次性写入到 binlog 文件中。</li></ul><p><img src="https://oss.gincode.icu/pics/16b441a830fe8e6345b143b1d5d3468a.png" alt="img"></p><h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>undo log 是一种用于撤销回退的日志。在事务没提交之前，MySQL 会先记录更新前的数据到 undo log 日志文件里面，当事务回滚时，可以利用 undo log 来进行回滚。</p><p>每当 InnoDB 引擎对一条记录进行操作（修改、删除、新增）时，要把回滚时需要的信息都记录到 undo log 里，比如：</p><ul><li>在<strong>插入</strong>一条记录时，要把这条记录的主键值记下来，这样之后回滚时只需要把这个主键值对应的记录<strong>删掉</strong>就好了；</li><li>在<strong>删除</strong>一条记录时，要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录<strong>插入</strong>到表中就好了；</li><li>在<strong>更新</strong>一条记录时，要把被更新的列的旧值记下来，这样之后回滚时再把这些列<strong>更新为旧值</strong>就好了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> mySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首次项目部署</title>
      <link href="/2023/03/22/ArrayList/deployed/"/>
      <url>/2023/03/22/ArrayList/deployed/</url>
      
        <content type="html"><![CDATA[<h1 id="1-服务器配置"><a href="#1-服务器配置" class="headerlink" title="1. 服务器配置"></a>1. 服务器配置</h1><p><strong>2 核 4G（Centos 7）</strong></p><h1 id="CentOS-安装-Docker"><a href="#CentOS-安装-Docker" class="headerlink" title="CentOS 安装 Docker"></a>CentOS 安装 Docker</h1><p>官方网站上有各种环境下的<a href="https://docs.docker.com/get-docker/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS 上的安装。</p><h2 id="2-1-卸载（可选）"><a href="#2-1-卸载（可选）" class="headerlink" title="2.1 卸载（可选）"></a>2.1 卸载（可选）</h2><p>如果之前安装过旧版本的 Docker，可以使用下面命令卸载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p><h2 id="2-2-安装-Docker"><a href="#2-2-安装-Docker" class="headerlink" title="2.2 安装 Docker"></a>2.2 安装 Docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、yum 包更新到最新 </span></span><br><span class="line">sudo yum update </span><br><span class="line"><span class="comment"># 2、作用：安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br><span class="line"><span class="comment"># 3、 设置yum源 </span></span><br><span class="line"><span class="comment"># 3.1、方案一：使用ustc的（推荐） </span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo </span><br><span class="line"><span class="comment"># 3.2、方案二：使用阿里云（可能失败） </span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo </span><br><span class="line"><span class="comment"># 4、 安装docker；出现输入的界面都按 y </span></span><br><span class="line">sudo yum install -y docker-ce</span><br><span class="line"><span class="comment"># 5、 查看docker版本 </span></span><br><span class="line">docker -v</span><br><span class="line"><span class="comment"># 6、 启动docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="2-3设置ustc镜像"><a href="#2-3设置ustc镜像" class="headerlink" title="2.3设置ustc镜像"></a>2.3设置ustc镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令： </span></span><br><span class="line"><span class="built_in">mkdir</span> /etc/docker </span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 插入下面这条配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xd6yheuz.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="Docker安装mysql数据库"><a href="#Docker安装mysql数据库" class="headerlink" title="Docker安装mysql数据库"></a>Docker安装mysql数据库</h1><h2 id="安装mysql镜像"><a href="#安装mysql镜像" class="headerlink" title="安装mysql镜像"></a>安装mysql镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索mysql镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="comment"># 拉取mysql数据库</span></span><br><span class="line">docker pull mysql:8.0.32</span><br><span class="line"><span class="comment"># 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line"><span class="built_in">mkdir</span> /root/mysql</span><br><span class="line"><span class="built_in">cd</span> /root/mysql</span><br><span class="line"><span class="comment"># 创建并启动守护式容器 </span></span><br><span class="line"><span class="comment"># -i：表示运行容器   -t：表示容器启动后会进入其命令行</span></span><br><span class="line"><span class="comment"># -d：会创建一个守护式容器在后台运行 -v：表示目录映射关系</span></span><br><span class="line">docker run -<span class="built_in">id</span> \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=remote_mysql \</span><br><span class="line">-v /root/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /root/mysql/logs:/logs \</span><br><span class="line">-v /root/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:8.0.32</span><br><span class="line"><span class="comment"># 对外开放指定端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器，操作mysql</span></span><br><span class="line">docker <span class="built_in">exec</span> -it remote_mysql /bin/bash</span><br><span class="line"><span class="comment"># 在外部使用navicat将数据库脚本导入</span></span><br><span class="line"><span class="comment"># exit 退出镜像</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/641879c7a682492fccb3d61c.png" alt=""></p><h1 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索Redis镜像</span></span><br><span class="line">docker search Redis</span><br><span class="line"><span class="comment"># 拉取mysql数据库</span></span><br><span class="line">docker pull redis:5.0</span><br><span class="line"><span class="comment"># 创建并启动守护式容器 </span></span><br><span class="line">docker run -<span class="built_in">id</span> --name=remote_redis -p 6379:6379 redis:5.0</span><br><span class="line"><span class="comment"># 对外开放指定端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line"><span class="comment"># 使用外部机器连接redis</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/64187b25a682492fccb63f59.png" alt=""></p><h1 id="Docker-安装RabbitMQ"><a href="#Docker-安装RabbitMQ" class="headerlink" title="Docker 安装RabbitMQ"></a>Docker 安装RabbitMQ</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉去镜像</span></span><br><span class="line">docker pull rabbitmq</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行镜像</span></span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -p 15672:15672 -p 5673:5672 rabbitmq</span><br><span class="line"></span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启web管理界面</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建账号和密码</span></span><br><span class="line">rabbitmqctl add_user panther 123456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置用户角色</span></span><br><span class="line">rabbitmqctl set_user_tags panther administrator</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为用户添加资源权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;<span class="built_in">read</span>&gt;</span></span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; panther &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加配置、写、读权限</span></span><br><span class="line">======</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户</span></span><br><span class="line">rabbitmqctl delete_user guest</span><br></pre></td></tr></table></figure><p><img src="https://oss.gincode.icu/pics/image-20230825104136892.png" alt="image-20230825104136892"></p><h1 id="部署后端"><a href="#部署后端" class="headerlink" title="部署后端"></a>部署后端</h1><h2 id="修改后端配置文件"><a href="#修改后端配置文件" class="headerlink" title="修改后端配置文件"></a>修改后端配置文件</h2><ul><li>修改mysql和redis的真实地址<br><img src="https://pic.imgdb.cn/item/64196919a682492fcc38fa7e.png" alt=""></li><li>然后打包上传到服务器<h2 id="docker-compose的安装"><a href="#docker-compose的安装" class="headerlink" title="docker-compose的安装"></a>docker-compose的安装</h2><h3 id="3-1-安装-DockerCompose"><a href="#3-1-安装-DockerCompose" class="headerlink" title="3.1 安装 DockerCompose"></a>3.1 安装 DockerCompose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><strong>如果下载慢，可自行去github下载相应版本然后更名为docker-compose，上传到服务器的/usr/local/bin目录下</strong><h3 id="3-2-设置文件可执行权限"><a href="#3-2-设置文件可执行权限" class="headerlink" title="3.2 设置文件可执行权限"></a>3.2 设置文件可执行权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose </span><br></pre></td></tr></table></figure><h3 id="3-3卸载"><a href="#3-3卸载" class="headerlink" title="3.3卸载"></a>3.3卸载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制包方式安装的，删除二进制文件即可 </span></span><br><span class="line"><span class="built_in">rm</span> /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># docker 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f &lt;containerid&gt;</span><br><span class="line"><span class="comment"># 可以按照镜像id删除镜像，命令如下： </span></span><br><span class="line">docker rmi 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FROM java:8</span></span><br><span class="line"><span class="comment">#这是由于Docker官方已经弃用java8镜像，想使用jdk1.8的话，可以使用openjdk。</span></span><br><span class="line"><span class="comment"># 解决办法是，将Dockerfile改为 </span></span><br><span class="line">FROM openjdk:8</span><br><span class="line"><span class="comment"># 持久化文件</span></span><br><span class="line">VOLUME /temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加jar包到容器 并从新命名</span></span><br><span class="line">ADD adminblog-1.0-SNAPSHOT.jar admin.jar</span><br><span class="line"></span><br><span class="line">RUN bash -c <span class="string">&#x27;touch /admin.jar&#x27;</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;admin.jar&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line">EXPOSE 9002</span><br></pre></td></tr></table></figure><h2 id="因为两个项目都是使用的jdk8所以直接再linux上安装jdk8复用"><a href="#因为两个项目都是使用的jdk8所以直接再linux上安装jdk8复用" class="headerlink" title="因为两个项目都是使用的jdk8所以直接再linux上安装jdk8复用"></a>因为两个项目都是使用的jdk8所以直接再linux上安装jdk8复用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看可安装java版本。执行成功后可以看见如下的结果</span></span><br><span class="line">yum -y list java*</span><br><span class="line"><span class="comment"># 选择一个java版本进行安装，这里我们希望安装java1.8</span></span><br><span class="line">yum install -y java-1.8.0-openjdk-devel.x86_64</span><br><span class="line"><span class="comment"># 查看已安装的jdk版本</span></span><br><span class="line">java -version</span><br><span class="line"><span class="comment"># 执行下面指令可以查看java安装目录</span></span><br><span class="line">rpm -ql java-1.8.0-openjdk</span><br><span class="line"><span class="comment"># 如果使用官网下载导入需要配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在文件底部输入以下信息，并保存</span></span><br><span class="line">JAVA_HOME=/home/java/jdk1.8.0_131</span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> JRE_HOME</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">export</span> CLASSPATH</span><br><span class="line"><span class="comment"># 刷新环境变量配置文件使其立刻生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 最好建一个/usr/bin/java的java的超链接。</span></span><br><span class="line"><span class="built_in">ln</span> -s /home/java/jdk1.8.0_131/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure><h2 id="构建docker-镜像"><a href="#构建docker-镜像" class="headerlink" title="构建docker 镜像"></a>构建docker 镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建docker 镜像</span></span><br><span class="line">docker build -f Dockerfile -t front-api:v1 .</span><br><span class="line"><span class="comment"># 运行镜像</span></span><br><span class="line">docker run -<span class="built_in">id</span> -p 9002:9002 front-api:v1</span><br><span class="line"><span class="comment"># 构建docker 镜像</span></span><br><span class="line">docker build -f Dockerfile -t back-blog:v1 .</span><br><span class="line"><span class="comment"># 运行镜像</span></span><br><span class="line">docker run -<span class="built_in">id</span> -p 9001:9001 back-blog:v1</span><br></pre></td></tr></table></figure><h1 id="前端打包"><a href="#前端打包" class="headerlink" title="前端打包"></a>前端打包</h1><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前台Vue项目修改项目运行端口是在config文件夹下的index.js文件当中</span></span><br><span class="line">port: 80</span><br><span class="line"><span class="comment"># 前台接口的BaseURL在src文件夹下的store文件当中修改服务器地址</span></span><br><span class="line">baseURL:<span class="string">&#x27;http://192.168.67.129:9001/&#x27;</span></span><br><span class="line"><span class="comment"># 然后打包将dist文件上传到服务器</span></span><br><span class="line">npm run build</span><br><span class="line"><span class="comment"># 前台管理界面修改配置文件.env请求接口为真实服务器地址</span></span><br><span class="line">VUE_APP_BASE_API = <span class="string">&#x27;http://192.168.67.129:9002&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为Nginx依赖于gcc的编译环境，所以，需要安装编译环境来使Nginx能够编译起来。</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"><span class="comment"># Nginx的http模块需要使用pcre来解析正则表达式，需要安装pcre。</span></span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line"><span class="comment"># 安装依赖的解压包。</span></span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line"><span class="comment"># 创建文件夹存放nginx</span></span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/nginx</span><br><span class="line"><span class="comment"># 远程下载nginx 没下载wget可在官网下载后传输的服务器</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.22.1.tar.gz</span><br><span class="line"><span class="comment">#  解压Nginx</span></span><br><span class="line">tar -zxvf nginx-1.16.1.tar.gz</span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /oj/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length  1k;</span><br><span class="line">    gzip_buffers     4 16k;</span><br><span class="line">    gzip_comp_level  4;</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen  443 ssl;</span><br><span class="line">        server_name  gincode.icu;</span><br><span class="line"></span><br><span class="line">        ssl_certificate    /etc/ssl/certs/xxxxx.pem;</span><br><span class="line">        ssl_certificate_key  /etc/ssl/certs/xxxx.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">            root   /前台打包地址;</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /api &#123;</span><br><span class="line">         proxy_pass http://后端接口地址:9001;</span><br><span class="line">         proxy_http_version 1.1;</span><br><span class="line">         proxy_set_header   Upgrade     <span class="variable">$http_upgrade</span>;</span><br><span class="line">         proxy_set_header   Connection  <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">         proxy_set_header   X-Real-IP   <span class="variable">$remote_addr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为项目前期一直使用ip访问，将IP的流量转向域名</span></span><br><span class="line">    server &#123;</span><br><span class="line">       listen  80;</span><br><span class="line">       server_name  后端接口地址; </span><br><span class="line">       rewrite ^/(.*)$ http://www.gincode.icu/<span class="variable">$1</span> permanent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在sbin目录下</span></span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><h1 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h1><img src="https://pic.imgdb.cn/item/659ebcef871b83018af76a58.png" alt="image-20240110234929475"><br><img src="https://pic.imgdb.cn/item/659ebd26871b83018af8ec30.jpg" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理期末复习</title>
      <link href="/2023/02/14/Fundamentals-of-computer/computer/computerBase/base/"/>
      <url>/2023/02/14/Fundamentals-of-computer/computer/computerBase/base/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统知识要点："><a href="#计算机系统知识要点：" class="headerlink" title="计算机系统知识要点："></a>计算机系统知识要点：</h1><h2 id="√-冯·诺依曼计算机核心思想与工作方式"><a href="#√-冯·诺依曼计算机核心思想与工作方式" class="headerlink" title="√ 冯·诺依曼计算机核心思想与工作方式"></a>√ 冯·诺依曼计算机核心思想与工作方式</h2><blockquote><p>冯诺依曼核心思想是基于硬件结构的计算机科学。他提出了冯诺依曼架构，这是一种通用的计算机硬件结构，以便可以执行任意的算法。他的工作方式是通过设计通用的硬件结构来实现计算，这样程序员就可以通过编写软件来使用该硬件结构。</p><p>可概括为 ‘存储程序’ 和 ‘程序控制’</p><p>冯诺依曼的核心思想对当今的计算机科学产生了深远的影响，并且被认为是计算机科学的基石之一。</p><p>基本思想：</p><pre><code>       1. 采用“存储程序”工作方式        2. 计算机由运算器、控制器、存储器、输入、输出设备组成        3. 存储器中存放指令和数据        4. 内部以二进制表示指令和数据</code></pre><p>工作方式:</p><p>​            按地址访问指令并自动按序执行程序</p></blockquote><h2 id="√二进制的意义"><a href="#√二进制的意义" class="headerlink" title="√二进制的意义"></a>√二进制的意义</h2><blockquote><p>二进制是一种表示数字的方式，其中数字是由0和1组成的。它是计算机科学的基础，因为计算机内部的运算和存储都是以二进制的形式进行的。</p><p>在二进制系统中，数字的每一位都代表一个特定的权值。例如，在一个8位二进制系统中，最左边的位代表2的7次方，第二位代表2的6次方，以此类推。每一位上的0或1决定了是否加上对应的权值，从而得到整个数字的值。</p><p>二进制的优点在于它的简单性，因为它只有两个数字，0和1，可以很容易地用电路来实现。它还是计算机处理和存储数据的基础，并且对于计算机网络和全球互联网的运作至关重要。</p></blockquote><h2 id="√-有关计算机中指令和数据"><a href="#√-有关计算机中指令和数据" class="headerlink" title="√ 有关计算机中指令和数据"></a>√ 有关计算机中指令和数据</h2><blockquote><p>指令是指计算机执行的指令，而数据是指计算机处理的信息。指令是指导计算机如何处理数据的指令，而数据是指计算机处理的信息。指令是由计算机程序员编写的，而数据是由用户输入的。</p></blockquote><h2 id="√-计算机系统抽象层次的描述和顺序关系"><a href="#√-计算机系统抽象层次的描述和顺序关系" class="headerlink" title="√ 计算机系统抽象层次的描述和顺序关系"></a>√ 计算机系统抽象层次的描述和顺序关系</h2><blockquote><p>计算机系统的抽象层次描述了系统的不同组成部分，以及它们如何与系统中其他部分交互。抽象层次分解可以帮助开发人员更好地理解系统的结构和行为，从而更容易地设计和开发系统。</p><p>一般来说，计算机系统的抽象层次有如下几层：</p><ol><li>硬件层：描述了系统的硬件组件，如 CPU、内存和磁盘。</li><li>操作系统层：描述了如何管理和控制硬件资源的系统软件，如 Windows、Linux 和 macOS。</li><li>应用软件层：描述了如何与用户交些的软件，如浏览器、文本编辑器和游戏。</li><li>用户界面层：描述了如何与用户进行交互的用户界面，如图形用户界面和命令行界面。</li></ol><p>从下到上，这些抽象层次构成了一个层次结构，并且每个层次都隐藏了底层细节，使上层层次可以更加抽象地表示问题。</p></blockquote><h2 id="√-从计算机系统的不同用户的角度描述计算机系统功能层次结构"><a href="#√-从计算机系统的不同用户的角度描述计算机系统功能层次结构" class="headerlink" title="√ 从计算机系统的不同用户的角度描述计算机系统功能层次结构"></a>√ 从计算机系统的不同用户的角度描述计算机系统功能层次结构</h2><blockquote><p>从不同的用户角度描述计算机系统功能层次结构，可以有不同的方法：</p><ol><li>从系统管理员的角度：系统管理员可能关注系统的底层硬件和操作系统，以确保系统的稳定性和可靠性。他们可以分解系统的硬件资源，如 CPU、内存和磁盘，并且管理操作系统如何使用这些资源。</li><li>从应用开发人员的角度：应用开发人员可能关注的是操作系统的 API 和应用软件层。他们可以利用操作系统提供的 API 来开发和管理应用程序。</li><li>从普通用户的角度：普通用户可能只关注应用软件和用户界面。他们可以使用应用程序来完成任务，并且在用户界面中进行交互。</li></ol><p>从不同的用户角度描述计算机系统的功能层次结构可以帮助更好地理解系统的结构和行为，从而更容易地使用和管理系统。</p></blockquote><h2 id="√基于计算机语言的计算机系统功能层次结构的描述"><a href="#√基于计算机语言的计算机系统功能层次结构的描述" class="headerlink" title="√基于计算机语言的计算机系统功能层次结构的描述"></a>√基于计算机语言的计算机系统功能层次结构的描述</h2><blockquote><p>计算机系统功能层次结构是一种基于计算机语言的抽象模型，它将计算机系统的功能划分为不同的层次，每一层次都有自己的功能和特性。最底层的层次是硬件层，它包括计算机的硬件设备，如处理器、内存、磁盘等。接下来是操作系统层，它提供了计算机系统的基本服务，如内存管理、文件系统管理、进程管理等。然后是应用程序层，它提供了特定的应用程序，如浏览器、文本编辑器等。最上层是用户界面层，它提供了用户与计算机系统的交互界面，如图形用户界面、命令行界面等。</p><h3 id="计算机系统采用层次化结构-从最上面的应用层到最下面的硬件层-其层次依次为"><a href="#计算机系统采用层次化结构-从最上面的应用层到最下面的硬件层-其层次依次为" class="headerlink" title="计算机系统采用层次化结构,从最上面的应用层到最下面的硬件层,其层次依次为:"></a>计算机系统采用层次化结构,从最上面的应用层到最下面的硬件层,其层次依次为:</h3><p>​                高级语言虚拟机 -&gt; 汇编语言虚拟机 -&gt; 操作系统虚拟机 -&gt; 机器语言机器    </p></blockquote><h1 id="数据编码与数据运算知识要点："><a href="#数据编码与数据运算知识要点：" class="headerlink" title="数据编码与数据运算知识要点："></a>数据编码与数据运算知识要点：</h1><h2 id="√求十进制或二进制负数的8位补码表示"><a href="#√求十进制或二进制负数的8位补码表示" class="headerlink" title="√求十进制或二进制负数的8位补码表示"></a>√求十进制或二进制负数的8位补码表示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. x＝－46，y＝117，则[x－y]补和[x＋y]补分别等于（）。</span><br><span class="line">    &gt; x-y = -163 = 16 * 10 + 3 = -A3H</span><br><span class="line">    &gt; [x-y]补等于最高位左移一位减去（x-y）即：100H-A3H = 5DH</span><br><span class="line">    &gt; x+y=71=16*4+7=47H,正数的补等于本身即[x+y]补=47H</span><br><span class="line"></span><br><span class="line">x＝－67，y＝114，则[x－y]补和[x＋y]补分别等于</span><br><span class="line">    &gt; x-y=-181,负数的补也可以用正数的补取反加一进行计算,181=10110101B</span><br><span class="line">    &gt; 取反：01001010B，再加一：01001011B=4BH,[x-y]补=4BH</span><br><span class="line">    &gt; x+y=47=2 * 16 + 15= 2FH,[x+y]补=2FH</span><br></pre></td></tr></table></figure><h2 id="√典型数值的补码表示（-1与最小负数）"><a href="#√典型数值的补码表示（-1与最小负数）" class="headerlink" title="√典型数值的补码表示（-1与最小负数）"></a>√典型数值的补码表示（-1与最小负数）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">计算机中-1的补码是 11111111</span><br><span class="line">1、通常把一个数的最高为定义为符号位，用“0”表示正，用“1”表示负。</span><br><span class="line"></span><br><span class="line">因为【－1】为负，所以【－1】的原码＝10000001</span><br><span class="line">2、反码：对于负数，数符位为1，数符位不变，将数值位诸位取反为反码。</span><br><span class="line"></span><br><span class="line">【－1】的反码＝11111110</span><br><span class="line"></span><br><span class="line">3、补码：对于负数，数符位为1，数符位不变，将反码＋1＝补码。</span><br><span class="line"></span><br><span class="line">【－1】的补码＝11111111</span><br></pre></td></tr></table></figure><h2 id="√定点整数的补码表数范围（8位、10位"><a href="#√定点整数的补码表数范围（8位、10位" class="headerlink" title="√定点整数的补码表数范围（8位、10位)"></a>√定点整数的补码表数范围（8位、10位)</h2><blockquote><p>( -128, +127】 </p></blockquote><h2 id="√符号数的补码加减运算与溢出判断"><a href="#√符号数的补码加减运算与溢出判断" class="headerlink" title="√符号数的补码加减运算与溢出判断"></a>√符号数的补码加减运算与溢出判断</h2><blockquote><p>双符号位判断溢出：<br>        原来符号位只有一个，现在为了方便再加一个。<br>        正数：00     负数 11<br>        结果01时，结果为正，发生正溢出（正数太大了）<br>        结果10时，结果为负，发生负溢出（负数太小了）<br>        举例：我们想让结果进位到符号位，又要让加数最小（绝对值最大，这样才能溢出）<br>            11100是最好的用例（这是发生进位的最小补码）。<br>            我们把两个 11100 相加<br>            11100+11100=111000 -&gt; 11000 这时发生溢出了吗？<br>            11000是-8，加数 11100是-4。<br>            没有发生溢出。</p></blockquote><h2 id="√计算机减法的实现以及补码运算的意义"><a href="#√计算机减法的实现以及补码运算的意义" class="headerlink" title="√计算机减法的实现以及补码运算的意义"></a>√计算机减法的实现以及补码运算的意义</h2><blockquote><p><strong>对于减法运算，计算机也是用加法器来实现的</strong> </p><p>可以将减法运算转化为补码的加法运算来实现，<strong>克服了原码加减法运算繁杂的弊端，可有效简化运算器的设计</strong></p></blockquote><h2 id="√算术右移的运算与【X-2】补"><a href="#√算术右移的运算与【X-2】补" class="headerlink" title="√算术右移的运算与【X/2】补"></a>√算术右移的运算与【X/2】补</h2><blockquote><p><strong>算术右移是在左端补k个最高有效位的值</strong></p><div class="table-container"><table><thead><tr><th>操作</th><th>值一</th><th>值二</th></tr></thead><tbody><tr><td>参数 x</td><td>0110 0011</td><td>1001 0101</td></tr><tr><td>x &gt;&gt; 4</td><td>0000 0110</td><td>1111 1001</td></tr></tbody></table></div><p>[X/2]补码：</p><pre><code>将[X]补码连同符号位一起右移1位，最高位补上符号位即可。</code></pre><p>​    如：若  [X]补=00101100，则[X/2]补=00010110<br>​            若  [X]补=10101100，则[X/2]补=11010110</p></blockquote><h1 id="指令系统与C语言程序的机器级表示知识要点："><a href="#指令系统与C语言程序的机器级表示知识要点：" class="headerlink" title="指令系统与C语言程序的机器级表示知识要点："></a>指令系统与C语言程序的机器级表示知识要点：</h1><h2 id="√汇编语言DEBUG工具中的-G、-D、-U命令"><a href="#√汇编语言DEBUG工具中的-G、-D、-U命令" class="headerlink" title="√汇编语言DEBUG工具中的-G、-D、-U命令"></a>√汇编语言DEBUG工具中的-G、-D、-U命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- D: 命令查看内存中的内容,例如: -d 1000:0 就是查看内存1000:0处的内容.</span><br><span class="line">- E: 命令修改内存中的内容.</span><br><span class="line">- U: 命令将内存单元总的内容翻译为汇编指令显示.</span><br><span class="line">- T: 命令执行CS:IP指向的指令.</span><br><span class="line">- A: 以汇编指令形式向内存中写入指令.</span><br><span class="line">- t: 单步执行.</span><br><span class="line">- g: [0000] 直接跳转到指定的地址.</span><br><span class="line">- p: 自动重复执行循环中的指令.知道(cx)=0为止.</span><br></pre></td></tr></table></figure><h2 id="√条件转移指令中的条件设置的可能性分析、以及条件转移指令机器代码的反汇编结果分析-示例1"><a href="#√条件转移指令中的条件设置的可能性分析、以及条件转移指令机器代码的反汇编结果分析-示例1" class="headerlink" title="√条件转移指令中的条件设置的可能性分析、以及条件转移指令机器代码的反汇编结果分析(示例1)"></a>√条件转移指令中的条件设置的可能性分析、以及条件转移指令机器代码的反汇编结果分析(示例1)</h2><blockquote><p>已知IA-32是小端方式处理器,根据给出的IA-32机器代码的反汇编结果(部分信息用x表示),回答下述问题。</p><p>已知jb指令的操作码是0111 0010,jb指令的转移目标地址是什么?</p><p>movl指令中的目的地址是如何反汇编出来的? </p><p>08048390: 72 f6     jb xxxxxxxx </p><p>08048392: c6 05 00 a8 04 08 01 00 00 00     movl $0x1, 0x0804a800</p><p>解析：</p><p>​    &gt; 1. jb的操作码01110010=72H   jb xxx的起始地址为08048390,操作码为72H 即f6为跳转地址</p><p>​    &gt;  08048390 + 2(操作码) + f6 = 08048488</p><p>​    </p><p>​    (2) movl的机器代码有10个字节,c6 05是操作码等,后面的是目的和源操作数,所以其目的地址为00 a8 04 08,</p><p>​         由于是小端方式,也就是0x0804a800</p></blockquote><h2 id="√subw-bx-ax指令和addw-bx-ax指令的执行与标志位的状态"><a href="#√subw-bx-ax指令和addw-bx-ax指令的执行与标志位的状态" class="headerlink" title="√subw%bx,%ax指令和addw%bx,%ax指令的执行与标志位的状态"></a>√subw%bx,%ax指令和addw%bx,%ax指令的执行与标志位的状态</h2><p>。。。(咕咕咕)</p><h1 id="CPU功能结构与控制器设计知识要点："><a href="#CPU功能结构与控制器设计知识要点：" class="headerlink" title="CPU功能结构与控制器设计知识要点："></a>CPU功能结构与控制器设计知识要点：</h1><h2 id="√8086CPU：数据线与字长、地址线与寻址空间"><a href="#√8086CPU：数据线与字长、地址线与寻址空间" class="headerlink" title="√8086CPU：数据线与字长、地址线与寻址空间"></a>√8086CPU：数据线与字长、地址线与寻址空间</h2><blockquote><p>8086有16根数据线和20根地址线，既能处理16位数据，也能处理8位数据，可寻址的内存空间为1MB。</p><p>计算地址线和数据线的方法：</p><p>​    1、地址线的数量n满足：2^n &gt;= 存储容量的比特数，解出最小的n，即是地址线的数量。</p><p>​    2、地址线是用来读取或写入数据的，所以数据线的数量，与存储单元的位数相同。</p><p>​    地址线是用来传输地址信息用的。举个简单的例子：cpu在内存或硬盘里面寻找一个数据时，先通过地址线找到地址，然后再通过    数据线将数据取出来。 如果有32根.就可以访问2的32次方的空间，也就是4GB。</p><p><code>例题</code>：某计算机字长为32位，其存储容量为16M×32位，它的地址线和数据线？</p><p>​                字长32位的计算机即数据线有32位，其基本寻址的存储单元也是1个字节，即8位，32位的字长共占4个存储单元，所以                16M * 4 = 64M存储单元 64M=<code>2^26 即地址总线为26</code>根 ,</p><p>​                 字长 = 数据总线, 即数据总线为<code>32</code>根</p></blockquote><h2 id="√CPU中的寄存器（指令寄存器和程序计数器）"><a href="#√CPU中的寄存器（指令寄存器和程序计数器）" class="headerlink" title="√CPU中的寄存器（指令寄存器和程序计数器）"></a>√CPU中的寄存器（指令寄存器和程序计数器）</h2><blockquote><p>CPU中的寄存器（指令寄存器、程序计数器、状态寄存器、栈指针、通用寄存器）</p></blockquote><h2 id="√模型机中各功能模块的作用，用RTL方式描述"><a href="#√模型机中各功能模块的作用，用RTL方式描述" class="headerlink" title="√模型机中各功能模块的作用，用RTL方式描述"></a>√模型机中各功能模块的作用，用RTL方式描述</h2><h2 id="√指令的执行流程（参考模型机功能结构图）"><a href="#√指令的执行流程（参考模型机功能结构图）" class="headerlink" title="√指令的执行流程（参考模型机功能结构图）"></a>√指令的执行流程（参考模型机功能结构图）</h2><p><img src="https://pic.imgdb.cn/item/63ea06db4757feff337f400a.png" style="zoom:75%;" /></p><p><img src="https://pic.imgdb.cn/item/63ea06db4757feff337f3fc8.png" alt=""></p><h2 id="√复杂指令系统计算机CISC特点（P242-三多"><a href="#√复杂指令系统计算机CISC特点（P242-三多" class="headerlink" title="√复杂指令系统计算机CISC特点（P242)三多"></a>√复杂指令系统计算机CISC特点（P242)三多</h2><blockquote><ol><li>指令系统复杂。指令条数多、寻址方式多、指令格式多</li><li>指令周期长</li><li>相关指令会产生显式的条形码，存放在专门的标志寄存器中，可用于条件转移或条件传达</li><li>指令周期差距大</li><li>难以进行编译优化</li></ol></blockquote><h2 id="√精简指令系统计算机RISC特点（P244-三少"><a href="#√精简指令系统计算机RISC特点（P244-三少" class="headerlink" title="√精简指令系统计算机RISC特点（P244)三少"></a>√精简指令系统计算机RISC特点（P244)三少</h2><blockquote><ol><li>指令条数少、寻址方式少、指令格式少</li><li>指令格式规整</li><li>采用load/store型指令设计风格</li><li>采用流水线方式执行指令</li><li>采用大量通用寄存器</li><li>采用硬连线路控制器</li><li>实现细节对机器级程序可见</li></ol></blockquote><h2 id="√微程序存储器的名称与类型"><a href="#√微程序存储器的名称与类型" class="headerlink" title="√微程序存储器的名称与类型"></a>√微程序存储器的名称与类型</h2><blockquote><p>微程序存储器的名称与类型包括ROM（只读存储器）、RAM（随机存取存储器）、EPROM（可擦除只读存储器）和EEPROM（可擦除可编程只读存储器）。</p></blockquote><h2 id="√微程序、微指令、微地址、指令周期"><a href="#√微程序、微指令、微地址、指令周期" class="headerlink" title="√微程序、微指令、微地址、指令周期"></a>√微程序、微指令、微地址、指令周期</h2><blockquote><ul><li><p><strong>微地址：微指令在控存中的地址。</strong></p></li><li><p><strong>微指令：把在同一CPU周期内并行执行的微操作控制信息，存储在控制存储器里，称为一条微指令（Microinstruction）</strong></p></li><li><p><strong>微程序：一系列微指令的有序集合就是微程序</strong></p></li><li><p>微地址寄存器 UAR ：存放微地址的寄存器。</p></li><li><p>微指令寄存器 UIR ：存放从控存取出的微指令的寄存器。</p></li><li><p>微周期：指从控存中取出并执行一条微指令需要的时间，一般与一个机器周期相当。</p></li><li><p><strong>指令周期：一条指令从取指令到执行完成的时间间隔</strong></p><p><img src="https://pic.imgdb.cn/item/63ea06dd4757feff337f4df1.png" alt=""></p></li></ul></blockquote><h2 id="√机器指令与微程序（微指令）的关系"><a href="#√机器指令与微程序（微指令）的关系" class="headerlink" title="√机器指令与微程序（微指令）的关系"></a>√机器指令与微程序（微指令）的关系</h2><blockquote><p>机器指令是一种指令，它指示计算机执行特定的操作，而微程序（微指令）是一种指令，它指示计算机执行一系列操作，以完成某项任务。</p><p>机器指令是微程序的基础，微程序是由一系列机器指令组成的。</p><p>机器指令和微指令的关系是： 每一条机器指令由一段用微指令编成的微程序来解释执行</p></blockquote><h1 id="存储器系统知识要点："><a href="#存储器系统知识要点：" class="headerlink" title="存储器系统知识要点："></a>存储器系统知识要点：</h1><h2 id="√DRAM和SRAM的存储原理与作用"><a href="#√DRAM和SRAM的存储原理与作用" class="headerlink" title="√DRAM和SRAM的存储原理与作用"></a>√DRAM和SRAM的存储原理与作用</h2><blockquote><p>（1）SRAM：依靠双稳态电路（内部交叉反馈）存储信息，适用于容量较小而速度较高场合。<br>（2）DRAM：依靠电容暂存电荷存储信息，适用于容量较大而速度较SRAM稍慢的场合。</p><p>  <img src="https://pic2.zhimg.com/v2-d1f5694f2b8c67f036660be5eb4ea0e5_r.jpg" alt=""></p></blockquote><h2 id="√多级存储结构的作用和映射原理"><a href="#√多级存储结构的作用和映射原理" class="headerlink" title="√多级存储结构的作用和映射原理"></a>√多级存储结构的作用和映射原理</h2><p><img src="https://img-blog.csdnimg.cn/20191008115009657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMyMTI3NTQ=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><blockquote><p>1.多级存储结构的作用是<strong>提高存储器的存取效率，减少存取时间。</strong></p><p>2.它的映射原理是<strong>将存储器的地址空间分割成多个等大的块，每个块又分割成多个等大的字，每个字又分割成多个等大的字节，以此类推，形成一个多级存储结构。</strong></p></blockquote><h2 id="√主存与CACHE之间的直接和组相联映像方式，及其主存地址分段（示例4"><a href="#√主存与CACHE之间的直接和组相联映像方式，及其主存地址分段（示例4" class="headerlink" title="√主存与CACHE之间的直接和组相联映像方式，及其主存地址分段（示例4)"></a>√主存与CACHE之间的直接和组相联映像方式，及其主存地址分段（示例4)</h2><blockquote><ol><li><p><strong>直接映射</strong></p><p>​    特点：是一种<code>多对一</code>的映射关系，主存的第 i 块一定映射到Cache的第 j 行，且<code>j = i % 2^c</code></p><pre><code>* 优点 ：映射方式简单，易实现。* 缺点：机制不灵活，Cache命中率低。</code></pre><p>​    <code>例题</code>  设有一个cache的容量为2K字，每个块为16字，求</p><p>​            (1)该cache可容纳多少个块？<br>​            (2)如果主存的容量是256K字，则有多少个块？<br>​            (3)主存的地址有多少位？cache地址有多少位？<br>​            (4)在直接映象方式下，主存中的第i块映象到cache中哪一个块中？<br>​            (5)进行地址映象时，存储器的地址分成哪几段？各段分别有多少位？</p><p>​                解：(1) cache中有 <code>2048/16=128个块。</code><br>​                        (2) 主存有 <code>256K/16=16384个块</code><br>​                        (3) cache容量为2K=2^11字，所以cache字地址为<code>11</code>位。<br>​                        (4) 主存中的第i块映象到cache中第imod128个块中。<br>​                        (5) 存储器的字地址分成三段：<code>主存标记、块号、块内字地址</code><br>​                             主存标记的长度为<code>18-11=7位，块号为7位。块内字地址为4位</code></p><blockquote><p>解释：Cache与主存的交换基本单位为<code>块</code></p></blockquote><ol><li><strong>全相联映射</strong></li></ol><p>​    特点：是<code>多对多</code>的映射关系，对于主存的任何一块均可以映射到Cache的任何一行</p><pre><code>* 优点：机制灵活，命中率高。* 缺点：比较器电路难于设计和实现，因此只适合于小容量的Cache。</code></pre><p>​    <code>列题</code>主存4GB （按字节编址）， Cache 512KB，块大小16B 读主存234589ABH的过程（假设Cache空白）</p><p>​                主存地址： 32位 4GB 的大小 块大小 16=2^4 ，又是按字节编址的，所以块内地址：4位</p><p>​                高位标记：32-4=28位</p><ol><li><strong>组相联映射</strong></li></ol><p>​    特点：将Cache的行分成 2^c-r 组，每组 2^r 行。</p><p>​                组相联映像通常采用<code>2路、4路和8路比较，即取r=1 r=2 r=3</code></p><p>​    主存的字块存放到Cache中的固定组，至于映射到该组哪一行是灵活的，即有如下函数关系：</p><p>​            主存的第 i 块映射到Cache的第 j 行  <code>j = (i % 2^c-r) * 2^r + k</code></p><ul><li>优点：大大增加了映射的灵活性，主存中一块可映射到Cache的 2^r 块，提高了命中率。</li></ul><p><code>例题1</code>Cache的容量为1K字，主存的容量是128K字，每个块为32字，进行2路组相联映像时存储器的地址分成哪几段？各段分别有多少位？在2路组相联映像方式下，主存中的142号块映像到cache中哪一个2路组中？</p><p>​        1. 分成三段：主存标记、组号、块内地址</p><p>​                                   8位           4位        5位</p><ol><li><p>主存：128K = 2^17   Cache：1K = 2^10   块：32=2^5   路：2 = 2^1</p><p>Cache分为2^10 / 2^5 = 2^5 块    分为 2^5 / 2^1 = 2^4 = 16 组</p><p>142 mod 16 = 14 故主存中的142号块映像到cache中14组中</p></li></ol><p><code>例题2</code>Cache的容量为1K字，主存的容量是128K字每个块为32字，在直接映像方式下，主存中的179号块映像到cache中哪一个块中？进行直接地址映像时，存储器的地址分成哪几段?各段分别有多少位？</p><ol><li><p>分成三段：主存标记、块号、块内地址</p><p>​                      7                 5           5</p><ol><li><p>主存：128K = 2^17   Cache：1K = 2^10   块：32=2^5   </p><p>​            Cache分为2^10 / 2^5 = 2^5</p><p>​            179 mod 32= 19</p></li></ol></li></ol></li></ol></blockquote><h2 id="√存储器的基本组织及其逻辑结构图"><a href="#√存储器的基本组织及其逻辑结构图" class="headerlink" title="√存储器的基本组织及其逻辑结构图"></a>√存储器的基本组织及其逻辑结构图</h2><blockquote><p><code>前置知识</code>：存储器的扩展</p><p><img src="https://pic1.zhimg.com/v2-8115d71a979596dbebb29d7bd687d640_r.jpg" alt=""></p><p>​    D 数据总线，A 地址总线，MREQ# （存储器的访问控制信号，低电平有效），</p><p>​    R/W# （读写控制信号，低电平为写信号，高电平为读信号）</p><p>​    EN# 译码器的时能信号（低电平有效）。</p><ol><li><p>位扩展：</p><p>​    用1K×4位的SRAM芯片扩展为1K×8位的SRAM存储器（位并联）</p><p><img src="https://pic.imgdb.cn/item/63eafb66f144a01007bee285.jpg" alt=""></p><ol><li>字扩展</li></ol><p>用1K×8位的SRAM芯片扩展为2K×8位的SRAM存储器（地址串联）</p><p><img src="https://pic1.zhimg.com/80/v2-3a4d952aaf2c3c24d64a5a2d3b05add4_720w.webp" alt=""></p><ol><li>字位扩展</li></ol></li></ol><h3 id="（1）-用1K×4位SRAM芯片构成4K×8位的存储器。"><a href="#（1）-用1K×4位SRAM芯片构成4K×8位的存储器。" class="headerlink" title="（1） 用1K×4位SRAM芯片构成4K×8位的存储器。"></a>（1） 用1K×4位SRAM芯片构成4K×8位的存储器。</h3><p><img src="https://pic4.zhimg.com/80/v2-7b8e81fcecfacfa0e839efd9f4288d63_1440w.webp" alt=""></p><p><code>解析</code>  4Kx8位的SRAM的 地址线为2^13即10根（底：A0~A9、高A10~A11）数据 8 根即（D0~D7）</p><p>​            现在需要构成4Kx8的存储器 <code>位扩展2位</code>（并联芯片两片）和<code>子扩展4位</code>（串联芯片4片）</p><h3 id="（2）-用8K×4位SRAM芯片构成40K×8位的存储器。"><a href="#（2）-用8K×4位SRAM芯片构成40K×8位的存储器。" class="headerlink" title="（2） 用8K×4位SRAM芯片构成40K×8位的存储器。"></a>（2） 用8K×4位SRAM芯片构成40K×8位的存储器。</h3><p><img src="https://pic3.zhimg.com/80/v2-835b5f1468bed4d1ab6d9a311a059bce_720w.webp" alt=""></p><p>(示例3):有一个256K×16位的存储器由64Kx8位的DRAM芯片构成：</p><p>​        总共需要多少DRAM芯片？画出此存储器与CPU连接的逻辑结构图。</p><ol><li>256 / 64 + 16 /8 = 6片</li></ol><p><img src="https://pic.imgdb.cn/item/63eb070bf144a01007d2e57d.png" alt=""></p><p>课堂图片：</p><p><img src="https://pic.imgdb.cn/item/63eb0825f144a01007d4cc08.jpg" alt=""></p></blockquote><h1 id="中断技术与I-O接口知识要点："><a href="#中断技术与I-O接口知识要点：" class="headerlink" title="中断技术与I/O接口知识要点："></a>中断技术与I/O接口知识要点：</h1><h2 id="√8086对中断请求响应优先级"><a href="#√8086对中断请求响应优先级" class="headerlink" title="√8086对中断请求响应优先级"></a>√8086对中断请求响应优先级</h2><blockquote><p>由高到低：内部中断→NMM→NTR→单步中断</p></blockquote><h2 id="√CPU与I-O接口之间的传送控制方式及各自特点的比较，DMA方式的应用"><a href="#√CPU与I-O接口之间的传送控制方式及各自特点的比较，DMA方式的应用" class="headerlink" title="√CPU与I/O接口之间的传送控制方式及各自特点的比较，DMA方式的应用"></a>√CPU与I/O接口之间的传送控制方式及各自特点的比较，DMA方式的应用</h2><blockquote><ol><li><p>CPU与I/O接口之间的传送控制方式有中断方式、程序控制方式和DMA(Direct Memory Access)方式。</p></li><li><p>中断方式是CPU控制I/O设备，当I/O设备完成操作时，会发出中断信号，CPU接收到中断信号后，会转入中断处理程序，完成数据传输。</p></li><li>程序控制方式是CPU控制I/O设备，CPU会不断检测I/O设备的状态，当I/O设备完成操作时，CPU会完成数据传输。</li><li>DMA方式是I/O设备控制CPU，当I/O设备完成操作时，会发出DMA请求信号，CPU接收到DMA请求信号后，会把数据传输给I/O设备。 </li></ol><ul><li>中断方式的特点是传输效率低，但是可以实现多任务的切换；</li><li>程序控制方式的特点是传输效率高，但是不能实现多任务的切换</li><li>DMA方式的特点是传输效率高，而且可以实现多任务的切换。</li></ul><blockquote><p>DMA方式的应用主要是用于大量数据传输，如磁盘读写、网络传输等。</p></blockquote></blockquote><h2 id="√中断向量表中关于中断类型号、中断服务程序逻辑地址和物理地址的相关参数"><a href="#√中断向量表中关于中断类型号、中断服务程序逻辑地址和物理地址的相关参数" class="headerlink" title="√中断向量表中关于中断类型号、中断服务程序逻辑地址和物理地址的相关参数"></a>√中断向量表中关于中断类型号、中断服务程序逻辑地址和物理地址的相关参数</h2><blockquote><p>（示例5）: 已知中断向量表中，002A4H中存放数据1020H,002A6H中存放数据3040H，则该中断服务分配的中断类型号是多少？并分别写出该中断服务程序的逻辑地址和物理地址。</p><p>​    <code>分析</code>：中断向量表的<code>起始位置为0H</code>,顺序存储对应中断类型码的中断处理程序的入口,</p><p>​                 存储每一个中断向量要用<code>4个字节</code>.   中断服务的地址存放格式，先偏移地址后段地址,低两位存放的是CS,高两位存放IP</p><p>​    <code>题解</code>：    002A4H / 4 = A9H 所以002A4H的中断服务为<code>A9H</code></p><p>​                    CS:3040H    IP:1020H  <code>逻辑地址：3040:1020</code>     <code>物理地址：31420H</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读集合源码</title>
      <link href="/2023/02/05/computer-science/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Collections/"/>
      <url>/2023/02/05/computer-science/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Collections/</url>
      
        <content type="html"><![CDATA[<h1 id="Arraylist"><a href="#Arraylist" class="headerlink" title="Arraylist"></a>Arraylist</h1><div class="tip sync"><p>底层数据结构</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData;  <span class="comment">//元素数据底层数组实现</span></span><br></pre></td></tr></table></figure><div class="tip sync"><p>默认构造函数</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">MyArrayList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//数组默认大小</span></span><br><span class="line">        elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="tip sync"><p>简单实现增删改查方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T t)</span>&#123;</span><br><span class="line">    elementData[size++] = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;数组没有&quot;</span>+index+<span class="string">&quot;这个元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> moveNum)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取删除元素后的元素数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lastes</span> <span class="operator">=</span> size - moveNum - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心将删除索引后的元素赋值到前面</span></span><br><span class="line">    <span class="keyword">if</span>(moveNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 删除索引的后一位开始复制数组到原数组的删除索引，复制大小为lastes</span></span><br><span class="line">        System.arraycopy(elementData,moveNum+<span class="number">1</span>,elementData,moveNum,lastes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,String newValue)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断索引是否存在</span></span><br><span class="line">   <span class="keyword">if</span>(index &gt;= size)&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;索引越界&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">String</span> <span class="variable">oldValue</span> <span class="operator">=</span> (String)elementData[index];</span><br><span class="line">   elementData[index] = newValue;</span><br><span class="line">   <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip sync"><p>扩容核心</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">newCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> <span class="built_in">this</span>.elementData.length;</span><br><span class="line">    <span class="comment">// 新容量为老容量的1.5倍</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(<span class="number">10</span>, minCapacity);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> minCapacity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 新容量大于最大值时的处理</span></span><br><span class="line">        <span class="keyword">return</span> newCapacity - <span class="number">2147483639</span> &lt;= <span class="number">0</span> ? newCapacity : hugeCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip sync"><p>elementData 用transient 修饰，序列化后数据会丢失吗</p></div><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioral compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>不对elementData序列化，对elementData中的元素进行循环，取出来单独进行序列化。</strong></p><p>为什么不直接对数组序列化</p><p><strong>一般情况下数组是没有存满的，直接序列化会造成空间浪费</strong></p></blockquote><h1 id="与Vector的比较"><a href="#与Vector的比较" class="headerlink" title="与Vector的比较"></a>与Vector的比较</h1><ul><li>与Arraylist相似，除了添加了synchronized保证线成安全，扩容自定义<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在add方法上添加了synchronizated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ++<span class="built_in">this</span>.modCount;</span><br><span class="line">    <span class="built_in">this</span>.add(e, <span class="built_in">this</span>.elementData, <span class="built_in">this</span>.elementCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 扩容 用户可在初始化阶段指定capacityIncrement的大小</span></span><br><span class="line"><span class="comment">// 没指定就扩容原来的2倍</span></span><br><span class="line"><span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (<span class="built_in">this</span>.capacityIncrement &gt; <span class="number">0</span> ? <span class="built_in">this</span>.capacityIncrement : oldCapacity);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><div class="tip sync"><p>底层数据结构</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被transient修饰的成员变量不参与序列化过程。</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">transient</span> LinkedList.Node&lt;E&gt; first; <span class="comment">// 记录第一个节点</span></span><br><span class="line"><span class="keyword">transient</span> LinkedList.Node&lt;E&gt; last;  <span class="comment">// 记录最后一个节点</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    <span class="comment">// 底层为双向链表</span></span><br><span class="line">    LinkedList.Node&lt;E&gt; next;</span><br><span class="line">    LinkedList.Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(LinkedList.Node&lt;E&gt; prev, E element, LinkedList.Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip sync"><p>简单实现增删改查方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">l</span> <span class="operator">=</span> last; <span class="comment">// 保存最后节点</span></span><br><span class="line">    MyLinkedList.Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>.Node(l, e, <span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">this</span>.last = newNode;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="literal">null</span>) <span class="comment">// 集合中没有数据</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断index的合理性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &gt;= index || index &gt;= size)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不存元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    MyLinkedList.Node&lt;E&gt; x = <span class="built_in">this</span>.get(index); <span class="comment">// 获取当前索引节点</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldVal</span> <span class="operator">=</span> x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    <span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="keyword">public</span> MyLinkedList.Node&lt;E&gt; <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断index的合理性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &gt;= index || index &gt;= size)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不存元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MyLinkedList.Node x;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; size &gt;&gt; <span class="number">1</span>)&#123; <span class="comment">//判断索引在前半部分还是后半部分</span></span><br><span class="line">        x = <span class="built_in">this</span>.first;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        x = <span class="built_in">this</span>.last;</span><br><span class="line">        <span class="keyword">for</span>(i = size; i &gt; index; i--)&#123;</span><br><span class="line">            x = x.prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// remove</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断index的合理性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &gt;= index || index &gt;= size)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不存元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过get方法得到该节点</span></span><br><span class="line">    Node&lt;E&gt; x = get(index);</span><br><span class="line">    <span class="comment">// 保存该节点的信息</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> x.item;</span><br><span class="line">    MyLinkedList.Node&lt;E&gt; next = x.next;</span><br><span class="line">    MyLinkedList.Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(prev == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.first = next;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 让当前节点的前一个节点的下一个节点指向当前节点的下一个节点</span></span><br><span class="line">    <span class="comment">// 1 &lt;-&gt; 2 &lt;-&gt; 3 删除2</span></span><br><span class="line">    <span class="comment">// 1 -&gt; 3</span></span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.last = prev;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 让当前节点的后一个节点的前一个节点指向当前节点的前一个节点</span></span><br><span class="line">    <span class="comment">// 1 &lt;-&gt; 2 &lt;-&gt; 3 删除2</span></span><br><span class="line">    <span class="comment">// 1 &lt;- 3</span></span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="literal">null</span>;</span><br><span class="line">    --<span class="built_in">this</span>.size;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><div class="tip sync"><p>底层数据结构</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//底层是 数组和链表和红黑树 结合在一起使用也就是 链表散列。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// get set equals方法</span></span><br></pre></td></tr></table></figure></li></ul><div class="tip sync"><p>KEY的hash过程</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   首先取 key值进行 hashcode 算出hashcode赋值给 h ， 在用自己的底16位和自己的高16位进行异或</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">       <span class="comment">// 扰动机制，table的长度一般都小于2^16，所有让高16位参与运算会让hash值更散</span></span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 put 元素时进行了 与操作</span></span><br><span class="line">n = (tab = resize()).length; <span class="comment">// hash表长度</span></span><br><span class="line"><span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这里可以体现为什么HashMap的长度建议为<code>2的幂次</code></p><ul><li>当数组长度为 2 的幂次是 length - 1就刚好所有的二进制全为 1</li></ul><p><strong>不是2的幂次，则算出的length - 1就会存在一些位置为 0，而0进行&amp;操作，就一定为0，增加了hash冲突概率</strong></p><p>jdk如何保证刚好是<code>2的幂次</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>n 如果是正整数，那么最高位肯定是 1</p><ol><li>n或上无符号右移1位，则不管n的第二位是0，1都会变成1，现在就<strong>最高位和次位都为1</strong></li><li>n或上无符号右移2位,就是将第一步前两个1与第3，4个或变成1，现在就是<strong>前4位为1</strong></li></ol><p>。。。。。。。</p><p>为什么要cap - 1；</p><ol><li>因为如果n 刚好是2的整数幂，则会将n变成2^(n + 1);</li></ol></blockquote></blockquote><div class="tip sync"><p>扩容过程</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成员变量含义</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16 默认容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>; <span class="comment">// 最大容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>; <span class="comment">// 默认负载因子</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>; <span class="comment">// 树化的门限</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>; <span class="comment">// 解除树化的门限</span></span><br><span class="line"><span class="comment">// 树化时table的最小容量，当hashmap中不超过64个元素，即使hash冲突超过树化门限时也不会树化，而是进行扩容</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>; </span><br><span class="line"><span class="comment">// 关键构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor; <span class="comment">// 默认或者指定的 负载因子</span></span><br><span class="line">        <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity); <span class="comment">// 保证容量一定为 2 的幂次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>负载因子越大则散列表的装填程度越高也就是能容纳更多的元素，元素多了，链表大了，所以此时<strong>索引效率就会降低</strong>。 </p><p>负载因子越小则链表中的数据量就越稀疏，此时会对<strong>空间造成浪费</strong>，但是此时索引效率高。</p></blockquote><div class="note info simple"><p>扩容大小</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 如果当前节点是 树 节点就按照树节点插入数据</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则就为 链表节点 ，按照尾插法插入数据</span></span><br><span class="line">                <span class="comment">//JDK1.8的链表插入元素为什么改为了尾插法，</span></span><br><span class="line">                <span class="comment">//则是为了避免出现逆序且链表死循环的问题（JDK1.7的HashMap扩容导致死循环）</span></span><br><span class="line">                <span class="comment">// 。。。省略实现</span></span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount; <span class="comment">// 修改次数</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold) <span class="comment">// 先 put 元素在 扩容</span></span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ---------------------------扩容实现核心---------------</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 记录扩容前的数组长度 和 容量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">        <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 超过最大值无能为力</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// 扩容为原来的两倍</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 。。。。。。</span></span><br><span class="line">    <span class="comment">// 跟新容量和长度</span></span><br><span class="line">        threshold = newThr; </span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历老数组 </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 当前索引只有一个元素 ， 直接重新计算Hash下标索引</span></span><br><span class="line">                    oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">// 树结构处理</span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; </span><br><span class="line">                        <span class="comment">// 链表结构处理</span></span><br><span class="line">                        <span class="comment">// 循环链表中的元素，计算是新索引还是老索引</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">// -------------------------------红黑树扩容情况--------------------</span></span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; b = <span class="built_in">this</span>; <span class="comment">// 调用方法的原始节点</span></span><br><span class="line">            <span class="comment">// 扩容就两位置 原索引 原索引+oldCap</span></span><br><span class="line">            TreeNode&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">            TreeNode&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历整棵树</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="literal">null</span>; e = next) &#123;</span><br><span class="line">               <span class="comment">// 拿到所有节点 重新计算hash</span></span><br><span class="line">                <span class="comment">//.....</span></span><br><span class="line">                <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD) <span class="comment">// 节点个数 &lt;= 6改成链表</span></span><br><span class="line">                        tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index + bit] = hiHead;</span><br><span class="line">                    <span class="keyword">if</span> (loHead != <span class="literal">null</span>)</span><br><span class="line">                        <span class="comment">// 重新构建红黑树</span></span><br><span class="line">                        hiHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="HashTable和HashMap区别"><a href="#HashTable和HashMap区别" class="headerlink" title="HashTable和HashMap区别"></a>HashTable和HashMap区别</h1><ol><li>继承的父类不同 Hashtable继承自Dictionary类，而HashMap继承自AbstractMap类。</li><li>线程安全性不同</li></ol><p>Hashtable 中的方法是Synchronize的，而HashMap中的方法在缺省情况下是非Synchronize的。</p><ol><li>key和value是否允许null值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#################### hashMap #####################</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123; <span class="comment">//自定义的hash算法</span></span><br><span class="line">           <span class="type">int</span> h;</span><br><span class="line">           <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">       &#125;</span><br><span class="line">#################### hashtable #####################</span><br><span class="line">       <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();  <span class="comment">//直接用object提供的hashcode方法,所以key不能为null</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line"><span class="keyword">if</span> (value == <span class="literal">null</span>) &#123; <span class="comment">// 在put元素是也判断了value</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ol><li>内部实现使用的数组初始化和扩容方式不同 </li></ol><p>Hashtable扩容时，<strong>将容量变为原来的2倍加1</strong>，而HashMap扩容时，<strong>将容量变为原来的2倍</strong>。 Hashtable和HashMap它们两个内部实现方式的数组的初始大小和扩容的方式。HashTable中hash数组默认大小是11，增加的方式是 old*2+1。</p><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><div class="tip sync"><p>底层数据结构</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 底层数据为hashMap</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E, Object&gt; map;</span><br><span class="line"><span class="comment">// HashSet的所有元素的Value值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">// 去重的原因就是 判断插入元素返回的值是否为null</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">// map在 put相同元素时产生Hash冲突，返回被覆盖的元素值</span></span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><div class="tip sync"><p>核心构造函数</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                             <span class="type">float</span> loadFactor, </span></span><br><span class="line"><span class="params">                         <span class="type">int</span> concurrencyLevel)</span> &#123; <span class="comment">// 并发级别</span></span><br><span class="line">        <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">            initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">long</span>)(<span class="number">1.0</span> + (<span class="type">long</span>)initialCapacity / loadFactor);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> (size &gt;= (<span class="type">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">            MAXIMUM_CAPACITY : tableSizeFor((<span class="type">int</span>)size);</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>concurrencyLevel</strong>：并行级别、并发数、Segment 数，怎么翻译不重要，理解它。默认是 16，也就是说 ConcurrentHashMap 有 16 个 Segments，所以理论上，这个时候，最多可以同时支持 16 个线程并发写，只要它们的操作分别分布在不同的 Segment 上。这个值可以在初始化的时候设置为其他值，但是一旦初始化以后，它是不可以扩容的。</p></blockquote><div class="tip sync"><p>currenthashmap是如何保证并发的</p></div><blockquote><p>JDK8中彻底放弃了Segment转而采用的是Node，其设计思想也不再是JDK1.7中的分段锁思想。</p><p>Node：保存key，value及key的hash值的数据结构。其中value和next都用volatile修饰，保证并发的可见性。 </p><p>Java8 ConcurrentHashMap结构基本上和Java8的HashMap一样，不过保证线程安全性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在高版本的JDK中，抛弃了桶设计，大量使用了 CAS + Volatile + Synchronized来实现并发安全</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh; K fk; V fv;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value)))</span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (onlyIfAbsent <span class="comment">// check first node without acquiring lock</span></span><br><span class="line">                     &amp;&amp; fh == hash</span><br><span class="line">                     &amp;&amp; ((fk = f.key) == key || (fk != <span class="literal">null</span> &amp;&amp; key.equals(fk)))</span><br><span class="line">                     &amp;&amp; (fv = f.val) != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> fv;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果元素 CAS 插入失败 则采用 Synchronized 锁</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="comment">// 。。。。。。</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount); <span class="comment">// 容量加一也用到了CAS</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h2><div class="table-container"><table><thead><tr><th>特性/集合类</th><th>HashMap</th><th>Hashtable</th><th>ConcurrentHashMap</th></tr></thead><tbody><tr><td>线程安全</td><td>否</td><td>是，基于方法锁</td><td>是，基于分段锁</td></tr><tr><td>继承关系</td><td>AbstractMap</td><td>Dictionary</td><td>AbstractMap，ConcurrentMap</td></tr><tr><td>允许null值</td><td>K-V都允许</td><td>K-V都不允许</td><td>K-V都不允许</td></tr><tr><td>默认初始容量</td><td>16</td><td>11</td><td>16</td></tr><tr><td>默认加载因子</td><td>0.75</td><td>0.75</td><td>0.75</td></tr><tr><td>扩容后容量</td><td>原来的两倍</td><td>原来的两倍加1</td><td>原来的两倍</td></tr><tr><td>是否支持fail-fast</td><td>支持</td><td>不支持</td><td>fail-safe</td></tr></tbody></table></div><h1 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h1><p><code>ConcurrentSkipListMap</code>是线程安全的有序的哈希表，适用于高并发的场景。<br><code>ConcurrentSkipListMap</code> 和<code>TreeMap</code>，它们虽然都是有序的哈希表。也有不同点</p><p>第一，它们的线程安全机制不同，<code>TreeMap</code>是非线程安全的，而<code>ConcurrentSkipListMap</code>是线程安全的。</p><p>第二，<code>ConcurrentSkipListMap</code>是通过跳表实现的，而<code>TreeMap</code>是通过红黑树实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码的注释     </span></span><br><span class="line"> * Here<span class="string">&#x27;s the sequence of events for a deletion of node n with</span></span><br><span class="line"><span class="string">    * predecessor b and successor f, initially:</span></span><br><span class="line"><span class="string">    *</span></span><br><span class="line"><span class="string">    *        +------+       +------+      +------+</span></span><br><span class="line"><span class="string">    *   ...  |   b  |------&gt;|   n  |-----&gt;|   f  | ...</span></span><br><span class="line"><span class="string">    *        +------+       +------+      +------+</span></span><br><span class="line"><span class="string">    *</span></span><br><span class="line"><span class="string">    * 1. CAS n&#x27;</span>s value field from non-<span class="literal">null</span> to <span class="literal">null</span>.</span><br><span class="line">    *    Traversals encountering a node with <span class="literal">null</span> value ignore it.</span><br><span class="line">    *    However, ongoing insertions and deletions might still modify</span><br><span class="line">    *    n<span class="string">&#x27;s next pointer.</span></span><br><span class="line"><span class="string">    *</span></span><br><span class="line"><span class="string">    * 2. CAS n&#x27;</span>s next pointer to point to a <span class="keyword">new</span> <span class="title class_">marker</span> node.</span><br><span class="line">    *    From <span class="built_in">this</span> point on, no other nodes can be appended to n.</span><br><span class="line">    *    which avoids deletion errors in CAS-based linked lists.</span><br><span class="line">    *</span><br><span class="line">    *        +------+       +------+      +------+       +------+</span><br><span class="line">    *   ...  |   b  |------&gt;|   n  |-----&gt;|marker|------&gt;|   f  | ...</span><br><span class="line">    *        +------+       +------+      +------+       +------+</span><br><span class="line">    *</span><br><span class="line">    * <span class="number">3.</span> CAS b<span class="string">&#x27;s next pointer over both n and its marker.</span></span><br><span class="line"><span class="string">    *    From this point on, no new traversals will encounter n,</span></span><br><span class="line"><span class="string">    *    and it can eventually be GCed.</span></span><br><span class="line"><span class="string">    *        +------+                                    +------+</span></span><br><span class="line"><span class="string">    *   ...  |   b  |-----------------------------------&gt;|   f  | ...</span></span><br><span class="line"><span class="string">    *        +------+                                    +------+</span></span><br></pre></td></tr></table></figure><blockquote><p>插入和删除操作都是利用CAS进行，如果过程中发生竞争，当前线程将重试操作，直到成功为止。</p></blockquote><p>ConcurrentSkipListMap内部采用了SkipList数据结构实现，使用三个内部类来构建这样的结构：</p><p><code>Node</code>、<code>Index</code>、<code>HeadIndex</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* Head nodes          Index nodes</span><br><span class="line">* +-+    right        +-+                      +-+</span><br><span class="line">* |<span class="number">2</span>|----------------&gt;| |---------------------&gt;| |-&gt;<span class="literal">null</span></span><br><span class="line">* +-+                 +-+                      +-+</span><br><span class="line">*  | down              |                        |</span><br><span class="line">*  v                   v                        v</span><br><span class="line">* +-+            +-+  +-+       +-+            +-+       +-+</span><br><span class="line">* |<span class="number">1</span>|-----------&gt;| |-&gt;| |------&gt;| |-----------&gt;| |------&gt;| |-&gt;<span class="literal">null</span></span><br><span class="line">* +-+            +-+  +-+       +-+            +-+       +-+</span><br><span class="line">*  v              |    |         |              |         |</span><br><span class="line">* Nodes  next     v    v         v              v         v</span><br><span class="line">* +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+</span><br><span class="line">* | |-&gt;|A|-&gt;|B|-&gt;|C|-&gt;|D|-&gt;|E|-&gt;|F|-&gt;|G|-&gt;|H|-&gt;|I|-&gt;|J|-&gt;|K|-&gt;<span class="literal">null</span></span><br><span class="line">* +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+</span><br></pre></td></tr></table></figure><ul><li>index nodes 和 head nodes 基于Node节点的索引，提供向下和向右的索引</li><li>head nodes 比 Index nodes 多了一个level来表示层级</li></ul><h1 id="LinkedHashMap实现LRU"><a href="#LinkedHashMap实现LRU" class="headerlink" title="LinkedHashMap实现LRU"></a>LinkedHashMap实现LRU</h1><div class="tip sync"><p>介绍LinkedHashMap维护的两种顺序，插入顺序和访问顺序</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> LinkedHashMap&lt;String, String&gt; linkedHashMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(<span class="number">16</span>,<span class="number">0.75f</span>,<span class="literal">true</span>);;</span><br><span class="line">        linkedHashMap.put(<span class="string">&quot;f&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">&quot;s&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;插入顺序：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; item : linkedHashMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(item.getKey() + <span class="string">&quot;: =&gt;&quot;</span> + item.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;访问顺序：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; item : linkedHashMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(item.getKey() + <span class="string">&quot;: =&gt;&quot;</span> + item.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插入顺序：<br>f: =&gt;1<br>s: =&gt;2<br>t: =&gt;3<br>访问顺序：<br>f: =&gt;1<br>s: =&gt;2<br>t: =&gt;3</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashMap&lt;String, String&gt; linkedHashMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(<span class="number">16</span>,<span class="number">0.75f</span>,<span class="literal">true</span>);</span><br><span class="line">       linkedHashMap.put(<span class="string">&quot;f&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">       linkedHashMap.put(<span class="string">&quot;s&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">       linkedHashMap.put(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;插入顺序：&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; item : linkedHashMap.entrySet()) &#123;</span><br><span class="line">           System.out.println(item.getKey() + <span class="string">&quot;: =&gt;&quot;</span> + item.getValue());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       linkedHashMap.get(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;访问顺序：&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; item : linkedHashMap.entrySet()) &#123;</span><br><span class="line">           System.out.println(item.getKey() + <span class="string">&quot;: =&gt;&quot;</span> + item.getValue());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>插入顺序：<br>f: =&gt;1<br>s: =&gt;2<br>t: =&gt;3<br>访问顺序：<br>f: =&gt;1<br>t: =&gt;3<br>s: =&gt;2</p></blockquote><div class="tip sync"><p>实现代码</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRULinkedHashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cap; <span class="comment">// 缓存容量</span></span><br><span class="line"></span><br><span class="line">    LRULinkedHashMap(<span class="type">int</span> cap)&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">16</span>,<span class="number">0.75f</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.cap = cap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 集合容量大于缓存，就删除顶端元素</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; cap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环引用</title>
      <link href="/2023/02/05/computer-science/java/spring5/CycleUsing/"/>
      <url>/2023/02/05/computer-science/java/spring5/CycleUsing/</url>
      
        <content type="html"><![CDATA[<h1 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h1><ul><li>代码出现两个bean在创建时都相互引用了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(B b)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(A a)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(Springboot.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>我们在向容器获取A对象是出错了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">The dependencies of some of the beans in the application context form a cycle:</span><br><span class="line"></span><br><span class="line">┌─────┐</span><br><span class="line">|  a defined in file [D:\download\SpringBoot\springboot_demo05\target\classes\com\panther\springboot\mycompoent\A.class]</span><br><span class="line">↑     ↓</span><br><span class="line">|  b defined in file [D:\download\SpringBoot\springboot_demo05\target\classes\com\panther\springboot\mycompoent\B.class]</span><br><span class="line">└─────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Relying upon circular references is discouraged and they are prohibited by default. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to break the cycle automatically by setting spring.main.allow-circular-references to true.</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><div class="tip home"><p>自己创建对象，不使用IOC自动注入</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(B b)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(B b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> B <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(A a)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(A a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> A <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(<span class="string">&quot;logger&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object a = run.getBean(&quot;a&quot;);</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line"></span><br><span class="line">        b.setA(a);</span><br><span class="line">        a.setB(b);</span><br><span class="line">        logger.info(String.valueOf(a.getB() == b)); <span class="comment">//true</span></span><br><span class="line">        logger.info(String.valueOf(b.getA() == a)); <span class="comment">//true</span></span><br><span class="line">        logger.info(String.valueOf(a.getB()); <span class="comment">//com.panther.test@B5947</span></span><br><span class="line">        logger.info(String.valueOf(b.getA()); <span class="comment">//com.panther.test@A5945</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="tip key"><p>DEBUG分析</p></div><p><img src="https://pic.imgdb.cn/item/63e384c34757feff33693fab.png" alt=""></p></li><li><p>发现在<code>new</code> a和b时 属性都是空的<br><img src="https://pic.imgdb.cn/item/63e385a64757feff336ac575.png" alt=""></p></li><li>向下继续运行时，好像还是产生了循环依赖，但为什么a.getB()能输出B的实体类</li><li>有点懵逼。。。<div class="tip sync"><p>百度的拼凑版本解释： jvm在<code>new</code>一个对象时，并不会创建这个对象，只是向内存申请了一段空间，属于半初始化的实体类。</p></div><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><div class="tip home"><p>Spring框架提供的解决办法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(B b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(A a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(Springboot.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> run.getBean(A.class);</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> run.getBean(B.class);</span><br><span class="line"></span><br><span class="line">        logger.info(String.valueOf(a.getB() == b)); <span class="comment">//true</span></span><br><span class="line">        logger.info(String.valueOf(b.getA() == a)); <span class="comment">//true</span></span><br><span class="line">        logger.info(b.getA());<span class="comment">//com.panther.springboot.test.A@27e7c77f</span></span><br><span class="line">        logger.info(a.getB());<span class="comment">//com.panther.springboot.test.B@6f70a21b</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li>开启循环引用配置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.main.allow-circular-references:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>spring 引入三级缓存去解决循环引用<div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><ol><li><p><strong>一级缓存</strong> singletonObjects: 主要存放的是已经完成实例化、属性填充和初始化所有步骤的单例Bean实例，这样的Bean能够直接提供给用户使用，我们称之为终态Bean或叫成熟Bean。</p></li><li><p><strong>二级缓存</strong> earlySingletonObjects: 主要存放的已经完成初始化但属性还没自动赋值的Bean，这些Bean还不能提供用户使用，只是用于提前暴露的Bean实例，我们把这样的Bean称之为临时Bean或早期的Bean（半成品Bean） </p></li><li><strong>三级缓存</strong> singletonFactories: 存放的是ObjectFactory的匿名内部类实例，调用ObjectFactory.getObject()最终会调用getEarlyBeanReference方法，该方法可以获取提前暴露的单例bean引用。</li></ol></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一级缓存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三级缓存 map中存放早期半初始化的的bean，并提前暴露</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二级缓存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br></pre></td></tr></table></figure><strong>过程</strong></li></ul><blockquote><p>我们假设现在有这样的场景AService依赖BService，BService依赖AService</p><ol><li>一开始加载AService Bean首先依次从一二三级缓存中查找<strong>是否存在beanName=AService的对象</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> transformedBeanName(name);</span><br><span class="line"><span class="comment">// 1.尝试从缓存中获取bean，AService还没创建三级缓存都没命中</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">sharedInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br></pre></td></tr></table></figure><ol><li>三级缓存都没命中于是走到<strong>创建Bean代码逻辑</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将当前beanName放到singletonsCurrentlyInCreation 集合中，标识该bean正在创建</span></span><br><span class="line">beforeSingletonCreation(beanName);</span><br><span class="line"><span class="comment">//通过回调getObject()方法触发AbstractAutowireCapableBeanFactory#createBean(String beanName, RootBeanDefinition mbd, Object[] args)的执行</span></span><br><span class="line">singletonObject = singletonFactory.getObject();</span><br><span class="line">afterSingletonCreation(beanName);</span><br><span class="line"><span class="comment">// 此时Key为AService，value是ObjectFactory类型一个匿名内部类对象放入三级缓存中</span></span><br><span class="line">addSingleton(beanName, singletonObject);</span><br></pre></td></tr></table></figure><ol><li>继续对AService进行属性填充（依赖注入），这时发现AService依赖BService。于是又依次从一二三级缓存中查询<strong>BService Bean，没找到</strong>，于是又按照上述的流程实例化BService，将以<strong>Key为BService，value是ObjectFactory类型一个匿名内部类对象放入三级缓存中</strong>。</li></ol><ol><li><strong>这时发现BService又依赖AService</strong>。于是依次在一二三级缓存中查找AService。</li></ol><ol><li><strong>在三级缓存中查到之前放入的以 Key 为 AService</strong>，如果没AOP切面对 AService 进行拦截，这时返回的将是AService实例本身，<strong>将半成品 AService Bean放入二级缓存并将 Key 为AService从三级缓存中删除</strong>。 这样实现了提前将 AService Bean 曝光给BService完成属性依赖注入。继续走BService后续初始化逻辑，<strong>最后生产了成熟的BService Bean实例。</strong></li></ol><ol><li>接着原路返回，AService也成功获取到依赖BService实例，完成后续的初始化工作，然后完美的解决了循环依赖的问题。</li></ol><p><strong>完整流程图</strong></p><p><img src="https://oss.gincode.icu/pics/6402.png" alt="图片"></p></blockquote><ul><li>如果A实现类AOP增强可以发现bservice实体类里的A属性是一个代理对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">            <span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> createProxy(</span><br><span class="line">                    bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> <span class="title class_">SingletonTargetSource</span>(bean));</span><br><span class="line">            <span class="built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><div class="tip home"><p>自己写一个代理去解决</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspectJ</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.panther.springboot.mycompoent.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="为什么只支持单例"><a href="#为什么只支持单例" class="headerlink" title="为什么只支持单例"></a>为什么只支持单例</h3><p>Spring循环依赖的解决方案主要是通过对象的提前暴露来实现的。当一个对象在创建过程中需要引用到另一个正在创建的对象时，Spring会先提前暴露一个尚未完全初始化的对象实例，以解决循环依赖的问题。这个尚未完全初始化的对象实例就是半成品对象。</p><p>在 Spring 容器中，单例对象的创建和初始化只会发生一次，并且在容器启动时就完成了。这意味着，在容器运行期间，单例对象的依赖关系不会发生变化。因此，可以通过提前暴露半成品对象的方式来解决循环依赖的问题。</p><p>相比之下，原型对象的创建和初始化可以发生多次，并且可能在容器运行期间动态地发生变化。因此，对于原型对象，提前暴露半成品对象并不能解决循环依赖的问题，因为在后续的创建过程中，可能会涉及到不同的原型对象实例，无法像单例对象那样缓存并复用半成品对象。</p><p>因此，Spring只支持通过单例对象的提前暴露来解决循环依赖问题。</p><h3 id="为什么不支持构造函数注入"><a href="#为什么不支持构造函数注入" class="headerlink" title="为什么不支持构造函数注入"></a>为什么不支持构造函数注入</h3><p>Spring无法解决构造函数的循环依赖，是因为在对象实例化过程中，构造函数是最先被调用的，而此时对象还未完成实例化，无法注入一个尚未完全创建的对象，因此Spring容器无法在构造函数注入中实现循环依赖的解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassB classB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassA</span><span class="params">(<span class="meta">@Lazy</span> ClassB classB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classB = classB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassA classA;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassB</span><span class="params">(ClassA classA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classA = classA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在属性注入中，Spring容器可以通过先创建一个空对象或者提前暴露一个半成品对象来解决循环依赖的问题。但在构造函数注入中，对象的实例化是在构造函数中完成的，这样就无法使用类似的方式解决循环依赖问题了。</p><p> 如何解决构造器注入的循环依赖 </p><p>构造器注入的循环依赖，可以通过一定的手段解决。</p><p>1、重新设计，彻底消除循环依赖</p><p>循环依赖，一般都是设计不合理导致的，可以从根本上做一些重构，来彻底解决，</p><p>2、改非构造器注入</p><p>可以改成setter注入或者字段注入。</p><p>3、使用@Lazy解决</p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客小白月赛65</title>
      <link href="/2023/01/06/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/newcode1/"/>
      <url>/2023/01/06/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/newcode1/</url>
      
        <content type="html"><![CDATA[<h1 id="题-A"><a href="#题-A" class="headerlink" title="题 A"></a>题 A</h1><details class="folding-tag" ><summary> 题A </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">错解</button></li><li class="tab"><button type="button" data-href="#sw-registry-3">题 解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class="note info simple"><p>牛牛带着 n 元钱去超市买东西，超市一共只有两款商品，<br>价格为 a 元的篮球和价格为 b 元的足球，<br>牛牛想把手里的钱尽可能花光，请问牛牛最少能剩多少钱？</p></div>输入描述:<div class="note info simple"><p>输入一行，三个正整数 n,a,b(1 &lt;= n,a,b &lt;= 1000)n,a,b(1≤n,a,b≤1000)，<br>n 表示牛牛现有的钱数，a 表示一个篮球的单价，b 表示一个足球的单价。</p></div>输出描述:<div class="note info simple"><p>输出一行一个整数，代表牛牛最少能剩下的钱数。</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">  7 5 3</span><br><span class="line">输出</span><br><span class="line">  1</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>考虑太多反而错了</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">s1</span> <span class="operator">=</span> process1(money,b,f);</span><br><span class="line">        <span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> process1(money,f,b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s1 &gt;= f)&#123;</span><br><span class="line">            s1 = process1(s1,f,b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         <span class="keyword">if</span>(s2 &gt;= b)&#123;</span><br><span class="line">            s2 = process1(s2,b,f);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(s1 &gt; s2 ? s2 : s1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process1</span><span class="params">(<span class="type">int</span> money, <span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(money % y == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">if</span>(money &lt; x)&#123;</span><br><span class="line">            <span class="keyword">return</span> money;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> process1(money - x, x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-3"><p><div class="tip sync"><p>语言：Java 代码长度：390 运行时间： 44 ms 占用内存：10572K</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">     Scanner in=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">     <span class="type">int</span> n=in.nextInt();</span><br><span class="line">     <span class="type">int</span> a=in.nextInt();</span><br><span class="line">     <span class="type">int</span> b=in.nextInt();</span><br><span class="line">     <span class="comment">// 初始化剩余最小值min</span></span><br><span class="line">     <span class="type">int</span> min=n;</span><br><span class="line">     <span class="type">int</span> p=n/a;</span><br><span class="line">    <span class="comment">// 将所有的钱分成可以买a的所有次数</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=p;i++)&#123;</span><br><span class="line">        <span class="comment">// 买i个a剩下的全买b看看剩下的钱是不是比min小</span></span><br><span class="line">         <span class="type">int</span> temp=(n-a*i)/b;</span><br><span class="line">         <span class="type">int</span> res=n-a*i-b*temp;</span><br><span class="line">         <span class="comment">// 跟新最小值</span></span><br><span class="line">         min=min&gt;res?res:min;</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(min);</span><br><span class="line"> &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-B"><a href="#题-B" class="headerlink" title="题 B"></a>题 B</h1><details class="folding-tag" ><summary> 题 B </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题 B</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">自解</button></li><li class="tab"><button type="button" data-href="#sw-registry-3">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><p>牛牛给牛妹写了一封情书（仅包含小写字母aa到zz），但是被牛可乐截获了，由于牛可乐也喜欢牛妹，所以往这份情书里增加了许多数字和特殊字符（也可以不加），最后收到情书的牛妹想知道原本的情书是否包含某个字符串 kk。如果包含则输出 YES，否则输出 NO。</p><p>包含指 kk 是原本情书的子串，子串即任意连续的字符构成的子字符串，<br>例如对于字符串 abcdefgabcdefg，” abdabd “，” acgacg “，” afeafe” 不是该字符串的子串，” abcabc “，” cdecde “是该字符串的子串。</p><p>牛可乐添加的数字和特殊字符仅包含以下这些：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0123456789+-*|,.~!@#$%^&amp;()[]&#123;&#125;&#x27;&quot;;:?&lt;&gt;/\</span><br></pre></td></tr></table></figure><br>输入描述:</p><div class="note info simple"><p>第一行输入两个正整数 n,m(1≤n,m≤5×10^3) ，<br>n 表示字符串 s 的长度，m 表示字符串 k 的长度。<br>第二行输入一个字符串 s ，代表牛妹最后收到的情书。<br>第三行输入一个字符串 k ，代表牛妹想知道原本的情书是否包含的单词。<br>保证 s 和 k 中都不包含空格。</p></div>输出描述:<div class="note info simple"><p>输出一行一个YES或者NO代表答案。</p></div><div class="note simple"><ul><li>案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">  25 4</span><br><span class="line">  niu1niun\|olo5ve,ni+um/ei</span><br><span class="line">  love</span><br><span class="line">输出：</span><br><span class="line">  YES</span><br></pre></td></tr></table></figure></li></ul></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>语言：Java 代码长度：750 运行时间： 129 ms 占用内存：13852K</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.next();</span><br><span class="line">        <span class="type">String</span> <span class="variable">k</span> <span class="operator">=</span> in.next();</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">fu</span> <span class="operator">=</span> <span class="string">&quot;0123456789+-*|,.~!@#$%^&amp;()[]&#123;&#125;&#x27;\&quot;;:?&lt;&gt;\\/&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">newstr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 将原字符串中存在符号的变成空字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> temp : chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fu.contains(temp+<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newstr += temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(newstr.contains(k))&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             System.out.print(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-3"><p><div class="tip sync"><p>语言：Java 代码长度：519 运行时间： 69 ms 占用内存：11496K</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">     Scanner in=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">     <span class="type">int</span> n=in.nextInt();</span><br><span class="line">     <span class="type">int</span> m=in.nextInt();</span><br><span class="line"></span><br><span class="line">     String s=in.next(),k=in.next();</span><br><span class="line">     StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">          <span class="comment">// 提取原字符串中的小写字符</span></span><br><span class="line">         <span class="keyword">if</span>(s.charAt(i)&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s.charAt(i)&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">             sb.append(s.charAt(i));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(sb.toString().contains(k))&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-C"><a href="#题-C" class="headerlink" title="题 C"></a>题 C</h1><details class="folding-tag" ><summary> 题 C </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题 C</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><p>有 n 个人排队，1 号排在 2 号前面，2 号排在 3 号前面，…，以此类推 n-1 号排在<br>n 号前面。在这个过程中，偶尔老师会把某个人叫走，叫走之后这个人就离开了队伍，<br>假设本来 a 排在 b 前面，b 排在 c 前面，b 被叫走后 a 就排在了 c 前面。<br>老师偶尔也会感到疑问，她想知道此时排在 a 号前面的同学是几号呢？<br>已知老师一共会有 k 次操作，每次会执行下面的一种：</p><ol><li>把 x 叫走。</li><li>求排在 x 前面的是谁。<div class="note info simple"><p>第一行输入两个正整数 n,k(1≤n,k≤10^6) 。<br>n 表示排队人数，k 表示老师的操作次数。<br>接下来 k 行，每行包含 2 个整数，表示一个操作，具体如下：<br>1 x ：把 x 叫走，保证此时 x 一定在队伍里<br>2 x ：输出排在 x 前面的人的编号，保证此时 x 一定在队伍里，如果没有人排在 x 前面，输出 0 。(1≤x≤n)</p></div>输入描述：<div class="note info simple"><p>5 4<br>2 1<br>1 3<br>2 5<br>2 4</p></div>输出：<div class="note info simple"><p>0<br>4<br>2</p></div></li></ol><ul><li>说明 只输出执行2的结果 </li><li>1 3 移除 3 需要判断3在队列中</li><li>2 5 输出 5 前面的数值</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>语言：Java 代码长度：833 运行时间： 2962 ms 占用内存：117724K</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        <span class="comment">// 二维数组记录每个数值的前一个数和后一个数，第一个值为0</span></span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            a[i][<span class="number">0</span>] = i - <span class="number">1</span>;</span><br><span class="line">            a[i][<span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>(k -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">op</span> <span class="operator">=</span> sc.nextInt(), x = sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> a[x][<span class="number">0</span>], next = a[x][<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 判断前面是否有数，prev等于-1时为第一个数</span></span><br><span class="line">                <span class="keyword">if</span>(prev &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="comment">//更新前一个数的next等于移除数的next</span></span><br><span class="line">                    a[prev][<span class="number">1</span>] = next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断后面是否有数，next等于5时为最后一个数</span></span><br><span class="line">                <span class="keyword">if</span>(next &lt; n)&#123;</span><br><span class="line">                  <span class="comment">// 更新后一个数的perv等于移除数的perv</span></span><br><span class="line">                    a[next][<span class="number">0</span>] = prev;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(a[x][<span class="number">0</span>] + <span class="number">1</span>).append(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="题-D"><a href="#题-D" class="headerlink" title="题 D"></a>题 D</h1><details class="folding-tag" ><summary> 题 D </summary>              <div class='content'>              <div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">题目描述</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">题解</button></li><li class="tab"><button type="button" data-href="#sw-registry-3">减少运行时间技巧</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><p>牛牛和牛妹在玩游戏，他们的游戏规则是这样的：<br>一共有两堆石子，第一堆有 a 个，第二堆有 b 个，<br>牛牛和牛妹轮流取石子，牛牛先手，每次取石子的时候只能从以下 2<br>种方案种挑一种来取（对于选择的方案数必须保证当前石子 ≥ 取的石子个数才能取）：</p><ol><li>第一堆取 1 个，第二堆取 2 个</li><li>第一堆取 2 个，第二堆取 1 个<br>谁先无法取石子，谁就输了。假设牛牛和牛妹都很聪明，请问谁会获胜？<br>输入描述:<div class="note info simple"><p>第一行输入一个正整数 T(1≤T≤10^5) ，代表数据组数。<br>接下来 T 行，每行输入两个整数 a,b(1≤a,b≤10^18) 代表两堆石子的数量。</p></div>输出描述:<div class="note info simple"><p>对于每组数据，输出一行，代表胜利者的名字<br>（牛牛获胜输出niuniu，牛妹获胜输出niumei）。</p></div>实例：<div class="note info simple"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">  2</span><br><span class="line">  1 2</span><br><span class="line">  3 3</span><br><span class="line">输出：</span><br><span class="line">  niuniu</span><br><span class="line">  niumei</span><br></pre></td></tr></table></figure></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="tip sync"><p>仔细思考题目可以发现，牛妹可以让石子数量始终减3<br>当石子数量是3的倍数时，牛牛先手的话，始终是牛妹赢<br>特殊情况，当两堆石子相同时，牛牛可以先拿一堆的第一个从而使牛妹成为先手</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">test</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (test--&gt;<span class="number">0</span>) &#123; </span><br><span class="line">            <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> in.nextLong();</span><br><span class="line">            <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> in.nextLong();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">                <span class="keyword">if</span>((a-<span class="number">1</span>)%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;niumei&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> Math.min(a,b);</span><br><span class="line">            <span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;niumei&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                 System.out.println(<span class="string">&quot;niuniu&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-3"><p><div class="tip sync"><p>众所周知IO是最影响性能的因素，不使用java提供的输出和输入<br>自己写输入输出的IO流</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> Integer.parseInt(reader.readLine());</span><br><span class="line">        <span class="keyword">while</span> (T--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            String[] s = reader.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> Long.parseLong(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> Long.parseLong(s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">                <span class="keyword">if</span>((a-<span class="number">1</span>)%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    writer.write(<span class="string">&quot;niumei\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> Math.min(a,b);</span><br><span class="line">            <span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">0</span>)writer.write(<span class="string">&quot;niumei\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> writer.write(<span class="string">&quot;niuniu\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩玩爬虫</title>
      <link href="/2022/12/29/ArrayList/spider/"/>
      <url>/2022/12/29/ArrayList/spider/</url>
      
        <content type="html"><![CDATA[<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><div class="tip home"><p>pip install urllib </p></div><ul><li>测试<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义访问的url</span></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器发请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取状态码判断请求是否成功</span></span><br><span class="line"><span class="comment"># print(response.getcode())  #200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(response)  # &lt;http.client.HTTPResponse object at 0x0000017DC4629A30&gt;</span></span><br><span class="line"><span class="comment"># 获取相应源码  read方法返回二进制 需要解码</span></span><br><span class="line"><span class="comment"># content = response.read().decode(&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># 按行读取</span></span><br><span class="line">content = response.readlines()</span><br><span class="line"><span class="built_in">print</span>(content) <span class="comment"># 输出网站源码</span></span><br></pre></td></tr></table></figure></li><li><strong>但是遇到https的网站还是会报错，加上UA就能正常读取了</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url_page = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟用户请求</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将中文变成unicode编码</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;中国台湾&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">params = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求对象的创建 添加user-agent</span></span><br><span class="line">request = urllib.request.Request(url=url_page + params, headers=headers)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content) <span class="comment">#输出网站源码</span></span><br></pre></td></tr></table></figure></li><li><strong>保存图片、音频及视频文件</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义访问的url</span></span><br><span class="line"><span class="comment"># url_page = &#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">url_img = <span class="string">&#x27;https://img1.baidu.com/it/u=2835220188,4227150300&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=585&#x27;</span></span><br><span class="line"><span class="comment">#url_video = &#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment"># 下载资源</span></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url_img, &#x27;./raw/baidu.html&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片资源,第二个参数是文件路径</span></span><br><span class="line">urllib.request.urlretrieve(url_img, <span class="string">&#x27;./raw/lisa.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><span class='p center logo large'>ip代理池</span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;http://baidu.com/s?wd=ip&#x27;</span></span><br><span class="line"><span class="comment"># 封装请求</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;__qc_wId=865; JSESSIONID=D06865AF09CD9D619CA1930C9EC055A6&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=base_url, headers=header)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理ip池</span></span><br><span class="line">proxies_pool = [</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;120.24.76.81:8123&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;120.24.76.81:8124&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机从代理池中取代理ip</span></span><br><span class="line">proxies = random.choice(proxies_pool)</span><br><span class="line"></span><br><span class="line"><span class="comment"># handler bulider_opener open 使用这三个替换urlopen可获得更多的操作</span></span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=proxies)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h2 id="综合练习（百度翻译）"><a href="#综合练习（百度翻译）" class="headerlink" title="综合练习（百度翻译）"></a>综合练习（百度翻译）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span>  <span class="comment"># 简单翻译</span></span><br><span class="line"><span class="comment"># 详细翻译</span></span><br><span class="line"><span class="comment"># base_url = &#x27;https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    english = <span class="built_in">input</span>(<span class="string">&#x27;请输入要翻译的单词&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;kw&#x27;</span>: english</span><br><span class="line">    &#125;</span><br><span class="line">    data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data 为接口的表单数据 用于post请求 必须编码 get请求需要与url拼接 无需编码</span></span><br><span class="line">    request = urllib.request.Request(base_url, data, headers)</span><br><span class="line"></span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line">    result = json.loads(content)</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result[<span class="string">&#x27;data&#x27;</span>]) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(result[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;v&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i donot know&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h1><div class="tip home"><p>获取网站源码，但是也许只需要一类div或者img等,下载xpath进行筛选<br>pip install lxml</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># xpath 解析 本地文件解析etree.parse 服务器文件etree.HTML</span></span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;https://codert.cn/&#x27;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=base_url, headers=header)</span><br><span class="line">handler = urllib.request.HTTPHandler()</span><br><span class="line"></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"><span class="comment"># xpath基本语法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 路径查询</span></span><br><span class="line"><span class="string">    //：查找所有的子孙节点不考虑层级关系</span></span><br><span class="line"><span class="string">    /：直接查找子节点</span></span><br><span class="line"><span class="string">2. 谓词查询</span></span><br><span class="line"><span class="string">    //div[@id]</span></span><br><span class="line"><span class="string">    //div[@id=&quot;management&quot;]</span></span><br><span class="line"><span class="string">3. 熟悉查询</span></span><br><span class="line"><span class="string">    //@class</span></span><br><span class="line"><span class="string">4.模糊查询</span></span><br><span class="line"><span class="string">    //div[contains(&quot;@id&quot;,&quot;he&quot;)]</span></span><br><span class="line"><span class="string">    //div[start_with(&quot;@id&quot;,&quot;he&quot;)]</span></span><br><span class="line"><span class="string">5. 内容查询</span></span><br><span class="line"><span class="string">    //div/h1/text()</span></span><br><span class="line"><span class="string">6. 逻辑运算</span></span><br><span class="line"><span class="string">    //div[@id=&#x27;head&#x27; and @class=&#x27;s_down&#x27;]</span></span><br><span class="line"><span class="string">    //title | //price</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line">result_list = tree.xpath(<span class="string">&#x27;//img/@data-lazy-src&#x27;</span>) <span class="comment">#获取网站懒加载图片地址</span></span><br><span class="line"><span class="comment"># print(len(result_list))</span></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> result_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        urllib.request.urlretrieve(temp,<span class="string">&#x27;./raw/douban/condert&#x27;</span>+<span class="built_in">str</span>(random.randint(<span class="number">1</span>, <span class="number">10000</span>))+<span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;url is fault&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><div class="tip home"><p>下载 pip install requests</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">request属性及类型：</span></span><br><span class="line"><span class="string">    r.text    : 获取网站源码</span></span><br><span class="line"><span class="string">    r.encode : 访问或定制编码方式</span></span><br><span class="line"><span class="string">    r.url    : 获取响应的url</span></span><br><span class="line"><span class="string">    r.content: 响应的字节类型</span></span><br><span class="line"><span class="string">    r.status_code : 响应的状态码</span></span><br><span class="line"><span class="string">    r.header : 响应的头信息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;https://wish.zhangweishihundan.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line">result_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;sbody&quot;]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存在文件中</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./raw/zhangwei/wish.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> result_list:</span><br><span class="line">        fp.write(temp + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><span class='p center logo large'>requests模拟get请求</span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;lisa&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 参数值不需要进行编码</span></span><br><span class="line">response = requests.get(url=url, headers=header, params=data)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">content = response.text</span><br><span class="line"><span class="built_in">print</span>(content) <span class="comment"># 输出网站源码</span></span><br></pre></td></tr></table></figure></li><li><span class='p center logo large'>requests模拟post请求</span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>: <span class="string">&#x27;love&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 参数值不同get请求参数为params post请求data</span></span><br><span class="line">response = requests.post(url=url,data=data,headers=header)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line">content = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(content[<span class="string">&#x27;data&#x27;</span>]) <span class="comment"># 输出love的翻译</span></span><br></pre></td></tr></table></figure><h1 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h1></li><li><span class='p center logo large'>scrapy可以理解为爬虫的框架</span><div class="tip home"><p>在终端输入 scrapy startproject 项目名称 创建新项目</p></div></li></ul><ul><li><ul><li><strong>在spiders文件夹下创建爬虫文件</strong><div class="tip home"><p>在终端进入项目的spiders文件夹下scrapy genspider 文件命 网站</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduSpider</span>(scrapy.Spider):</span><br><span class="line">    <span class="comment"># 爬虫的名字 用于运行爬虫时使用的值</span></span><br><span class="line">    name = <span class="string">&#x27;baidu&#x27;</span></span><br><span class="line"></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.baidu.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.baidu.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行start_urls之后 response 就是返回的那个对象 </span></span><br><span class="line">    <span class="comment"># response 相当于 urllibr.request.urlopen()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li><strong>运行爬虫</strong><div class="tip home"><p>在终端进入项目的spiders文件夹下scrapy crawl 爬虫名字</p></div><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="获取影响联盟英雄皮肤图片"><a href="#获取影响联盟英雄皮肤图片" class="headerlink" title="获取影响联盟英雄皮肤图片"></a>获取影响联盟英雄皮肤图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Date: 2022.11.7</span></span><br><span class="line"><span class="string">Author: panther</span></span><br><span class="line"><span class="string">Language: python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHtml</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(url + <span class="string">&quot;爬取失败！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = r.text</span><br><span class="line">        getInfo(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>(<span class="params">res</span>):</span><br><span class="line">    lists = re.findall(<span class="string">r&#x27;&quot;keys&quot;:(.*?),&quot;data&quot;&#x27;</span>, res)</span><br><span class="line">    <span class="comment"># print(lists)</span></span><br><span class="line">    hero_id = json.loads(lists[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># print(hero_id)</span></span><br><span class="line">    <span class="keyword">for</span> hero <span class="keyword">in</span> hero_id.values():</span><br><span class="line">        getSkin(hero)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSkin</span>(<span class="params">hero</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://lol.qq.com/biz/hero/&#x27;</span> + hero + <span class="string">&#x27;.js&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(url + <span class="string">&quot;爬取失败！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html = r.text</span><br><span class="line">        num = re.findall(<span class="string">r&#x27;&quot;id&quot;:&quot;(\d&#123;4,6&#125;)&quot;,&quot;num&quot;&#x27;</span>, html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">            img_url = <span class="string">&#x27;https://game.gtimg.cn/images/lol/act/img/skin/big&#x27;</span> + num[i] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            save_img(hero, img_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">hero, img_url</span>):</span><br><span class="line">    root = hero + <span class="string">&quot;\\&quot;</span></span><br><span class="line">    path = root + img_url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">            os.mkdir(root)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            r = requests.get(img_url)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(r.content)</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;文件保存成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;文件已存在！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;爬取失败！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(img_url + <span class="string">&quot;已下载&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&quot;https://lol.qq.com/biz/hero/champion.js&quot;</span></span><br><span class="line">    getHtml(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暴力递归</title>
      <link href="/2022/10/27/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92/"/>
      <url>/2022/10/27/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h1><p>暴力递归就是尝试</p><ul><li>把问题转化为规模缩小了的同类问题的子问题</li><li>有明确的不需要继续进行递归的条件（base case）</li><li>有当得到了子问题的结果之后的决策过程</li><li>不记录每一个子问题的解<h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h2></li><li>打印n层汉诺塔从最左边移动到最右边的全部过程(大的塔牌不能在小塔牌上)</li></ul><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        func(n,<span class="string">&quot;左&quot;</span>,<span class="string">&quot;右&quot;</span>,<span class="string">&quot;中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1~i 圆盘目标是from-&gt;to other是另一个</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> i, String start, String end, String other)</span>&#123;</span><br><span class="line">    <span class="comment">//base</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;move 1 from &quot;</span> + start+ <span class="string">&quot; to &quot;</span> + end);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将大规模问题化位小问题</span></span><br><span class="line">        <span class="comment">// 假设现在n层塔牌只有两层 1 和 i-1 层</span></span><br><span class="line">        <span class="comment">// 先把最上面的一大堆n-1左位置移到中位置</span></span><br><span class="line">        func(i-<span class="number">1</span>, start,other,end);<span class="comment">// 左  中  右</span></span><br><span class="line">        <span class="comment">// 将剩下的最大塔牌从左位置移到右位置</span></span><br><span class="line">        System.out.println(<span class="string">&quot;move &quot;</span> + i + <span class="string">&quot; from &quot;</span> + start+ <span class="string">&quot; to &quot;</span> + end);</span><br><span class="line">        <span class="comment">// 将一大堆n-1的塔牌从中位置移到右位置</span></span><br><span class="line">        func(i-<span class="number">1</span>,other,end,start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印一个字符串的全部子序列，包括空字符串"><a href="#打印一个字符串的全部子序列，包括空字符串" class="headerlink" title="打印一个字符串的全部子序列，包括空字符串"></a>打印一个字符串的全部子序列，包括空字符串</h2><p><img src="https://images.cnblogs.com/cnblogs_com/blogs/727157/galleries/2215272/o_221027145539_printAllSubque.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printAllSub</span><span class="params">(String str)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(str == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">       <span class="keyword">if</span>(chars.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;&quot;</span>);   <span class="comment">// pre：表示从0到i-1位置上形成的结果</span></span><br><span class="line">           printAllSub(<span class="number">0</span>, pre, chars);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;&quot;</span>);          <span class="comment">// 输入空字符串也会打印空</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printAllSub</span><span class="params">(<span class="type">int</span> i, String pre, <span class="type">char</span>[] chars)</span>&#123;</span><br><span class="line">       <span class="comment">// 已经到数组最后一个字符了，所有的选择都做完了，该返回了</span></span><br><span class="line">       <span class="keyword">if</span>(i == chars.length)&#123;</span><br><span class="line">           System.out.println(pre);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果没有到最后一个字符，那么当前字符两种选择：选择要或者选择不要</span></span><br><span class="line">       printAllSub(i + <span class="number">1</span>, pre, chars);                              <span class="comment">// 不要当前字符</span></span><br><span class="line">       printAllSub(i + <span class="number">1</span>, pre + String.valueOf(chars[i]), chars);   <span class="comment">// 要当前字符</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printAllSort</span><span class="params">(String str)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (chars.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            func(<span class="number">0</span>, chars);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> i, <span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == chars.length) &#123;</span><br><span class="line">            System.out.println(String.valueOf(chars));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; chars.length; j++) &#123;</span><br><span class="line">            swap(i,j,chars);  <span class="comment">// 第i个位置有i~n-1这些选择</span></span><br><span class="line">            func(i+<span class="number">1</span>,chars);  <span class="comment">// 搞第i+1的位置</span></span><br><span class="line">            swap(i,j,chars);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span>[] chars)</span>&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[i];</span><br><span class="line">        chars[i] = chars[j];</span><br><span class="line">        chars[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="逆序栈问题"><a href="#逆序栈问题" class="headerlink" title="逆序栈问题"></a>逆序栈问题</h2><ul><li>给你一个栈，请你逆序这个栈，不能申请额外的空间，只能使用递归函数，如何实现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1     递归取栈底元素               入栈             3</span><br><span class="line">2 --&gt; i = 3 --&gt; i =2 -- &gt; i = 1 --&gt;   --&gt;  2  --&gt; 2</span><br><span class="line">3                                   1      1      1</span><br></pre></td></tr></table></figure><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(Stack&lt;Integer&gt; stack)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> f(stack);  <span class="comment">// 接到栈底元素</span></span><br><span class="line">    reverse(stack);    <span class="comment">// 反转剩余元素 </span></span><br><span class="line">    stack.push(i);     <span class="comment">// 将栈底元素先入栈形成逆序 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除栈底元素并返回</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(Stack&lt;Integer&gt; stack)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">    <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> f(stack);</span><br><span class="line">        stack.push(result);</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字母和数字对应问题"><a href="#字母和数字对应问题" class="headerlink" title="字母和数字对应问题"></a>字母和数字对应问题</h1></li><li>规定1和A对应，2和B对应，3和C对应…</li><li>那么一个数字字符串比如“111”，就可以转化为“AAA”，“KA”，和“AK”<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">从左到右试：[0…i-1]确定，[i…]可以变</span><br><span class="line">(1)arr[i] == 0 --&gt; return 0 无法组合</span><br><span class="line">(2)arr[i] &gt;= 3 --&gt; i自己转，return i+1的结果</span><br><span class="line">(3)arr[i] == 1 --&gt; i自己转，return i+1的结果;i和i+1一块转，return i+2</span><br><span class="line">(4)arr[i] == 2 --&gt; i自己转，return i+1的结果;在i和i+1组成的数字不超过26的情况下，</span><br><span class="line">                   i和i+1一块转，return i+2，否则该情况不存在</span><br></pre></td></tr></table></figure><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i 之前的位置，如何转化已做过决定了</span></span><br><span class="line"><span class="comment">// i... 有多少种转化结果</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[] str,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == str.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str[i] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str[i] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//i作为单独的部分，后续有多少种方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> process(str,i+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//i和i+1 一起作为一部分，后续有多少种方法</span></span><br><span class="line">        <span class="keyword">if</span>(i + <span class="number">1</span> &lt; str.length)&#123;</span><br><span class="line">            res += process(str,i+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str[i] == <span class="string">&#x27;2&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//i作为单独的部分，后续有多少种方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> process(str,i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//i和i+1 一起作为一部分，并且没有超过26，后续有多少种方法</span></span><br><span class="line">        <span class="keyword">if</span>(i + <span class="number">1</span> &lt; str.length &amp;&amp; str[i + <span class="number">1</span>] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] &lt;= <span class="string">&#x27;6&#x27;</span>)&#123;</span><br><span class="line">            res += process(str,i + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前字符是3~9</span></span><br><span class="line">    <span class="keyword">return</span> process(str,i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵最小路径和"><a href="#矩阵最小路径和" class="headerlink" title="矩阵最小路径和"></a>矩阵最小路径和</h2><div class="note info simple"><p>给你一个二维数组，二维数组中的每个数都是正数，要求从左上角走到右下角，<br>每一步只能向右或者向下。沿途经过的数字要累加起来。返回最小的路径和。</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2--&gt;5   3   5</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">7   1   3   4</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">4   2--&gt;1--&gt;6</span><br></pre></td></tr></table></figure><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minPath2</span><span class="params">(<span class="type">int</span>[][] matrix)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>] == <span class="literal">null</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从左上角走到右下角</span></span><br><span class="line">        <span class="keyword">return</span> walk(matrix, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">walk</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i == matrix.length - <span class="number">1</span> &amp;&amp; j == matrix[<span class="number">0</span>].length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// [i,j]位置已经在右下角了</span></span><br><span class="line">            <span class="keyword">return</span> matrix[matrix.length - <span class="number">1</span>][matrix[<span class="number">0</span>].length - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == matrix.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// [i,j]在矩阵的最后一行，所以只能往右走了</span></span><br><span class="line">            <span class="keyword">return</span> matrix[i][j] + walk(matrix, i, j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == matrix[<span class="number">0</span>].length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// [i,j]在矩阵的最后一列，所以只能往下走了</span></span><br><span class="line">            <span class="keyword">return</span> matrix[i][j] + walk(matrix, i + <span class="number">1</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> walk(matrix, i, j + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">down</span> <span class="operator">=</span> walk(matrix, i + <span class="number">1</span>, j);</span><br><span class="line">        <span class="keyword">return</span> matrix[i][j] + Math.min(right,down);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形DP模板</title>
      <link href="/2022/10/26/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%A7%A3%E5%86%B3%E6%A0%91%E5%BD%A2%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/10/26/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%A7%A3%E5%86%B3%E6%A0%91%E5%BD%A2%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="三个经典例题"><a href="#三个经典例题" class="headerlink" title="三个经典例题"></a>三个经典例题</h1><ul><li>通过三个例题了解解题模板，让你用模板越用越爽<div class="tip cogs"><p>判断一棵树是否是满二叉树</p></div><div class="tip cogs"><p>判断一棵树是否是平衡二叉树</p></div><div class="tip cogs"><p>判断一棵树是否是搜索二叉树</p></div></li></ul><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><div class="tip home"><p>定义一个返回信息</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">info</span>&#123;</span><br><span class="line">       <span class="comment">//  需要的信息可以有多个</span></span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> height; <span class="comment">// 树的高度</span></span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> nodes;  <span class="comment">// 树的节点个数</span></span><br><span class="line"></span><br><span class="line">       info(<span class="type">int</span> n, <span class="type">int</span> h)&#123;</span><br><span class="line">           <span class="built_in">this</span>.height = h;</span><br><span class="line">           <span class="built_in">this</span>.nodes = n;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>递归套路（认真看）</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> info <span class="title function_">process</span><span class="params">(TreeNode head )</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断空树情况 </span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">info</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左子树收集信息</span></span><br><span class="line">        <span class="type">info</span> <span class="variable">leftData</span> <span class="operator">=</span> isFullTree(head.left);</span><br><span class="line">        <span class="comment">// 右子树收集信息</span></span><br><span class="line">        <span class="type">info</span> <span class="variable">rightData</span> <span class="operator">=</span> isFullTree(head.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新信息</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nodes</span> <span class="operator">=</span> leftData.nodes + rightData.nodes  + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> Math.max(leftData.height,rightData.height) + <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">info</span>(nodes,height);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="判断一棵树是否是满二叉树"><a href="#判断一棵树是否是满二叉树" class="headerlink" title="判断一棵树是否是满二叉树"></a>判断一棵树是否是满二叉树</h1><h2 id="剑指-Offer-55-I-二叉树的深度"><a href="#剑指-Offer-55-I-二叉树的深度" class="headerlink" title="剑指 Offer 55 - I. 二叉树的深度"></a>剑指 Offer 55 - I. 二叉树的深度</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20       返回它的最大深度 3</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">       <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> maxDepth(root.right);</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> Math.max(leftHeight,rightHeight) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> height;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>轻松拿下<h2 id="判断一棵树是否是满二叉树-1"><a href="#判断一棵树是否是满二叉树-1" class="headerlink" title="判断一棵树是否是满二叉树"></a>判断一棵树是否是满二叉树</h2><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断满二叉树</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFullTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="type">info</span> <span class="variable">res</span> <span class="operator">=</span> process(root);</span><br><span class="line">    <span class="keyword">return</span> res.nodes == (Math.pow(<span class="number">2</span>,res.height) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">class</span> <span class="title class_">info</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> height; <span class="comment">// 树的高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> nodes; <span class="comment">// 树节点个数</span></span><br><span class="line"></span><br><span class="line">    info(<span class="type">int</span> n, <span class="type">int</span> h)&#123;</span><br><span class="line">        <span class="built_in">this</span>.height = h;</span><br><span class="line">        <span class="built_in">this</span>.nodes = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树形DP模板</span></span><br><span class="line"><span class="keyword">private</span> info <span class="title function_">process</span><span class="params">(TreeNode head )</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">info</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左子树收集信息</span></span><br><span class="line">    <span class="type">info</span> <span class="variable">leftData</span> <span class="operator">=</span> isFullTree(head.left);</span><br><span class="line">    <span class="comment">// 右子树收集信息</span></span><br><span class="line">    <span class="type">info</span> <span class="variable">rightData</span> <span class="operator">=</span> isFullTree(head.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跟新信息</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">nodes</span> <span class="operator">=</span> leftData.nodes + rightData.nodes  + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> Math.max(leftData.height,rightData.height) + <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">info</span>(nodes,height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断一棵树是否是平衡二叉树"><a href="#判断一棵树是否是平衡二叉树" class="headerlink" title="判断一棵树是否是平衡二叉树"></a>判断一棵树是否是平衡二叉树</h1></li><li>剑指 Offer 55 - II. 平衡二叉树<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20      返回 true</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> process(root).isBalan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 需要的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">info</span>&#123;</span><br><span class="line">      <span class="type">boolean</span> isBalan;</span><br><span class="line">        <span class="type">int</span> height;</span><br><span class="line">        info(<span class="type">boolean</span> i , <span class="type">int</span> h)&#123;</span><br><span class="line">            isBalan = i;</span><br><span class="line">            height = h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> info <span class="title function_">process</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">info</span>(<span class="literal">true</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">info</span> <span class="variable">leftData</span> <span class="operator">=</span> process(root.left);</span><br><span class="line">        <span class="type">info</span> <span class="variable">rightData</span> <span class="operator">=</span> process(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前节点的左子树和右子树的深度，并取最大值 </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> Math.max(leftData.height ,rightData.height) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 判断左右子树是不是平衡树，并判断左右深度是否小于2</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isBalan</span> <span class="operator">=</span>  leftData.isBalan &amp;&amp; rightData.isBalan </span><br><span class="line">                            &amp;&amp; Math.abs(leftData.height - rightData.height) &lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">info</span>(isBalan,height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断一棵树是否是搜索二叉树"><a href="#判断一棵树是否是搜索二叉树" class="headerlink" title="判断一棵树是否是搜索二叉树"></a>判断一棵树是否是搜索二叉树</h1></li><li>leetcode 98. 验证二叉搜索树</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  5</span><br><span class="line"> / \</span><br><span class="line">1  4      返回 false</span><br><span class="line">  /  \</span><br><span class="line"> 3    6</span><br></pre></td></tr></table></figure><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> process(root).isBst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">info</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> isBst;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> max;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> min;</span><br><span class="line">        info(<span class="type">boolean</span> i,<span class="type">int</span> min,<span class="type">int</span> max)&#123;</span><br><span class="line">            <span class="built_in">this</span>.isBst = i;</span><br><span class="line">            <span class="built_in">this</span>.min = min;</span><br><span class="line">            <span class="built_in">this</span>.max = max;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> info <span class="title function_">process</span><span class="params">(TreeNode head)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">info</span> <span class="variable">leftData</span> <span class="operator">=</span> process(head.left);</span><br><span class="line">        <span class="type">info</span> <span class="variable">rightData</span> <span class="operator">=</span> process(head.right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> head.val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> head.val;</span><br><span class="line">        <span class="keyword">if</span>(leftData != <span class="literal">null</span>)&#123;</span><br><span class="line">            min = Math.min(leftData.min,min);</span><br><span class="line">            max = Math.max(leftData.max,max); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rightData != <span class="literal">null</span>)&#123;</span><br><span class="line">            min = Math.min(rightData.min,min);</span><br><span class="line">            max = Math.max(rightData.max,max);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isbst</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(leftData != <span class="literal">null</span> &amp;&amp; (!leftData.isBst || leftData.max &gt;= head.val) )&#123;</span><br><span class="line">            isbst = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rightData != <span class="literal">null</span> &amp;&amp; (!rightData.isBst || rightData.min &lt;= head.val) )&#123;</span><br><span class="line">            isbst = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">info</span>(isbst,min,max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进阶练习"><a href="#进阶练习" class="headerlink" title="进阶练习"></a>进阶练习</h1><ul><li>leetcode 236. 二叉树的最近公共祖先<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">5   1      p = 1,q =6 返回节点1和节点6的最近公共祖先是1</span><br><span class="line">   /  \</span><br><span class="line">  3    6</span><br></pre></td></tr></table></figure><div class="tip sync"><p>题解</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="comment">// 找到q和p节点返回</span></span><br><span class="line">        <span class="comment">// 如果有一个节点在另一个节点下方则为空</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> || root == p || root == q )&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左右子树收集节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left,p,q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right,p,q);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否找到了两个节点 如果到找到了则当前节点为最近公共祖先 </span></span><br><span class="line">        <span class="keyword">if</span>(left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断哪个节点没有找到，则说明下个节点在当前节点的下方，</span></span><br><span class="line">        <span class="comment">// 即当前节点为最近公共祖先</span></span><br><span class="line">        <span class="keyword">return</span> left != <span class="literal">null</span> ?  left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本用法</title>
      <link href="/2022/10/02/ArrayList/gitBase/"/>
      <url>/2022/10/02/ArrayList/gitBase/</url>
      
        <content type="html"><![CDATA[<h1 id="git-的三种状态"><a href="#git-的三种状态" class="headerlink" title="git 的三种状态"></a>git 的三种状态</h1><p><img src="https://pdai.tech/images/git-four-areas.png" alt=""></p><ul><li><span class='p cyan'>已修改</span>表示修改了文件，但还没保存到数据库中。</li><li><span class='p cyan'>已暂存</span>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li><span class='p cyan'>已提交</span>表示数据已经安全地保存在本地数据库中。<div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">已修改</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">已暂存</button></li><li class="tab"><button type="button" data-href="#sw-registry-3">已提交</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><p><div class="note info simple"><p>修改文件但未添加和提交操作</p></div><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 123 &gt;&gt; a.txt // 写入数据</span><br><span class="line">// 查看给i他状态</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   a.txt //已修改</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><p><div class="note info simple"><p>修改文件和已添加但未提交操作</p></div><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add . // .代表全部添加（暂存）也可以指定文件</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   a.txt</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-3"><p><div class="note info simple"><p>修改文件和添加、提交都已完成</p></div><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;committed&#x27;</span> // 提交文件，-m 添加描述信息</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="log查看历史版本"><a href="#log查看历史版本" class="headerlink" title="log查看历史版本"></a>log查看历史版本</h2><div class="tip home"><p>git log查看历史版本</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">commit 1db41afa0c09a7247f39b216963e96342b5576c6</span><br><span class="line">Author: Author &lt;Author@qq.com&gt;</span><br><span class="line">Date:   Sun Oct 2 00:03:51 2022 +0800</span><br><span class="line"></span><br><span class="line">    second // 描述信息提交时用户书写</span><br><span class="line"></span><br><span class="line">commit 6bed6372c984dba9e48538f440fbb4fe91698c6e</span><br><span class="line">Author: Author &lt;Author@qq.com&gt;</span><br><span class="line">Date:   Sat Oct 1 23:56:38 2022 +0800</span><br><span class="line"></span><br><span class="line">    first // 描述信息提交时用户书写</span><br></pre></td></tr></table></figure><div class="note warning simple"><p>Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符<br>（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：<br><span class='p center logo large'>commit 6bed6372c984dba9e48538f440fbb4fe91698c6e</span><br>Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。</p></div><h2 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h2><div class="tip home"><p>git reset 和 git chekout 都可以回滚快照</p></div><div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">reset</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">chekout</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">git reset <span class="built_in">head</span>~   // 回退上个版本</span><br><span class="line">git reset <span class="built_in">head</span>~~  // 回退上两个版本</span><br><span class="line">git reset <span class="built_in">head</span>~10 // 回退上10个版本</span><br><span class="line"></span><br><span class="line">// 提交完发现文件还是没有改回上个版本的内容但是版本库其实已经修改好了</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   a.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">// reset参数介绍</span><br><span class="line">// --hard : 回退版本库，暂存区，工作区。（因此我们修改过的代码就没了，需要谨慎使用）</span><br><span class="line">// reset 不仅移动 HEAD 的指向，将快照回滚动到暂存区域，它还将暂存区域的文件还原到工作目录。</span><br><span class="line">// --mixed: 回退版本库，暂存区。(--mixed为git reset的默认参数，即当任何参数都不加的时候的参数)</span><br><span class="line">// --soft: 回退版本库。</span><br><span class="line"></span><br><span class="line">$ git reset --hard <span class="built_in">head</span>~</span><br><span class="line">HEAD is now at 1db41af second // 现在文件夹的文件也会退到上个版本的内容了</span><br><span class="line"></span><br><span class="line">// 不仅可以往回滚，还可以往前滚！</span><br><span class="line">$ git reflog   // 可以看到你提交的所有版本</span><br><span class="line">1db41af (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to <span class="built_in">head</span>~</span><br><span class="line">2691789 HEAD@&#123;1&#125;: commit: third</span><br><span class="line">1db41af (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to <span class="built_in">head</span>~</span><br><span class="line">6897dbc HEAD@&#123;3&#125;: commit: second</span><br><span class="line">1db41af (HEAD -&gt; master) HEAD@&#123;4&#125;: commit: second</span><br><span class="line">6bed637 HEAD@&#123;5&#125;: commit (initial): first</span><br><span class="line">$ git reset --hard 6897dbc // 就可以回到second版本</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未完待续···</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h2><div class="tip home"><p>暂存区和工作目录相比</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> a.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">diff --git a/a.txt b/a.txt</span><br><span class="line">index fcfc20f..fb9d840 100644</span><br><span class="line">--- a/a.txt</span><br><span class="line">+++ b/a.txt</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> 123</span><br><span class="line"> 345</span><br><span class="line">+345</span><br></pre></td></tr></table></figure><div class="tip home"><p>工作树和最新提交</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff <span class="built_in">head</span></span><br><span class="line">diff --git a/a.txt b/a.txt</span><br><span class="line">index fcfc20f..fb9d840 100644</span><br><span class="line">--- a/a.txt</span><br><span class="line">+++ b/a.txt</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> 123</span><br><span class="line"> 345</span><br><span class="line">+345</span><br></pre></td></tr></table></figure><div class="tip home"><p>两个历史快照</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git diff 5da78a4 c7c0e3b</span><br><span class="line">diff --git a/b.txt b/b.txt</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index 81c545e..0000000</span><br><span class="line">--- a/b.txt</span><br><span class="line">+++ /dev/null</span><br><span class="line">@@ -1 +0,0 @@</span><br><span class="line">-1234</span><br></pre></td></tr></table></figure><div class="tip home"><p>比较仓库和暂存区</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached c7c0e3b</span><br><span class="line">diff --git a/b.txt b/b.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..9ab39d5</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/b.txt</span><br><span class="line">@@ -0,0 +1,4 @@</span><br><span class="line">+123</span><br><span class="line">+1212</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><div class="tip home"><p>不小心删除文件怎么办？</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        deleted:    a.txt  // 手动删除工作区的a.txt文件</span><br><span class="line"></span><br><span class="line">$ git checkout -- a.txt   // 文件恢复 </span><br></pre></td></tr></table></figure><h2 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h2><div class="tip home"><p>git mv 旧文件名 新文件名</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">mv</span> a.txt b.txt</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        renamed:    a.txt -&gt; b.txt</span><br></pre></td></tr></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><div class="tip home"><p>让Git 识别某些格式的文件，然后自主不跟踪它们</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 123 &gt;&gt; a.temp</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        .gitignore</span><br><span class="line">        a.temp</span><br><span class="line">// 将temp后缀的文件忽略</span><br><span class="line">$ <span class="built_in">echo</span> *.temp &gt; .gitignore</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        .gitignore // a.temp没有被git追踪</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> .gitignore &gt;&gt; .gitignore // 将自己忽略</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="分支是什么"><a href="#分支是什么" class="headerlink" title="分支是什么"></a>分支是什么</h2><img src="https://ydlclass.com/doc21xnv/assets/image-20210316221252036.657de827.png" alt=""><h2 id="操作分支"><a href="#操作分支" class="headerlink" title="操作分支"></a>操作分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 创建分支</span><br><span class="line">$ git branch V1.0  </span><br><span class="line"></span><br><span class="line">// 删除分支</span><br><span class="line">$ git branch -D v1.1</span><br><span class="line">Deleted branch v1.1 (was 1d89502).</span><br><span class="line"></span><br><span class="line">// 切换分支</span><br><span class="line">$ git checkout V1.0</span><br><span class="line">Switched to branch <span class="string">&#x27;V1.0&#x27;</span></span><br><span class="line"></span><br><span class="line">// 查看分支</span><br><span class="line">$ git status</span><br><span class="line">On branch V1.0 // 分支名称</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">// 操作分支</span><br><span class="line">$ <span class="built_in">echo</span> v10 &gt;&gt; v1.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&#x27;v10&#x27;</span></span><br><span class="line">[V1.0 15024da] v10</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 v1.txt // 文件提交成功</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">a.temp  b.txt  v1.txt</span><br><span class="line">// 切换会主分支</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">a.temp  b.txt //在v10创建的文件没有合并到主分支</span><br><span class="line"></span><br><span class="line">// 切换主分支</span><br><span class="line">$ git checkout master</span><br><span class="line">// 合并分支</span><br><span class="line">$ git merge v1.0</span><br><span class="line">Updating 7a71280..15024da</span><br><span class="line">Fast-forward</span><br><span class="line"> v1.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 v1.txt</span><br></pre></td></tr></table></figure><div class="tip warning"><ul><li>冲突<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 创建第二个分支</span><br><span class="line">$ git branch v1.1</span><br><span class="line"></span><br><span class="line">$ git checkout v1.0</span><br><span class="line">Switched to branch <span class="string">&#x27;v1.0&#x27;</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">a.temp  b.txt  v1.txt</span><br><span class="line">// v1.0 修改数据</span><br><span class="line">$ <span class="built_in">echo</span> 00 &gt;&gt; b.txt</span><br><span class="line"></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&#x27;merge1&#x27;</span></span><br><span class="line">[v1.0 7626c97] merge1</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">// 更改第二个分支</span><br><span class="line">$ git checkout v1.1</span><br><span class="line">Switched to branch <span class="string">&#x27;v1.1&#x27;</span></span><br><span class="line">M       b.txt</span><br><span class="line">// 同时修改b.txt内容</span><br><span class="line">$ <span class="built_in">echo</span> 000 &gt;&gt; b.txt</span><br><span class="line"></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&#x27;merge2&#x27;</span></span><br><span class="line">[v1.1 1d89502] merge2</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">$ git merge v1.1</span><br><span class="line">Auto-merging b.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> b.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line"></span><br><span class="line">// 出现报错</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">00000</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; v1.1</span></span><br><span class="line"><span class="string">多次的修改git不知道merge那个分支可以自行选择删除</span></span><br></pre></td></tr></table></figure></li></ul></div><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><div class="tip home"><p>添加一个远程仓库</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://gitee.com/panther125/git-study.git</span><br></pre></td></tr></table></figure><div class="tip home"><p>把代码推送到远程仓库</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><div class="tip home"><p>列出所有的远程仓库</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><div class="tip home"><p>显示某个远程仓库信息</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show [remote]</span><br></pre></td></tr></table></figure><div class="tip sync"><p>开发基本步骤</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 克隆项目代码</span><br><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/panther125/git-study/branches/setting</span><br><span class="line"></span><br><span class="line">// 创建分支</span><br><span class="line">$ git branch v1.1</span><br><span class="line"></span><br><span class="line">// 开发代码</span><br><span class="line">。。。。。。</span><br><span class="line"></span><br><span class="line">// 合并分支</span><br><span class="line">$ git checkout dev</span><br><span class="line">$ git merge v1.1</span><br><span class="line"></span><br><span class="line">// 推送代码</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h1 id="协议选择"><a href="#协议选择" class="headerlink" title="协议选择"></a>协议选择</h1><div class="tip home"><p>HTTPS优缺点</p></div></li></ul><ul><li>优点1: 相比 SSH 协议，可以使用用户名／密码授权是一个很大的优势，这样用户就不必须在使用 Git<br>之前先在本地生成 SSH 密钥对再把公钥上传到服务器。 对非资深的使用者，或者系统上缺少 SSH<br>相关程序的使用者，HTTP 协议的可用性是主要的优势。 与 SSH 协议类似，HTTP 协议也非常快和高效</li><li>优点2: 企业防火墙一般会打开 80 和 443 这两个常见的http和https协议的端口，使用http和https的协议在架设了防火墙的企业里面就可以绕过安全限制正常使用git，非常方便</li><li>缺点: 使用http/https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令.<br>但是现在操作系统或者其他git工具都提供了 keychain 的功能，可以把你的账户密码记录在系统里，<br>例如OSX 的 Keychain 或者 Windows 的凭证管理器。所以也只需要输一次密码就搞定了。<div class="tip home"><p>SSH的优缺点</p></div></li><li><p>优点1: 架设 Git 服务器时常用 SSH 协议作为传输协议。 因为大多数环境下已经支持通过 SSH 访问 ——<br>即时没有也比较很容易架设。 SSH 协议也是一个验证授权的网络协议；并且，因为其普遍性，架设和使用都很容易。</p></li><li><p>缺点1: SSH服务端一般使用22端口，企业防火墙可能没有打开这个端口。</p></li><li><p>缺点2: SSH 协议的缺点在于你不能通过他实现匿名访问。 即便只要读取数据，使用者也要有通过 SSH<br>访问你的主机的权限，这使得 SSH 协议不利于开源的项目。 如果你只在公司网络使用，SSH<br>协议可能是你唯一要用到的协议。 如果你要同时提供匿名只读访问和 SSH 协议，那么你除了为自己推送架设 SSH<br>服务以外，还得架设一个可以让其他人访问的服务。</p><div class="tip sync"><p>总结</p></div></li></ul><ol><li><p>HTTPS利于匿名访问，适合开源项目可以方便被别人克隆和读取(但他没有push权限)；<br>毕竟为了克隆别人一个仓库学习一下你就要生成个ssh-key折腾一番还是比较麻烦，<br>所以github除了支持ssh协议必然提供了https协议的支持。</p></li><li><p>而SSH协议使用公钥认证比较适合内部项目。<br>当然了现在的代码管理平台例如github、gitliab，<br>两种协议都是支持的，基本上看自己喜好和需求来选择就可以了。</p><div class="note info simple"><p><span class='p center logo large'>生成/添加SSH公钥</span><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;510180298@qq.com&quot;</span>  // 按照提示三次回车后生成</span><br><span class="line"></span><br><span class="line">//添加后，在终端（Terminal）中输入</span><br><span class="line">ssh -T git@gitee.com</span><br><span class="line">若返回 Hi XXX! You<span class="string">&#x27;ve successfully authenticated, but Gitee.com does not provide shell access. 内容，则证明添加成功</span></span><br></pre></td></tr></table></figure></p></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客写法合集</title>
      <link href="/2022/09/17/ArrayList/ButterAnyston/"/>
      <url>/2022/09/17/ArrayList/ButterAnyston/</url>
      
        <content type="html"><![CDATA[<div class="tip bell"><p><p style="text-align:center;">请先安装大佬的插件</p></p><div class='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://akilar.top/posts/615e2dec/ ">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/https://cdn1.tianli0.top/npm/@kmar/fonts/avatar/akilar.jpg.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">前置：前置知识</div>            <div class="tag-link-sitename"> https://akilar.top/posts/615e2dec/ </div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div></div><h2 id="卡片式"><a href="#卡片式" class="headerlink" title="卡片式"></a>卡片式</h2><div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">菜鸟解法</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">大佬方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">world</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="时间轴式"><a href="#时间轴式" class="headerlink" title="时间轴式"></a>时间轴式</h2><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新记录</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022/08/09</p></div></div><div class='timeline-item-content'><p>version1</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022/08/06</p></div></div><div class='timeline-item-content'><p>version2</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022/02/14</p></div></div><div class='timeline-item-content'><p>version3</p></div></div></div><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">行内文字样式</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">行内文本</button></li><li class="tab"><button type="button" data-href="#sw-registry-3">主题的note写法。</button></li><li class="tab"><button type="button" data-href="#sw-registry-4">插件的note写法。</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><ul><li>彩色文字<br><span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br><span class='p center logo large'>panther</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-3"><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="tabs" id="sw-registry"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sw-registry-1">插件的check</button></li><li class="tab"><button type="button" data-href="#sw-registry-2">折叠框</button></li><li class="tab"><button type="button" data-href="#sw-registry-3">诗词标签</button></li><li class="tab"><button type="button" data-href="#sw-registry-4">进度条</button></li><li class="tab"><button type="button" data-href="#sw-registry-5">气泡注释</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sw-registry-1"><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-2"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="/img/gd02.jpg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sout(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha </p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sw-registry-5"><p><span class="bubble-content">鼠标放上来</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">hello world</span>&lt;/span&gt;</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编概述</title>
      <link href="/2022/09/15/Fundamentals-of-computer/computer/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/09/15/Fundamentals-of-computer/computer/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编概述"><a href="#汇编概述" class="headerlink" title="汇编概述"></a>汇编概述</h1><ul><li>8086cpu有14个寄存器：<br><code>AX</code> <code>BX</code> <code>CX</code> <code>DX</code> <code>SI</code> <code>DI</code> <code>SP</code> <code>BP</code> <code>IP</code> <code>CS</code> <code>SS</code> <code>DS</code> <code>ES</code> <code>PSW</code></li><li>8086所有的寄存器都是16位的，可以存储2个字节</li><li><code>AX</code> <code>BX</code> <code>CX</code> <code>DX</code>通常用来存放一般性数据，称为通用寄存器<h2 id="不同的寻址方式"><a href="#不同的寻址方式" class="headerlink" title="不同的寻址方式"></a>不同的寻址方式</h2>(1) [idata]用一个常量来表示地址，可用于直接定位一个内存单元；<br>(2) [bx]用一个变量来表示内存地址，可用于间接定位一个内存单元；<br>(3) [bx+idata]用一个变量和常量表示地址，可在一个起始地址的基础上用变量间接定位一个内存单元；<br>(4) [bx+si]用两个变量表示地址；<br>(5) [bx+si+idata]用两个变量和一个常量表示地址。<br>可以看到，从[idata]一直到[bx+si+idata]，我们可以用更加灵活的方式来定位一个内存<br>单元的地址。这使我们可以从更加结构化的角度来看待所要处理的数据。下面我们通过<br>个问题的系列来体会CPU提供多种寻址方式的用意，并学习一些相关的编程技巧。<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2>| 名称 | 中英文含义 | 作用 |<br>|-|-|-|<br>| AX | 累加器 | 使用频率最高，用于算术、逻辑运算以及与外设传送信息等 |<br>| BX | 基址寄存器 | 用来存放存储器地址，以方便指向变量或数组的元素 |<br>| CX | 计数器 | 作为循环操作等指令的计数器 |<br>| DX | 数据寄存器 | 存放数据，在输入、输出指令中存放外设端口地址 |<br>| SI | 源变址寄存器 | 指向字符串或数组的源操作数 |<br>| DI | 目的变址寄存器 | 指向字符串或数组的目的操作数 |<br>| BP | 基址指针寄存器 | 指向程序堆栈区的数据，主用于子程序中访问通过堆栈传输的参数和局部变量 |<br>| SP | 堆栈指针寄存器 | 专用于指向程序堆栈区顶部的数据，在涉及堆栈操作的指令中会自动增加或减少，以使其总是指向顶部 |</li><li>8086cpu有4个段寄存器：<code>CS</code> <code>DS</code> <code>SS</code> <code>ES</code><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2>| 名称 | 中文含义 | 描述 |<br>|-|-|-|<br>| CS | 代码段寄存器 | 存放程序指令序列 |<br>| DS | 数据段寄存器 | 存放当前运行程序所用的数据 |<br>| SS | 堆栈段寄存器 | 确定堆栈所在的主存区域 |<br>| ES | 附加段寄存器 | 附加的数据段 |<h2 id="段寄存器的使用规定"><a href="#段寄存器的使用规定" class="headerlink" title="段寄存器的使用规定"></a>段寄存器的使用规定</h2>| 访问存储器的方式 | 默认段寄存器 | 可超越的段寄存器 | 偏移地址 |<br>|-|-|-|-|<br>| 取指令 | CS | 无 | IP |<br>| 堆栈操作 | SS | 无 | SP |<br>| 一般数据访问 | DS | CS,ED,SS | EA |<br>| 串操作的源操作数 | DS | CS,ED,SS | SI |<br>| 串操作的目的操作数 | ES | 无 | DI |<br>| BP作为基址的寻址方式 | SS | CS,DS,ES | EA |</li><li><strong>数据</strong> —&gt; <strong>通用寄存器</strong> —&gt; <strong>段寄存器</strong><h2 id="CS-IP"><a href="#CS-IP" class="headerlink" title="CS:IP"></a>CS:IP</h2>CS和IP是8086CPU中两个最关键的寄存器，它们指示了CPU当前要读取指令的地<br>址。<strong>CS为代码段寄存器</strong>，<strong>IP 为指令指针寄存器</strong>，从名称上我们可以看出它们和指令的关系。<br>在8086PC 机中，任意时刻，设 CS 中的内容为M，IP 中的内容为N，8086CPU将从<br>内存 Mx16+N 单元开始，读取一条指令并执行。<h1 id="基本汇编指令"><a href="#基本汇编指令" class="headerlink" title="基本汇编指令"></a>基本汇编指令</h1><strong>汇编指令举例</strong></li></ul><div class="table-container"><table><thead><tr><th>汇编指令</th><th>控制cpu完成的操作</th><th>描述</th></tr></thead><tbody><tr><td>mov ax,18</td><td>将18送给入寄存器ax</td><td>ax = 18</td></tr><tr><td>mov ah,78</td><td>将78送给入寄存器ah</td><td>ah = 78</td></tr><tr><td>add ax,8</td><td>将寄存器ax数据加上8</td><td>ax = ax+8</td></tr><tr><td>mov ax,bx</td><td>将寄存器bx的数据送入ax</td><td>ax = bx</td></tr><tr><td>add ax,bx</td><td>将寄存器bx和ax的数据相加送入ax</td><td>ax = ax+bx</td></tr></tbody></table></div><p><strong>练习</strong></p><div class="table-container"><table><thead><tr><th>汇编指令</th><th>ax数据</th><th>bx数据</th></tr></thead><tbody><tr><td>mov ax,001AH</td><td>001AH</td><td>0000H</td></tr><tr><td>mov bx,0026H</td><td>001AH</td><td>0026H</td></tr><tr><td>add al,bl</td><td>0040H</td><td>0026H</td></tr><tr><td>add ah,bl</td><td>2640H</td><td>0026H</td></tr><tr><td>add bh,al</td><td>2640H</td><td>4026H</td></tr><tr><td>mov ah,0</td><td>0040H</td><td>4026H</td></tr><tr><td>add al,85H</td><td>00C5H</td><td>4026H</td></tr><tr><td>add al,93H</td><td>0058H</td><td>4026H</td></tr></tbody></table></div><h2 id="指令执行与寄存器的内容"><a href="#指令执行与寄存器的内容" class="headerlink" title="指令执行与寄存器的内容"></a>指令执行与寄存器的内容</h2><div class="table-container"><table><thead><tr><th>指令</th><th>寄存器的内容</th><th>说明</th></tr></thead><tbody><tr><td>mov ax,1000H</td><td>ax=1000H</td><td>将1000H送入ax寄存器中</td></tr><tr><td>mov ds,ax</td><td>ds=ax</td><td>将ds设位1000H</td></tr><tr><td>mov ax,[0]</td><td>ax=1123H</td><td>1000:0处存放的字型数据送入ax 1000:1单元存放字型数据的高8位：11H, 1000:0单元存放字型数据的低8位：23H， 所以1000:0处存放的字型数据为1123H。 指令执行时，字型数据的高 8 位送入 ah，字型数据的低 8 位送入 al，则 ax中的数据为1123H</td></tr></tbody></table></div><h1 id="栈-SS-SP"><a href="#栈-SS-SP" class="headerlink" title="栈(SS:SP)"></a>栈(SS:SP)</h1><p>8086CPU提供入栈和出栈指令，最基本的两个是<strong>PUSH(入栈)</strong>和<strong>POP(出栈)</strong>。<br>比如，<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ax   表示将寄存器ax中的数据送入栈中，</span><br><span class="line">pop ax    表示从栈顶取出数据送入ax</span><br></pre></td></tr></table></figure><br>8086CPU的入栈和出栈操作都是以字为单位进行的。</p><h2 id="入栈和出栈执行过程"><a href="#入栈和出栈执行过程" class="headerlink" title="入栈和出栈执行过程"></a>入栈和出栈执行过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0123H</span><br><span class="line">push ax</span><br><span class="line">mov bx,2266H</span><br><span class="line">push bx</span><br><span class="line">mov cx,1122H</span><br><span class="line">push cx</span><br><span class="line">pop ax</span><br><span class="line">pop bx</span><br><span class="line">pop cx</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/626e6237239250f7c58a72ed.png" alt=""><br>这不禁让我们想起一个问题，就是，CPU 如何知道当前要执行的指令所在的位置？<br>我们现在知道答案，那就是 CS、IP 中存放着当前指令的段地址和偏移地址。<br>现在的问题是：CPU 如何知道栈顶的位置？显然，也应该有相应的寄存器来存放栈顶的地址，<br>8086CPU 中，有两个寄存器，<strong>段寄存器 SS 和寄存器 SP</strong>，栈顶的段地址存放<br>在 <code>SS</code> 中，偏移地址存放在 <code>SP</code> 中。任意时刻，SS:SP 指向栈顶元素。push 指令和 pop 指<br>令执行时，CPU从SS和SP中得到栈顶的地址。</p><h1 id="BX、SI、DI、BP"><a href="#BX、SI、DI、BP" class="headerlink" title="BX、SI、DI、BP"></a>BX、SI、DI、BP</h1><ul><li>在8086中，只有这4个寄存器可以在[…]中进行内存单元的寻址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov ax,[bx]</span><br><span class="line">mov ax,[si]</span><br><span class="line">mov ax,[bx+si]</span><br><span class="line">mov ax,[bx+di]</span><br><span class="line">mov ax,[bx]</span><br><span class="line">mov ax,[di]</span><br><span class="line">mov ax,[bx+si]</span><br><span class="line">mov ax,[bx+di]</span><br></pre></td></tr></table></figure>:::warning</li><li>bx不能与bp在一起，他们都是指向基址</li><li>si和di不能在一起，他们都是变址<br>:::</li><li>只要使用寄存器bp，没有显性给出段地址，默认段地址在SS<h1 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">start:mov ax,0123H</span><br><span class="line">mov bx,0456H</span><br><span class="line">add ax,bx</span><br><span class="line">add ax,ax</span><br><span class="line">mov ax,4c00H</span><br><span class="line">int 21H</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure></li></ul><ol><li>伪指令<br>:::info no-icon<br>在汇编语言源程序中，包含两种指令，一种是汇编指令，一种是伪指令。<br>汇编指令是有对应的机器码的指令，可以被编译为机器指令，最终为<br>CPU 所执行。而伪指令没有对应的机器指令，最终不被 CPU 所执行。那么<br>谁来执行伪指令呢？伪指令是由编译器来执行的指令，编译器根据伪指令来<br>进行相关的编译工作。<br>segment和ends是一对成对使用的伪指令，这是在写可被编译器编译的汇编程序时，<br>必须要用到的一对伪指令。segment 和 ends 的功能是定义一个段，segment说明一个段开<br>始，ends说明一个段结束。一个段必须有一个名称来标识，<br>:::</li><li>end<br>:::info no-icon<br>end 是一个汇编程序的结束标记，编译器在编译汇编程序的过程中，如果碰到了伪指<br>令 end，就结束对源程序的编译。所以，在我们写程序的时候，如果程序写完了，要在结<br>尾处加上伪指令 end。否则，编译器在编译程序时，无法知道程序在何处结束。<br>注意，不要搞混了 end 和 ends，ends是和segment成对使用的，标记一个段的结束，<br>ends的含义可理解为“end segment”。我们这里讲的 end 的作用是标记整个程序的结束。<br>:::</li><li>assume<br>:::info no-icon<br>这条伪指令的含义为“假设”。它假设某一段寄存器和程序中的某一个用<br>segment…ends 定义的段相关联。通过 assume 说明这种关联，在需要的情况下，<br>编译程序可以将段寄存器和某一个具体的段相联系。<br>assume 并不是一条非要深入理解不可的伪指令，以后我们编程时，<br>记着用 assume 将有特定用途的段和相关的段寄存器关联起来即可。<br>:::</li><li>标号<br>:::info no-icon<br>在汇编源程序中，除了汇编指令和伪指令外，还有一些标号，比如“codese”这个标号<br>标号指代了一个地址。比如 codesg 在 segment 的前面，作为一个段的名称，这个段的名称最<br>终将被编译、连接程序处理为一个段的段地址。<br>:::<h1 id="debug常用命令解释"><a href="#debug常用命令解释" class="headerlink" title="debug常用命令解释"></a>debug常用命令解释</h1></li></ol><ul><li><code>R</code>: 命令可以查看/修改CPU中各个寄存器中的内容. -r 查看所有寄存器内容,-r ax 按回车 出现”:” 输入新内容 .</li><li><code>D</code>: 命令查看内存中的内容,例如: -d 1000:0 就是查看内存1000:0处的内容.</li><li><code>E</code>: 命令修改内存中的内容.</li><li><code>U</code>: 命令将内存单元总的内容翻译为汇编指令显示.</li><li><code>T</code>: 命令执行CS:IP指向的指令.</li><li><code>A</code>: 以汇编指令形式向内存中写入指令.</li><li><code>t</code>: 单步执行.</li><li><code>g</code>: [0000] 直接跳转到指定的地址.</li><li><code>p</code>: 自动重复执行循环中的指令.知道(cx)=0为止.<h2 id="debug使用提示"><a href="#debug使用提示" class="headerlink" title="debug使用提示"></a>debug使用提示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov al,[0]</span><br></pre></td></tr></table></figure><strong>这其实就是吧0送入ax的低位字节，如果要实现偏移的传输，要加上段地址</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov al,ds:[0]</span><br></pre></td></tr></table></figure>:::warning<br>下列指令分辨<br>:::<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov al,[0]      //将0赋值给ax的地位字节</span><br><span class="line">mov al,ds:[0]   //将数据段偏移地址为0的数据赋给al</span><br><span class="line">mov al,[bx]     //将数据段偏移地址为bx的数据赋给al</span><br><span class="line">mov al,ds:[bx]     //将数据段偏移地址为bx的数据赋给al</span><br></pre></td></tr></table></figure>:::warning</li><li>在进行指令操作时指明是字和字节很有必要</li><li>push至进行字操作<br>例如：<br>2000：1000 FF FF FF FF FF FF FF 。。。。。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov byte ptr [1000H],1</span><br><span class="line">内存变化为 01 FF FF FF FF .......</span><br><span class="line">----------------------------------------</span><br><span class="line">mov ax,2000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov word ptr [1000H],1</span><br><span class="line">内存变化为 01 00 FF FF FF .......</span><br></pre></td></tr></table></figure>:::<h1 id="汇编语言中数据位置的表达"><a href="#汇编语言中数据位置的表达" class="headerlink" title="汇编语言中数据位置的表达"></a>汇编语言中数据位置的表达</h1></li></ul><ol><li><strong>立即数</strong><br>对于直接包含在机器指令的数据(执行前在cpu的指令缓冲区中)：在汇编指令中直接给出<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">mov ax,1</span><br><span class="line">add ax,4c00H</span><br><span class="line">or ax,11000111B</span><br><span class="line">mov ax,&#x27;a&#x27;</span><br></pre></td></tr></table></figure></li><li><strong>寄存器</strong><br>指令要处理的数据在寄存器中，在汇编指令中给出相应的寄存器名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">mov ax,bx</span><br><span class="line">mov ds,ax</span><br><span class="line">puush bx</span><br><span class="line">mov ds:[0],bx</span><br><span class="line">push ds</span><br></pre></td></tr></table></figure></li><li><strong>段地址(SA)和偏移地址(EA)</strong><br>指令要处理的数据在内存中，汇编指令可以给出[X]的格式在某个段寄存器中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov ax,[0]</span><br><span class="line">mov ax,[bx+8]</span><br><span class="line">mov ax,[bx+si]</span><br><span class="line">mov ax,[bx+si+8]</span><br><span class="line">默认段寄存器为数据段寄存器(DS)</span><br><span class="line">mov ax,[bp+si]</span><br><span class="line">默认段寄存器为堆栈段寄存器(SS)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h2></li></ol><ul><li>idata表示常数<table><tr><td>寻址方式</td><td>名称</td><td>含义</td><td>举例</td></tr><tr><td>[idata]</td><td>EA=idata、SA=(ds)</td><td >直接寻址</td><td>[idata]</td></tr><tr><td>[bx]</td><td>EA=bx、SA=(ds)</td><td rowspan = "4" style="text-align: center;">寄存器间接寻址</td><td>[bx]</td></tr><tr><td>[si]</td><td>EA=si、SA=(ds)</td><td>[si]</td></tr><tr><td>[di]</td><td>EA=di、SA=(ds)</td><td>[di]</td></tr><tr><td>[bp]</td><td>EA=idata、SA=(ss)</td><td>[bp]</td></tr><tr><td>[bx+idata]</td><td>EA=bx+idata、SA=(ds)</td><td rowspan = "4" style="text-align: center;">寄存器相对寻址</td><td rowspan = "4" style="text-align: center;">[bx][idata]</td></tr><tr><td>[si+idata]</td><td>EA=si+idata、SA=(ds)</td></tr><tr><td>[di+idata]</td><td>EA=di+idata、SA=(ds)</td></tr><tr><td>[bp+idata]</td><td>EA=bp+idata、SA=(ss)</td></tr><tr><td>[bx+si]</td><td>EA=bx+si、SA=(ds)</td><td rowspan = "4" style="text-align: center;">基址变址寻址</td><td rowspan = "4" style="text-align: center;">[bx][si]</td></tr><tr><td>[bx+di]</td><td>EA=bx+di、SA=(ds)</td></tr><tr><td>[bp+si]</td><td>EA=bp+si、SA=(ss)</td></tr><tr><td>[bp+di]</td><td>EA=bp+di、SA=(ss)</td></tr><tr><td>[bx+si+idata]</td><td>EA=bx+si+idata、SA=(ds)</td><td rowspan = "4" style="text-align: center;">相对基址变址寻址</td><td rowspan = "4" style="text-align: center;">idata[bx][si]</td></tr><tr><td>[bx+di]</td><td>EA=bx+di+idata、SA=(ds)</td></tr><tr><td>[bp+si]</td><td>EA=bp+si+idata、SA=(ss)</td></tr><tr><td>[bp+di]</td><td>EA=bp+di+idata、SA=(ss)</td></tr></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指令讲解</title>
      <link href="/2022/09/15/Fundamentals-of-computer/computer/%E6%B1%87%E7%BC%96/%E6%8C%87%E4%BB%A4%E8%AE%B2%E8%A7%A3/"/>
      <url>/2022/09/15/Fundamentals-of-computer/computer/%E6%B1%87%E7%BC%96/%E6%8C%87%E4%BB%A4%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="div指令"><a href="#div指令" class="headerlink" title="div指令"></a>div指令</h2><p>div除法指令，需要注意一下几点</p><ul><li>除数：有8位和16位两种，存放在reg或内存单元中</li><li>被除数：默认放在AX或DX和AX中，如果除数为8位被除数则为16位，默认在AX中存放，如果除数为16位被除数则为32位默认在DX和AX中存放DX存放高16位AX存放低16位</li><li>结果：如果除数为 8 位，则 AL存储除法操作的商，AH 存储除法操作的余数；<br>如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div byte ptr ds:[1]</span><br><span class="line">al = (ax)/(ds*16+1)//地位存放商</span><br><span class="line">ah = (ax)%(ds*16+1)//高位存放余</span><br><span class="line">-----------------------------------------</span><br><span class="line">div word ptr es:[1]</span><br><span class="line">ax = (dx*10000H+ax)/(es*16+1)//ax存放商</span><br><span class="line">dx = (dx*10000H+ax)%(es*16+1)//dx存放余</span><br></pre></td></tr></table></figure><strong>例如100001/100</strong></li><li>首先100001大于65535则需要32位寄存器</li><li>100小于255但是被除数为32位所以要16位寄存器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov dx,1</span><br><span class="line">mov ax,86A1H</span><br><span class="line">mov bx,100</span><br><span class="line">div bx</span><br></pre></td></tr></table></figure><h2 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h2></li><li>db定义字节型数据</li><li>dw定义字型数据</li><li>dd 是用来定义 dword(doubleword，双字)型数据的。</li><li>dup 是一个操作符，在汇编语言中同 db、dw、dd 等一样，也是由编译器识别处理的符号。它是和 db、dw、dd 等数据定义伪指令配合使用的，用来进行数据的重复。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db 3 dup (0)</span><br><span class="line">定义了3个字节，它们的值都是0，相当于 db 0,0,0。</span><br><span class="line">db 3 dup (0,1,2)</span><br><span class="line">定义了 9个字节，它们是 0、1、2、0、1、2、0、1、2，相当于 db 0,1,2,0,1,2,0,1,2。</span><br></pre></td></tr></table></figure><h2 id="jmp指令"><a href="#jmp指令" class="headerlink" title="jmp指令"></a>jmp指令</h2></li><li>jmp指令无条件转移指令，可以修改ip也可以修改cs和ip<br>jmp 指令要给出两种信息：</li><li>转移的目的地址</li><li>转移的距离(段间转移、段内短转移，段内近转移)<h2 id="jcxz指令"><a href="#jcxz指令" class="headerlink" title="jcxz指令"></a>jcxz指令</h2>jcxz 指令为有条件转移指令，所有的有条件转移指令都是短转移，在对应的机器码中包含转移的位移，而不是目的地址。对 IP 的修改范围都为：-128~127。<h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2>loop指令为循环指令，所有的有loop指令都是短指令，在对应的机器码中包含转移的位移，而不是目的地址。对 IP 的修改范围都为：-128~127。<h2 id="ret指令"><a href="#ret指令" class="headerlink" title="ret指令"></a>ret指令</h2></li><li>ret指令用栈中的数据，修改ip的内容，从而实现近转移</li><li>retf指令用栈中的数据，修改ip的内容，从而实现远转移<h1 id="指令转移的原理"><a href="#指令转移的原理" class="headerlink" title="指令转移的原理"></a>指令转移的原理</h1><strong>可以修改IP，或同时修改CS和IP的指令</strong>统称为转移指令。概括地讲，转移指令就是可以控制CPU执行内存中某处代码的指令。<br>8086CPU的转移行为有以下几类。</li><li>只修改IP时，称为[段内转移]{.yellow}，比如：jmp ax。</li><li>同时修改CS和IP时，称为[段间转移]{.yellow}，比如：jmp 1000:0。<br>由于转移指令对IP的修改范围不同，段内转移又分为：<strong>短转移和近转移</strong>。</li><li>[短转移]{.yellow}IP的修改范围为-128~127。</li><li>[近转移]{.yellow}IP 的修改范围为-32768~32767。<br>8086CPU的转移指令分为以下几类。</li><li>无条件转移指令(如：jmp)</li><li>条件转移指令</li><li>循环指令(如：loop)</li><li>过程</li><li>中断<h2 id="ret和retf"><a href="#ret和retf" class="headerlink" title="ret和retf"></a>ret和retf</h2></li><li>ret指令用栈中的数据，修改IP的内容，从而实现近转移；</li><li>retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移。<br>CUP执行ret指令时，进行下面两步操作<br>(IP) = ((SS)<em> 16)+SP<br>(SP) = (SP)+2<br>CUP执行retf指令时，进行下面四步操作<br>(CS) = (SS)</em> 16+SP<br>(SP) = (SP) + 2<br>(IP) = (SS)* 16+SP<br>(SP) = (SP)+2<br>可以看出，如果我们用汇编语法来解释 ret和retf指令，则：<br>CPU 执行 ret 指令时，相当于进行：<br>pop IP<br>CPU 执行 retf指令时，相当于进行：<br>pop IP<br>pop CS<h2 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h2>CPU执行call指令时，进行两步操作：</li></ul><ol><li>将当前的IP或CS和IP压入栈中；</li><li>转移。<br>call 指令不能实现短转移，除此之外，call 指令实现转移的方法和 jmp 指令的原理相<br>同。<br>call 标号(将当前的 IP 压栈后，转到标号处执行指令)<br>CPU 执行此种格式的 call 指令时，进行如下的操作：<br>(sp)=(sp)-2<br>(ss)* 16+(sp))=(IP)<br>(IP)=(IP)+16位位移。<br>可以看出，如果我们用汇编语法来解释 call指令，则：<br>CPU 执行 call 指令时，相当于进行：<br>push IP<br>CPU 执行 call far ptr指令时，相当于进行：<br>push IP<br>push CS<h2 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h2>因下面要用到，这里介绍一下mul指令，mul是乘法指令，使用mul做乘法的时候，<br>注意以下两点。<br>(1) 两个相乘的数：两个相乘的数，要么都是8位，要么都是16位。如果是8位，一个默认放在AL中，另一个放在8位<br>reg或内存字节单元中；如果是16位，一个默认在AX中，另一个放在 16 位 reg 或内存字单元中。<br>(2) 结果：如果是8位乘法，结果默认放在 AX 中；如果是 16 位乘法，结果高位默认在DX中存放，低位在AX中放。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式如下：</span><br><span class="line">mul reg</span><br><span class="line">mul 内存单元</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">内存单元可以用不同的寻址方式给出，比如：</span><br><span class="line">mul byte ptr ds:[0]</span><br><span class="line">含义：</span><br><span class="line">(ax)=(al)*((ds)*16+0)；</span><br><span class="line">mul word ptr [bx+si+8]</span><br><span class="line">含义：(ax)=(ax)*((ds)*16+(bx)+(si)+8)结果的低 16 位。</span><br><span class="line">(dx)=(ax)*((ds)*16+(bx)+(si)+8)结果的高 16 位。</span><br></pre></td></tr></table></figure><h2 id="abc指令"><a href="#abc指令" class="headerlink" title="abc指令"></a>abc指令</h2>adc 是带进位加法指令，它利用了 CF 位上记录的进位值。<br>指令格式：adc 操作对象1，操作对象2<br>功能：操作对象1=操作对象1+操作对象2+CF<br>比如指令adc ax,bx 实现的功能是：(ax)=(ax)+(bx)+ CF<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2</span><br><span class="line">mov bx,1</span><br><span class="line">sub ax,bx(CF=1)</span><br><span class="line">abc ax,1 ;(ax)+1+CF=2+1+1=4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1</span><br><span class="line">add bx,1</span><br><span class="line">add ax,bx  ;(CF=0)</span><br><span class="line">abc ax,1   ;(ax)+1+CF=2+1+0=3</span><br></pre></td></tr></table></figure>可以看出，adc指令比add指令多加了一个CF位的值。<br>为什么要加上CF的值呢？CPU为什么要提供这样一条指令呢？</li></ol><ul><li>加法可以分两步来进行：<br>①低位相加；<br>②高位相加再加上低位相加产生的进位值。;<br>下面的指令和addax,bx具有相同的结果：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add al,bl</span><br><span class="line">adc ah,bh</span><br></pre></td></tr></table></figure>编程，计算 1EF000H+201000H，结果放在ax(高16位)和bx(低16位)中。<br>先将低 16 位相加，然后将高 16 位和进位值相加。程序如下。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,001EH</span><br><span class="line">mov bx,0F000H</span><br><span class="line">add bx,1000H</span><br><span class="line">adc ax,0020H</span><br></pre></td></tr></table></figure><h2 id="sbb指令"><a href="#sbb指令" class="headerlink" title="sbb指令"></a>sbb指令</h2>sbb 是带借位减法指令，它利用了CF位上记录的借位值。<br>指令格式：sbb操作对象1，操作对象2<br>功能：操作对象1=操作对象1-操作对象2-CF<br>比如指令 sbb ax,bx 实现的功能是：<br>(ax)=(ax)-(bx)-CF<br>sbb 指令执行后，将对 CF 进行设置。利用 sbb 指令可以对任意大的数据进行减法运算。<br>比如，计算003E1000H-00202000H，结果放在ax,bx中，程序如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov bx,1000H</span><br><span class="line">mov ax,003EH</span><br><span class="line">sub bx,2000H</span><br><span class="line">sbb ax,0020H</span><br></pre></td></tr></table></figure>:::warning<br>乘除ax存放低位dx存放高位<br>abc和sbb运算ax存放高位，bx存放地位<br>:::<h2 id="cmp指令"><a href="#cmp指令" class="headerlink" title="cmp指令"></a>cmp指令</h2>cmp 是比较指令，cmp的功能相当于减法指令，只是不保存结果。cmp 指令执行后，将对标志寄存器产生影响。<br>其他相关指令通过识别这些被影响的标志寄存器位来得知比较结果。<br>下面的指令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov ax,8</span><br><span class="line">mov bx,3</span><br><span class="line">cmp ax,bx</span><br><span class="line">执行后：</span><br><span class="line">(ax)=8，zf=0，pf=1，sf=0，cf=0，of=0。</span><br><span class="line">ZF=0(非零)，PF=1(1的个数为偶数)，SF(非负)，CF(没借位)，OF(没溢出)</span><br></pre></td></tr></table></figure>其实，我们通过cmp指令执行后，相关标志位的值就可以看出比较的结果。</li></ul><ol><li>如果 sf=1，而 of=0<br>of=0，<strong>说明没有溢出，逻辑上真正结果的正负=实际结果的正负</strong>；<br>因sf=1，实际结果为负，所以逻辑上真正的结果为负，所以(ah)&lt;(bh)。</li><li>如果 sf=1，而 of=l：<br>of=1，<strong>说明有溢出，逻辑上真正结果的正负≠实际结果的正负</strong>；<br>因sf=1，实际结果为负。<br>实际结果为负，而又有溢出，这说明是由于溢出导致了实际结果为负，简单分析下，就可以看出，如果因为溢出导致了实际结果为负，那么逻辑上真正的结果必然为正。<br>这样，sf=1，of=1，说明了(ah)&gt;(bh)。<h2 id="比较结果的条件转移指令"><a href="#比较结果的条件转移指令" class="headerlink" title="比较结果的条件转移指令"></a>比较结果的条件转移指令</h2>下面是常用的根据无符号数的比较结果进行转移的条件转移指令。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">指令格式      含义检测的相关标志位</span><br><span class="line">je  等于则转移   zf=1</span><br><span class="line">jne 不等于则转移  zf=0</span><br><span class="line">jb  低于则转移   cf=1</span><br><span class="line">jnb 不低于则转移    cf=0</span><br><span class="line">ja  高于则转移   cf=0 且 zf=O</span><br><span class="line">jna 不高于则转移  cf=1 或 zf=1</span><br></pre></td></tr></table></figure>这些指令比较常用，它们都很好记忆，它们的第一个字母都是 j，表示 jump；后面的<br>字母表示意义如下。<br>e：表示equal<br>ne：表示 not equal<br>b：表示 below<br>nb：表示 not below<br>a：表示above<br>na：表示 not above<br><strong>案列</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">实现：如果ah=bh则ax+ax否则ax加bx</span><br><span class="line">cmp ah,bh</span><br><span class="line">je s</span><br><span class="line">add ah,bh</span><br><span class="line">jmp ok</span><br><span class="line">s: </span><br><span class="line">add ah,ah</span><br><span class="line">ok:</span><br><span class="line">mov ah,4ch</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><h2 id="Pushf和Popf"><a href="#Pushf和Popf" class="headerlink" title="Pushf和Popf"></a>Pushf和Popf</h2></li></ol><ul><li>pushf的功能是将<strong>标志寄存器</strong>的值压栈，而popf是从栈中弹出数据，送入<strong>标志寄存器</strong>中。</li><li>pushf和popf,为直接访问标志寄存器提供了一种方法。<br>:::warning<br>标志寄存器与标志要分清<br>:::<h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><img src="https://pic.imgdb.cn/item/626e626b239250f7c58af2da.png" alt=""><h2 id="ZF标志"><a href="#ZF标志" class="headerlink" title="ZF标志"></a>ZF标志</h2>flag 的第6位是ZF，零标志位。它记录相关指令执行后，其结果是否为0。如果结果<br>为0，那么zf=1；如果结果不为0，那么zf=0。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1</span><br><span class="line">sub ax,1</span><br><span class="line">执行后ax为0则ZF = 1</span><br><span class="line">mov ax,2</span><br><span class="line">sub ax,1</span><br><span class="line">执行后ax为1则ZF = 0</span><br></pre></td></tr></table></figure><h2 id="PF标志"><a href="#PF标志" class="headerlink" title="PF标志"></a>PF标志</h2>flag 的第2位是PF，奇偶标志位。它记录相关指令执行后，其结果的所有bit位中1的个数是否为偶数。如果1的个数为偶数，pf=1，如果为奇数，那么 pf=0。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如，指令：</span><br><span class="line">mov al,1</span><br><span class="line">add al,10</span><br><span class="line">执行后，结果为00001011B，</span><br><span class="line">其中有 3(奇数)个 1，则 pf=0；</span><br><span class="line">mov al,1</span><br><span class="line">or al,2</span><br><span class="line">执行后，结果为 00000011B，其中有 2(偶数)个 1，则 pf=1；</span><br></pre></td></tr></table></figure><h2 id="SF标志"><a href="#SF标志" class="headerlink" title="SF标志"></a>SF标志</h2>flag 的第 7 位是 SF，符号标志位。它记录相关指令执行后，其结果是否为负。如果<br>结果为负，sf=1；如果非负，sf=0。<br>计算机中通常用补码来表示有符号数据。计算机中的一个数据可以看作是有符号数，<br>也可以看成是无符号数。比如：</li><li>00000001B，可以看作为无符号数1，或有符号数+1；</li><li>10000001B，可以看作为无符号数 129，也可以看作有符号数-127。<h2 id="CF标志"><a href="#CF标志" class="headerlink" title="CF标志"></a>CF标志</h2>flag 的第 0 位是 CF，进位标志位。一般情况下，在进行无符号数运算的时候，它记录了运算结果的最高有效位向更高位的进位值，或从更高位的借位值。<br>对于位数为 N 的无符号数来说，其对应的二进制信息的最高位，即第 N-1 位，就是<br>它的最高有效位，而假想存在的第 N 位，就是相对于最高有效位的更高位。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,97h</span><br><span class="line">sub al,98h ;执行后：(al)=FFH，CF=1，CF记录了向更高位的借位值</span><br><span class="line">sub al,al  ;执行后：(al)=0，CF=0，CF记录了向更高位的借位值</span><br></pre></td></tr></table></figure><h2 id="OF标志"><a href="#OF标志" class="headerlink" title="OF标志"></a>OF标志</h2>flag 的第 11 位是 OF，溢出标志位。一般情况下，OF 记录了有符号数运算的结果是否发生了溢出。如果发生溢出，OF=1；如果没有，OF=0。<br>一定要注意CF和OF的区别：CF是对无符号数运算有意义的标志位，而OF是对有符号数运算有意义的标志位。<br>比如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,98</span><br><span class="line">add al,99</span><br></pre></td></tr></table></figure></li><li>结果al为197超出了8位寄存器的范围(-128 ~ 127)发生溢出OF=1</li><li>对于无符号数运算，98+99 没有进位CF=0；对于有符号数运算，98+98发生溢出OF=1<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,0F0H</span><br><span class="line">add al,88H</span><br></pre></td></tr></table></figure>add 指令执行后：CF=1，OF=1。对于无符号数运算，0F0H+88H(101111000B) 有进位，CF=1；对<br>于有符号数运算，0F0H+88H发生溢出，OF=1。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,0F0H</span><br><span class="line">add al,78H</span><br></pre></td></tr></table></figure>add 指令执行后：CF=1，OF=0。对于无符号运算，0F0H+78H(101101000B) 有进位，CF=1；对于<br>有符号数运算，0F0H+78H不发生溢出，OF=0。</li><li>我们可以看出，CF 和OF所表示的进位和溢出，是分别对无符号数和有符号数运算<br>而言的，它们之间没有任何关系。<h2 id="DF标志"><a href="#DF标志" class="headerlink" title="DF标志"></a>DF标志</h2>flag的第10位是DF，方向标志位。在串处理指令中，控制每次操作后si、di的增减。<br>df=0 每次操作后 si、di 递增；<br>df=1 每次操作后 si、di 递减。</li><li>如果df=0则：(si)=(si)+1  (di)=(di)+1</li><li>如果df=1则：(si)=(si)-1  (di)=(di)-1</li><li>cld指令：将标志寄存器的df位置0</li><li>std指令：将标志寄存器的df位置1<br><strong>用汇编语言描述movsb</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov es:[di],byte ptr ds:[si]  ;汇编并不支持这种书写，这只是个描述</span><br></pre></td></tr></table></figure><strong>了解movsb后复制字符串就变得简单多了</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codes,ds:datas</span><br><span class="line"></span><br><span class="line">datas segment</span><br><span class="line"> db &#x27;Welcome to masm!&#x27;</span><br><span class="line"> db dup (0)</span><br><span class="line">datas ends</span><br><span class="line"></span><br><span class="line">codes segment</span><br><span class="line">mov ax,datas</span><br><span class="line">mov ds,ax      </span><br><span class="line">mov si,0           </span><br><span class="line">mov es,ax </span><br><span class="line">mov di,16</span><br><span class="line">mov cx,16 </span><br><span class="line">    cld        ;将df设位0，正向传输</span><br><span class="line">    rep movsb  </span><br><span class="line"></span><br><span class="line">codes ends</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="debug对标志位的表示"><a href="#debug对标志位的表示" class="headerlink" title="debug对标志位的表示"></a>debug对标志位的表示</h2>| 标志 | 值为1 | 值为零 |<br>|-|-|-|<br>| OF | OV | NV |<br>| SF | NG | PL |<br>| ZF | ZR | NZ |<br>| PF | PE | PO |<br>| CF | CY | NC |<br>| DF | DN | UP |</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内中断</title>
      <link href="/2022/09/15/Fundamentals-of-computer/computer/%E6%B1%87%E7%BC%96/%E4%B8%AD%E6%96%AD/"/>
      <url>/2022/09/15/Fundamentals-of-computer/computer/%E6%B1%87%E7%BC%96/%E4%B8%AD%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="内中断的产生"><a href="#内中断的产生" class="headerlink" title="内中断的产生"></a>内中断的产生</h1><p>当CPU的内部有什么事情发生的时候，将产生需要马上处理的中断信息呢？对于8086CPU,当CPU内部有下面的情况发生的时候，将产生相应的中断信息。</p><ul><li>除法错误，比如，执行div指令产生的除法溢出：</li><li>单步执行：</li><li>执行into指令：</li><li>执行int指令。<h2 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h2>CPU在收到中断信息后，应该转去执行该中断信息的处理程序。我们知道，若要8086CPU执行某处的程序，就要将CS:IP指向它的入口（即程序第一条指令的地址）。可见首要的问题是，CPU在收到中断信息后，如何根据中断信息确定其处理程序的入口。CPU的设计者必须在中断信息和其处理程序的入口地址之间建立某种联系，使得CPU根据中断信息可以找到要执行的处理程序。<h2 id="中断向量表"><a href="#中断向量表" class="headerlink" title="中断向量表"></a>中断向量表</h2></li></ul><ul><li>中断向量表，就是中断程序入口地址的列表</li><li>中断向量表在内存中存放，其中包含256个中断程序所对应的入口<h2 id="中断过程"><a href="#中断过程" class="headerlink" title="中断过程"></a>中断过程</h2>CPU收到中断信息后，要对中断信息进行处理，首先将引发中断过程。硬件在完成中断过程后，CS:P将指向中断处理程序的入口，CPU开始执行中断处理程序。<div class="tip info"><p>有一个问题需要考虑，CPU在执行完中断处理程序后，应该返回原来的执行点继续执行下面的指令。所以在中断过程中，在设置CS:P之前，还要将原来的CS和P的值保存起来。在使用cl指令调用子程序时有同样的问题，子程序执行后还要返回到原来的执行点继续执行，所以，call指令先保存当前CS和IP的值，然后再设置CS和P。</p></div></li></ul><ol><li>取得中断类型码</li><li>标志寄存器的值入栈(中断过程会改变标志，所以先保存原来的值)</li><li>设置标志寄存器的第八位TF(陷阱标志)和第九位IF(中断标志)为零<div class="tip warning"><p>设置TF = 0很重要，否则不停产生单步中断不断循环，TF置为0不允许单步中断了</p></div></li><li>cs内容入栈，ip内容入栈</li><li>从内存地址为中断类型码<em> 4和中断类型码</em> 4+2的两个字单元中读取中断处理程序的入口地址设置IP和CS。<h1 id="中断程序和iret指令"><a href="#中断程序和iret指令" class="headerlink" title="中断程序和iret指令"></a>中断程序和iret指令</h1>常规步骤：</li></ol><ul><li>保存用到的寄存器</li><li>处理中断</li><li>恢复寄存器</li><li>用iret返回<div class="tip error"><p>入栈顺序为：标志寄存器、CS、IP<br>出栈顺序为：IP、CS、标志寄存器</p></div><h2 id="除法错误中断"><a href="#除法错误中断" class="headerlink" title="除法错误中断"></a>除法错误中断</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1000h</span><br><span class="line">mov bh,1</span><br><span class="line">div bh</span><br></pre></td></tr></table></figure></li></ul><ul><li>显示提示信息“Divide overflow”，并返回操作系统<span class='p cyan'>编写中断处理</span></li><li>设置es：di指向目的地址</li><li>设置ds：si指向源地址</li><li>设置cx的值</li><li>设置传输方向（std为逆向，cld为正向）</li><li>rep movsb<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mov ax,cs</span><br><span class="line">mov ds,ax</span><br><span class="line">mov si,offset do0      ;设置es：di指向目的地址</span><br><span class="line"></span><br><span class="line">mov ax,0</span><br><span class="line">mov es,ax</span><br><span class="line">mov di,200h            ;设置ds：si指向源地址</span><br><span class="line"></span><br><span class="line">mov cx,offset do0end-offset do0    ;设置cx的值为传输长度（-）减号</span><br><span class="line"></span><br><span class="line">cld                    ;设置传输方向（std为逆向，cld为正向）</span><br><span class="line"></span><br><span class="line">rep movsb</span><br></pre></td></tr></table></figure><h1 id="int指令"><a href="#int指令" class="headerlink" title="int指令"></a>int指令</h1>int指令格式： int n，n为中断类型码，引发中断过程<br>cpu执行int指令的过程：</li></ul><ol><li>取中断类型码n</li><li>标志寄存器入栈，IF=0，TF=0</li><li>CS，IP入栈</li><li>IP=（N<em> 4），CS=（N</em> 4+2）<br><strong>例如</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0b800h;电脑显存的地址</span><br><span class="line">mov ex,ax</span><br><span class="line">mov byte ptr es:[12*160+40*2]  ;显示在中间位置</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1>从CPU的角度，将这些寄存器都当作端口，对它们进行统一编址，从而建立了一个统一的端口地址空间。每一个端口在地址空间中都有一个地址。<br>CPU可以直接读写以下3个地方的数据。</li><li>CPU内部的寄存器：</li><li>内存单元：</li><li>端口。<h2 id="端口的读写"><a href="#端口的读写" class="headerlink" title="端口的读写"></a>端口的读写</h2>在访问端口的时候，CPU通过端口地址来定位端口。因为端口所在的芯片和CPU通过总线相连，所以，端口地址和内存地址一样，通过地址总线来传送。在PC系统中，CPU最多可以定位64KB个不同的端口。则端口地址的范围为0~65535。<br>对端口的读写不能用<code>mov</code>、<code>push</code>、<code>pop</code>等内存读写指令。端口的读写指令只有两条：<code>in</code>和<code>out</code>,分别用于从端口读取数据和往端口写入数据。<br><strong>访问内存与端口比较</strong></li></ol><ul><li>访问内存<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ax,ds:[8]</span><br></pre></td></tr></table></figure></li></ul><ol><li>cpu通过地址线将地址信息8发出</li><li>cpu通过控制线发出内存读命令，选择存储器芯片并通知他，将要从中读取数据</li><li>储存器将8号单元中的数据通过数据线送入cpu</li></ol><ul><li>访问端口<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in al,60h</span><br></pre></td></tr></table></figure></li></ul><ol><li>cpu通过地址线将地址信息60发出</li><li>cpu通过控制线发出端口读命令，选择端口所在的芯片并通知他，将要从中读取数据</li><li>端口所在的芯片将8号单元中的数据通过数据线送入cpu<br>:::warning<br>在<code>in</code>和<code>out</code>指令中，只能用ax或al来存放端口读入的数据或要发送到端口的数据<br>:::<h2 id="CMOS-RAM芯片"><a href="#CMOS-RAM芯片" class="headerlink" title="CMOS RAM芯片"></a>CMOS RAM芯片</h2></li><li>包含一个实时钟和一个有128个存储单元的RAM存储器（早期的计算机为64个字节)。</li><li>该芯片靠电池供电。所以，关机后其内部的实时钟仍可正常工作，RAM中的信息不丢失。</li><li>128个字节的RAM中，内部实时钟占用0~ 0dh单元来保存时间信息，其余大部分单元用于保存系统配置信息，供系统启动时BIOS程序读取。BIOS也提供了相关的程序，使我们开机的时候配置CMOS的系统信息</li><li>该芯片内部有两个端口，端口地址为70h和71h。CPU通过这两个端口来读写CMOS RAM.</li><li>70h为地址端口，存放要访问的CMOS RAM单元的地址；71h为数据端口，存放从选定的CMOS RAM单元中读取的数据，或要写入到其中的数据。可见，CPU对CMOS RAM的读写分两步进行，<br>比如，读CMOS RAM的2号单元：<br>①将2送入端口70h;<br>②从端口71h读出2号单元的内容。<h2 id="shl和shr指令"><a href="#shl和shr指令" class="headerlink" title="shl和shr指令"></a>shl和shr指令</h2><strong><kbd>shl</kbd>(逻辑左移)</strong></li><li>将一个寄存器或内存单元中的数据向左移位；</li><li>将最后移出的一位写入CF中；</li><li>最低位用0补充。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,10000010B;</span><br><span class="line">shl al,1   ;将al的数据向左移一位</span><br><span class="line">(al)=00000010B,ZF=1    ;将移出的写入zf中低位用零补充</span><br></pre></td></tr></table></figure><div class="tip warning"><p>如果执行的次数大于1，则次数要放入cl中</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov al,10001000B</span><br><span class="line">mov cl,3</span><br><span class="line">shl al,cl</span><br><span class="line">执行后(al)=01000000B,ZF=0</span><br></pre></td></tr></table></figure>:::<br><strong><kbd>shr</kbd>(逻辑右移)</strong><br>它和shl所进行的操作刚好相反。</li><li>将一个寄存器或内存单元中的数据向右移位：</li><li>将最后移出的一位写入CF中；</li><li>最高位用0补充。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,10000010B;</span><br><span class="line">shr al,1   ;将al的数据向左移一位</span><br><span class="line">(al)=01000001B,ZF=0    ;将移出的写入zf中高位用零补充</span><br></pre></td></tr></table></figure>:::warning no-icon<br>如果执行的次数大于1，则次数要放入cl中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov al,10001100B</span><br><span class="line">mov cl,3</span><br><span class="line">shr al,cl</span><br><span class="line">执行后(al)=00010001B,ZF=1</span><br></pre></td></tr></table></figure>:::<h2 id="CNOS-RAM存储时间"><a href="#CNOS-RAM存储时间" class="headerlink" title="CNOS RAM存储时间"></a>CNOS RAM存储时间</h2>在CMOS RAM中，存放着当前的时间：年、月、日、时、分、秒。这6个信息的长<br>度都为1个字节，存放单元为：<br>秒：0      分：2         时：4      日：7             月：8            年：9<br>这些数据以BCD码的方式存放。<br><strong>在屏幕中间显示月份</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,8</span><br><span class="line">out 70h,8   ;读取内存8号的数据</span><br><span class="line">in  al,71h  ;显示内存8号的数据</span><br></pre></td></tr></table></figure><h1 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h1><strong>外中断源有两类</strong><br>:::info no-icno<br>可屏蔽中断<br>:::<br>可屏蔽中断是CPU可以不响应的外中断。CPU是否响应可屏蔽中断，要看标志寄存器的IF位的设置。当CPU检测到可屏蔽中断信息时，如果IF=1,则CPU在执行完当前指令后响应中断，引发中断过程；如果IF=0,则不响应可屏蔽中断。<br>我们回忆一下内中断所引发的中断过程：</li><li>取中断类型码n;</li><li>标志寄存器入栈，IF=0,TF=0：</li><li>CS、IP入栈；</li><li>(IP)=(n<em> 4),(CS)=(n</em> 4+2)<br>可屏蔽中断所引发的中断过程，除在第1步的实现上有所不同外，基本上和内中断的中断过程相同。因为可屏蔽中断信息来自于==CPU外部==，中断类型码是通过[数据总线送入CPU]{.yellow}的；<br>而内中断的中断类型码是在[CPU内部产生的]{.yellow}。<br>现在，我们可以解释中断过程中将IF置为0的原因了。将IF置0的原因就是，在进入中断处理程序后，禁止其他的可屏蔽中断。当然，如果在中断处理程序中需要处理可屏蔽中断，可以用指令将IF置1.8086CPU提供的设置F的指令如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sti  ,设置IF=1;</span><br><span class="line">cli  ,设置IF=0。</span><br></pre></td></tr></table></figure>:::info no-icno<br>不可屏蔽中断<br>:::<br>不可屏蔽中断是CPU==必须响应==的外中断。当CPU检测到不可屏蔽中断信息时，则在执行完当前指令后，立即响应，引发中断过程。对于8086CPU,不可屏蔽中断的中断类型码固定为<code>2</code>，所以中断过程中，不需要取中断类型码。则不可屏蔽中断的中断过程为：</li><li>标志寄存器入栈，IF=0,T℉=0：</li><li>CS、IP入栈；</li><li>(P)=(8),(CS)=(0AHD。<br>几乎所有由外设引发的外中断，都是可屏蔽中断。当外设有需要处理的事件（比如说键盘输入)发生时，相关芯片向CPU发出可屏蔽中断信息。不可屏蔽中断是在系统中有必须处理的紧急情况发生时用来通知CPU的中断信息。<h2 id="接口芯片和端口"><a href="#接口芯片和端口" class="headerlink" title="接口芯片和端口"></a>接口芯片和端口</h2>外设的输入不直接送入内存和CPU,而是送入相关的接口芯片的端口中；CPU向外设的输出也不是直接送入外设，而是先送入端口中，再由相关的芯片送到外设。CPU还可以向外设输出控制命令，而这些控制命令也是先送到相关芯片的端口中，然后再由相关的芯片根据命令对外设实施控制。可见，[CPU通过端口和外部设备进行联系。]{.yellow}<h2 id="键盘的处理过程"><a href="#键盘的处理过程" class="headerlink" title="键盘的处理过程"></a>键盘的处理过程</h2>按下一个键时，开关接通，该芯片就产生一个[扫描码]{.blue}，扫描码说明了按下的键在键盘上的位置。扫描码被送入主板上的相关接口芯片的寄存器中，该寄存器的端口地址为60h。松开按下的键时，也产生一个扫描码，扫描码说明了松开的键在键盘上的位置。松开按键时产生的扫描码也被送入60h端口中。一般将<br>[按下一个键时产生的扫描码称为<code>通码</code>，松开一个键产生的扫描码称为<code>断码</code>]{.yellow}。<br>[断码=通码+80h]{.label .info}</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql进阶知识</title>
      <link href="/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h1><pre><code> 六大约束：            NOT NULL：非空约束，保证字段不能为空            CHEAK:检查约束，限定字符（mysql不支持）            UNIQUE:唯一约束，保证字段唯一性，可以为空            DEFAULT:默认约束，字段的默认值            PRIMARY KEY : 主键约束，主键字段唯一且不为空            FOREIGN KEY:外键约束，保证字段的值必须来至主表的关联列的值 约束添加分类：            列级约束：                     六大约束都可以写，但是外键没有效果            表级约束：                     除了非空和默认都可以写 主键和约束的比较            主键：唯一性 最多一个 可以组合            唯一：唯一性 可以为空 可以多个 可以组合</code></pre><h2 id="列级约束"><a href="#列级约束" class="headerlink" title="列级约束"></a>列级约束</h2><ul><li>只需在创建字段时在后面添加约束即可<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">    stuid <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">--主键</span></span><br><span class="line">    stunama <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--非空</span></span><br><span class="line">    seat <span class="type">int</span> <span class="keyword">UNIQUE</span>, <span class="comment">--唯一</span></span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">CHECK</span>(gender <span class="keyword">in</span>(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)), <span class="comment">--检查</span></span><br><span class="line">    age <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">18</span> <span class="comment">--默认</span></span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="表级约束"><a href="#表级约束" class="headerlink" title="表级约束"></a>表级约束</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo2(</span><br><span class="line">    stuid <span class="type">int</span>,</span><br><span class="line">    stuname <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line">    seat <span class="type">int</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    major_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> pk <span class="keyword">PRIMARY</span> KEY(stuid),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> name_y <span class="keyword">UNIQUE</span>(stuname),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> gender_y <span class="keyword">CHECK</span>(gender <span class="keyword">in</span>(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> FS_STU_major <span class="keyword">FOREIGN</span> KEY(major_id) <span class="keyword">REFERENCES</span> major(major_id) <span class="comment">--外键</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> major(</span><br><span class="line">    major_id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    major_name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span></span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>:::info no-icon<br>一般使用表级约束写外键，其他的都可以写成列级约束<br>:::<br><strong>修改约束和添加约束</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY <span class="keyword">COLUMN</span> 字段 <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span>;</span><br><span class="line"># 列级约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY <span class="keyword">COLUMN</span> 字段 <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"># 表级约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="keyword">PRIMARY</span> KEY(字段);</span><br></pre></td></tr></table></figure></li></ul><h1 id="标识列（"><a href="#标识列（" class="headerlink" title="标识列（"></a>标识列（</h1><ul><li>自增长列，无需插入）类型只能时数值型 关键字：AUTO_INCREMENT<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> id_identity(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>:::warning</li><li>一个表仅仅可以有一个自增长列</li><li>自增长列必须为一个键(primary key|unique|foreign key)<br>:::</li></ul><p><strong>查看auto_increment参数</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%AUTO_INCREMENT%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    auto_increment_increment,1  步长为1</span></span><br><span class="line"><span class="comment">    auto_increment_offset,1     起始值为1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> # 设置步长和初始值</span><br><span class="line"><span class="keyword">SET</span> auto_increment_increment<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> auto_increment_offset<span class="operator">=</span><span class="number">5</span>;  <span class="comment">-- MYSQL不支持设置初始值，设置后没效果，设置初始值需要自己在插入第一个元素时设置</span></span><br></pre></td></tr></table></figure></p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><pre><code>    TCL语言（Transaction Control Language）事务控制语言事务：    一个或一组sql语句构成一个执行单元，要么全部执行要么全部不执行事务的4大属性（ACID）：    1.原子性（Atomicity）            事务是一个不可分割的单位，要么一起执行，要么全不执行    2.一致性（cansistency）            事务必须从数据库的一致性转换到另一个一致性状态（即数据不变状态能量守恒）    3.隔离性（isolation）            一个事务的执行不能被其他事务干扰，并发执行的各事务之间不能相互干扰    4.持久性（Durability）            事务一旦提交，对数据的改变时永久性的回滚：回到最初的状态</code></pre><h2 id="查看存储引擎"><a href="#查看存储引擎" class="headerlink" title="查看存储引擎"></a>查看存储引擎</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    MEMORY,YES,&quot;Hash based, stored in memory, useful for temporary tables&quot;,NO,NO,NO</span></span><br><span class="line"><span class="comment">    MRG_MYISAM,YES,Collection of identical MyISAM tables,NO,NO,NO</span></span><br><span class="line"><span class="comment">    CSV,YES,CSV storage engine,NO,NO,NO</span></span><br><span class="line"><span class="comment">    FEDERATED,NO,Federated MySQL storage engine,,,</span></span><br><span class="line"><span class="comment">    PERFORMANCE_SCHEMA,YES,Performance Schema,NO,NO,NO</span></span><br><span class="line"><span class="comment">    MyISAM,YES,MyISAM storage engine,NO,NO,NO</span></span><br><span class="line"><span class="comment">    InnoDB,DEFAULT,&quot;Supports transactions, row-level locking, and foreign keys&quot;,YES,YES,YES</span></span><br><span class="line"><span class="comment">    BLACKHOLE,YES,/dev/null storage engine (anything you write to it disappears),NO,NO,NO</span></span><br><span class="line"><span class="comment">    ARCHIVE,YES,Archive storage engine,NO,NO,NO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    InnoDB支持事务myisam、memory不支持事务</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>:::info no-icon<br><strong>InnoDB</strong><br>:::</p><ul><li>是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。<br>实现了四个标准的隔离级别，默认级别是可重复读(REPEATABLE READ)<br>。在可重复读隔离级别下，通过多版本并发控制(MVCC)+ 间隙锁(Next-Key Locking)防止幻影读。<br>主索引是<strong>聚簇索引</strong>，在索引中保存了数据，从而[避免直接读取磁盘]{.yellow}，<br>因此对查询性能有很大的提升。 内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作<br>并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。 支持真正的在线热备份。<br>其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。<br>:::info no-icon<br><strong>MyISAM</strong><br>:::</li><li>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。<br>提供了大量的特性，包括压缩表、空间数据索引等。<br>:::warning</li><li>事务: InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。 </li><li>并发: MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。 </li><li>外键: InnoDB 支持外键。 </li><li>备份: InnoDB 支持在线热备份。</li><li>崩溃恢复: MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。 </li><li>其它特性: MyISAM 支持压缩表和空间数据索引。<br>:::<br><strong>事务的创建隐式事务没有明显的开启和结束的标记列如：insert、updata等</strong></li><li>前提:必须关闭自动提交<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">    <span class="keyword">set</span> autocommit <span class="operator">=</span> off;</span><br><span class="line">    <span class="keyword">start</span> transaction;</span><br><span class="line">    编写<span class="keyword">sql</span>语句</span><br><span class="line">结束事务</span><br><span class="line">    <span class="keyword">commit</span>;提交事务</span><br><span class="line">    <span class="keyword">rollback</span>;回滚数据</span><br></pre></td></tr></table></figure><h2 id="事务案列-转账"><a href="#事务案列-转账" class="headerlink" title="事务案列 转账"></a>事务案列 转账</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> off;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">update</span> test1 <span class="keyword">set</span> salary<span class="operator">=</span> <span class="number">500</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> test1 <span class="keyword">set</span> salary<span class="operator">=</span> <span class="number">1500</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;郭襄&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2></li><li>mysql 默认repeatable read级别</li><li>oracle 默认read commit 级别<br><strong>查看隔离级别</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@transaction</span>_isolation</span><br></pre></td></tr></table></figure><strong>设置隔离级别</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> session<span class="operator">|</span><span class="keyword">global</span> transaction isolaction level 隔离级别</span><br></pre></td></tr></table></figure>| 事务的隔离级别 | 脏读 | 不可重复读 | 幻读 |<br>|-|-|-|-|<br>| read uncommit | √ | √ | √ |<br>| read commit | × | √ | √ |<br>| repeatable read | × | × | √ |<br>| serializable | × | × | × |<h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><strong>演示delete和truncate回滚</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">ROLLBACK</span>  <span class="comment">--回滚将此操作回滚到上一次数据（相当于没有此操作）</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">commit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>:::warning</li><li>delete支持回滚</li><li>truncate不支持回滚<br>:::<br><strong>设置回滚点</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">savepoint</span> a;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id <span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> a; <span class="comment">--回滚到保存点a三号数据没有被删除</span></span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1></li><li>在使用视图时动态生成，只保存了sql逻辑，不保存查询结果</li><li>一种虚拟存在的表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v1 <span class="keyword">AS</span></span><br><span class="line">    查询语句</span><br></pre></td></tr></table></figure></li><li>重用sql语句</li><li>简化复杂的sql语句</li><li>保护数据<h1 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h1><h2 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h2></li><li>级联删除，如果有外键存在怎么删除外键和从表中有外键约束的元素</li><li>在添加外键时添加级联子句 ON DELETE CASCADE<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#添加级联删除</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 </span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key(字段) <span class="keyword">references</span> 从表(字段) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> major <span class="keyword">where</span> major_id <span class="operator">=</span><span class="number">3</span>;#删除<span class="number">3</span>号专业时stuinfo中的数据与<span class="number">3</span>号相关的也会删除</span><br></pre></td></tr></table></figure><h2 id="级联制空"><a href="#级联制空" class="headerlink" title="级联制空"></a>级联制空</h2></li><li>级联删除，如果有外键存在怎么制空外键和从表中有外键约束的元素</li><li>在添加外键时添加级联子句 ON DELETE SET NULL<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 级联制空</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">constraint</span> stu_maj2</span><br><span class="line">    <span class="keyword">foreign</span> key(majorid) <span class="keyword">references</span> major(major_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> major <span class="keyword">where</span> major_id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="comment">-- 删除3号专业时stuinfo中的数据与3号相关的会变成null</span></span><br></pre></td></tr></table></figure><h1 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h1><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2></li><li>变量有系统提供，属于服务器层面<br><strong>查看系统变量</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span><span class="operator">|</span>SESSION VARIABLES</span><br></pre></td></tr></table></figure></li><li>global 全局变量</li><li>session 会话变量<br><strong>查看条件的系统变量</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span><span class="operator">|</span>SESSION VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%character%&#x27;</span></span><br></pre></td></tr></table></figure><strong>查看指定的系统变量名</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span><span class="operator">|</span>SESSION.系统变量名; </span><br></pre></td></tr></table></figure><strong>给变量名赋值</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span><span class="operator">|</span>session 变量<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@global</span><span class="operator">|</span>session.变量<span class="operator">=</span>值;</span><br></pre></td></tr></table></figure>:::warning no-icon</li><li>全局作用域：服务器每次启动将为全局变量赋初值，修改值只在本次生效，重启后将恢复初值</li><li>会话作用域：仅对当前会话（连接）有效<br>:::<h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2></li><li>用户变量<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @用户变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:<span class="operator">=</span>值;</span><br></pre></td></tr></table></figure></li><li>局部变量<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">声明：</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 类型;</span><br><span class="line">赋值：</span><br><span class="line"><span class="keyword">SET</span> 用户变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> 用户变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:<span class="operator">=</span>值;</span><br></pre></td></tr></table></figure>:::warning no-icon</li><li>用户变量作用域：针对当前会话有效</li><li>局部变量作用域：仅仅在定义的bdgin end中生效</li><li>局部变量的声明只能在begin end的第一句<br>:::<h1 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h1>[类似java的方法]{.label .info}</li></ul><ol><li>提高代码重用性</li><li>简化操作</li><li>减少了编译次数并减少了与服务器连接的次数，提高了效率</li></ol><ul><li>含义:一组预先编译好的sql语句集合<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储名（参数模式 参数名 参数类型 ）</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">        方法体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><strong>参数模式</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>      该参数可以作为输入，也就是该参数需要传入值</span><br><span class="line"><span class="keyword">out</span>     该参数可以作为输出，也就是该参数作为返回值</span><br><span class="line"><span class="keyword">inout</span>   该参数可以作为输入和输出，也就是该参数既需要输入值也可以作为返回值</span><br><span class="line"></span><br><span class="line">结尾   DELIMITER 结束标记 </span><br></pre></td></tr></table></figure><strong>调用存储过程</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> 存储名(参数);</span><br></pre></td></tr></table></figure><h2 id="创建存储过程的案例"><a href="#创建存储过程的案例" class="headerlink" title="创建存储过程的案例"></a>创建存储过程的案例</h2>:::info no-icon</li><li>无参存储过程<br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 用函数插入五条数据</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span>   <span class="comment">-- 设置结束标记</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> <span class="built_in">sum</span>()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin(username,<span class="string">&#x27;password&#x27;</span>) <span class="keyword">values</span> (<span class="string">&#x27;jerry&#x27;</span>,<span class="number">1111</span>),(<span class="string">&#x27;jack&#x27;</span>,<span class="number">2222</span>)</span><br><span class="line">        ,(<span class="string">&#x27;anny&#x27;</span>,<span class="number">3333</span>),(<span class="string">&#x27;lite&#x27;</span>,<span class="number">4444</span>),(<span class="string">&#x27;tom&#x27;</span>,<span class="number">7777</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> <span class="built_in">sum</span>();  <span class="comment">-- 调用函数</span></span><br></pre></td></tr></table></figure>:::info no-icon</li><li>带in的存储过程<br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 判断登录人员信息</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myprocedure3(<span class="keyword">IN</span> usernamae <span class="type">varchar</span>(<span class="number">10</span>),<span class="keyword">IN</span> password <span class="type">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>; <span class="comment">-- 定义局部变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> <span class="keyword">result</span></span><br><span class="line">    <span class="keyword">from</span> admin</span><br><span class="line">    <span class="keyword">where</span> admin.username<span class="operator">=</span>username </span><br><span class="line">    <span class="keyword">and</span> admin.password<span class="operator">=</span>password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> IF(<span class="keyword">result</span><span class="operator">&gt;</span><span class="number">0</span>,<span class="string">&#x27;登录成功，欢迎管理员&#x27;</span>,<span class="string">&#x27;登录失败，无关人员&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;结果&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure>:::info no-icon</li><li>带out的存储过程<br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 根据女生名字显示出男生姓名</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myprocedure4(<span class="keyword">IN</span> beautyname <span class="type">varchar</span>(<span class="number">10</span>),<span class="keyword">OUT</span> boname <span class="type">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> bo.boyName</span><br><span class="line">    <span class="keyword">from</span> boys bo</span><br><span class="line">    <span class="keyword">right</span> <span class="keyword">join</span> beauty b</span><br><span class="line">    <span class="keyword">on</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line">    <span class="keyword">where</span> b.name <span class="operator">=</span> beautyname;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> myprocedure4(<span class="string">&#x27;小昭&#x27;</span>,<span class="variable">@resultname</span>);</span><br></pre></td></tr></table></figure>:::info no-icon</li><li>带inout的存储过程<br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 返回参数的<span class="number">2</span>倍</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">procedure</span> myprocedure5(<span class="keyword">INOUT</span> a <span class="type">INT</span>,<span class="keyword">INOUT</span> b <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SET</span> a<span class="operator">=</span>a<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line">    <span class="keyword">SET</span> b<span class="operator">=</span>b<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m</span><span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@n</span><span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"><span class="keyword">call</span> myprocedure5(<span class="variable">@m</span>,<span class="variable">@n</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@m</span>,<span class="variable">@n</span>;</span><br></pre></td></tr></table></figure><strong>删除存储过程</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 存储名;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2>[<strong>创建函数</strong>]{.label .info}<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名() <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">        函数体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>[<strong>调用函数</strong>]{.label .info}<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 函数名()</span><br></pre></td></tr></table></figure>[<strong>函数案列</strong>]{.label .info}<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 返回beauty表的字段个数</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">true</span>; <span class="comment">-- 如果出现1418错误可以设置这个</span></span><br><span class="line"></span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myfunction1() <span class="keyword">returns</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> c <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> c</span><br><span class="line">    <span class="keyword">from</span> beauty;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> myfunction1();</span><br></pre></td></tr></table></figure>[<strong>查看函数</strong>]{.label .info}<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名</span><br></pre></td></tr></table></figure>[<strong>删除函数</strong>]{.label .info}<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> 函数名</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2>:::warning</li><li>存储过程能有多个返回</li><li>函数只能有一个返回<br>:::<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><strong>IF</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IF(表达式<span class="number">1</span>，表达式<span class="number">2</span>，表达式<span class="number">3</span>)</span><br><span class="line">如果表达式<span class="number">1</span>成立返回表达式<span class="number">2</span>，否则返回表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><strong>case</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 变量<span class="operator">|</span>表达式<span class="operator">|</span>字段</span><br><span class="line"><span class="keyword">WHEN</span> 判断 <span class="keyword">then</span> 值;</span><br><span class="line"><span class="keyword">WHEN</span> 判断 <span class="keyword">then</span> 值;</span><br><span class="line">。。。。;</span><br><span class="line"><span class="keyword">ELSE</span> 值;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure><strong>if结构</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件 <span class="keyword">then</span> 语句;</span><br><span class="line">elseif 条件 <span class="keyword">then</span> 语句;</span><br><span class="line">。。。。</span><br><span class="line"><span class="keyword">else</span> 语句;</span><br></pre></td></tr></table></figure><h2 id="case案例"><a href="#case案例" class="headerlink" title="case案例"></a>case案例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 根据成绩判断等级</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myfunc3(<span class="keyword">IN</span> score <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">when</span> score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">and</span> score <span class="operator">&lt;=</span><span class="number">100</span> <span class="keyword">then</span> <span class="keyword">select</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">when</span> score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">then</span> <span class="keyword">select</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="keyword">when</span> score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="keyword">select</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">select</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> myfunc3(<span class="number">85</span>);</span><br></pre></td></tr></table></figure><h2 id="IF案例"><a href="#IF案例" class="headerlink" title="IF案例"></a>IF案例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 根据成绩判断等级</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myfunc3(score <span class="type">int</span>) <span class="keyword">returns</span> <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        IF score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">and</span> score <span class="operator">&lt;=</span><span class="number">100</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        ELSEIF score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        ELSEIF score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">        <span class="keyword">end</span> IF;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> myfunc3(<span class="number">85</span>);</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1></li><li>while、loop、repeat</li><li>iterate 类似java的continue</li><li>leave   类似java的break<br><strong>while</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始标签：while 循环条件 do</span><br><span class="line">                循环体</span><br><span class="line">            <span class="keyword">end</span> while  结束标签;</span><br></pre></td></tr></table></figure><strong>loop</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始标签：loop</span><br><span class="line">            循环体</span><br><span class="line">        <span class="keyword">end</span> loop  结束标签;</span><br></pre></td></tr></table></figure>:::warning</li><li>一般搭配leave使用，否则成死循环<br>:::<br><strong>repeat</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始标签： repeat</span><br><span class="line">            循环体</span><br><span class="line">        until 结束循环条件</span><br><span class="line">        <span class="keyword">end</span> repeat  结束标签;</span><br></pre></td></tr></table></figure>:::warning</li><li>while类似于java的while</li><li>repeat类似于java的do。。while</li><li>loop类似于死循环<br>:::<h2 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 添加数据（限制最多添加<span class="number">10</span>个）</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_while2(<span class="keyword">IN</span> insertcount <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">   s: while i<span class="operator">&lt;=</span> insertcount do</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> admin(username,password) <span class="keyword">value</span>(concat(<span class="string">&#x27;panther&#x27;</span>,i),concat(<span class="string">&#x27;111&#x27;</span>,i));</span><br><span class="line">        <span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">        IF i <span class="operator">&gt;</span><span class="number">10</span> <span class="keyword">then</span> leave s;</span><br><span class="line">        <span class="keyword">end</span> if;</span><br><span class="line">        <span class="keyword">end</span> while s;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">call</span> pro_while2(<span class="number">15</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> mySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL表连接查询</title>
      <link href="/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>USE myemployees;<br>USE girls;</p><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><pre>又称多表查询如果多表查询将会出现笛卡尔乘积现象         若表一有n行 表二有m行 则结果会出现m*n行 分类：        内连接                     等值连接 :多表的等值连接为多表的交集部分，可搭配排序，分组，筛选。                             ：n表连接至少需要n-1个条件 ，顺序无要求，起别名也无要求                    非等值连接                     自连接        外连接                     左外连接                     右外连接        交叉连接 </pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> beauty;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> boys;</span><br><span class="line"># 笛卡尔乘积现象 </span><br><span class="line"><span class="keyword">SELECT</span> NAME, boyName <span class="keyword">FROM</span> boys,beauty; </span><br><span class="line"># 使用连接查询解决</span><br><span class="line"><span class="keyword">SELECT</span> NAME,boyName <span class="keyword">FROM</span> boys,beauty</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id <span class="operator">=</span> boys.id;</span><br></pre></td></tr></table></figure><h1 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h1><h2 id="查询员工名和对应的部门名"><a href="#查询员工名和对应的部门名" class="headerlink" title="查询员工名和对应的部门名"></a>查询员工名和对应的部门名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br></pre></td></tr></table></figure><h2 id="附带筛选条件"><a href="#附带筛选条件" class="headerlink" title="附带筛选条件"></a>附带筛选条件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_name,city</span><br><span class="line"><span class="keyword">FROM</span> departments,locations</span><br><span class="line"><span class="keyword">WHERE</span> departments.location_id <span class="operator">=</span> locations.location_id <span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="理顺思路"><a href="#理顺思路" class="headerlink" title="理顺思路"></a>理顺思路</h1><p>理顺sql语句逻辑：<br>1、FROM employees,jobs<br>WHERE jobs.job_id = employees.job_id<br>通过两个大表的相同部分进行合成一个大表<br>2、GROUP BY job_title<br>通过job_title进行分组，将相同的job_title分成一个个小表，count（<em>）会将一个个小表的数据全部统计进行分组统计<br>3、SELECT job_title,COUNT(</em>)<br>通过SELECT 显示并统计个个小表的job_title最后合成大表显示出来<br>4、ORDER BY COUNT(*) desc;<br>排序</p><h1 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> job_grades;</span><br><span class="line"># 查询圆工的工资和工资级别 </span><br><span class="line"><span class="keyword">SELECT</span> salary,grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees,job_grades</span><br><span class="line"><span class="keyword">WHERE</span> job_grades.lowest_sal <span class="operator">&lt;=</span> employees.salary <span class="keyword">AND</span> employees.salary <span class="operator">&lt;=</span> job_grades.highest_sal;</span><br><span class="line">#<span class="keyword">WHERE</span> salary <span class="keyword">between</span> job_grades.lowest_sal <span class="keyword">AND</span> job_grades.highest_sal;</span><br></pre></td></tr></table></figure><h1 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查询员工名和对应上级名</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,e.last_name,m.manager_id,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e,employees m</span><br><span class="line"><span class="keyword">WHERE</span> m.employee_id <span class="operator">=</span> e.manager_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> md5(<span class="string">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="二、99语法"><a href="#二、99语法" class="headerlink" title="二、99语法"></a>二、99语法</h1><pre>又称多表查询如果多表查询将会出现笛卡尔乘积现象         若表一有n行 表二有m行 则结果会出现m*n行 分类：        内连接                     等值连接 :多表的等值连接为多表的交集部分，可搭配排序，分组，筛选。                             ：n表连接至少需要n-1个条件 ，顺序无要求，起别名也无要求                    非等值连接                     自连接        外连接                     左外连接                     右外连接                    全外        交叉连接     语法：        SELECT 查询列表         FROM 表1 别名【连接类型】        join 表2 别名 on 连接条件        【WHERE 筛选条件 】        【GROUP BY 筛选条件 】        【HAVING 筛选条件 】        【ORDER BY 排序 】        分类：        内连接 inner                    等值连接 :多表的等值连接为多表的交集部分，可搭配排序，分组，筛选。                             ：n表连接至少需要n-1个条件 ，顺序无要求，起别名也无要求                    非等值连接                     自连接        外连接                     左外连接 left【outer】                    右外连接 right【outer】                    全外 full【outer】        交叉连接 cross</pre><h1 id="自连接-1"><a href="#自连接-1" class="headerlink" title="自连接"></a>自连接</h1><h2 id="等值连接-1"><a href="#等值连接-1" class="headerlink" title="等值连接"></a>等值连接</h2><p>语法：<br>SELECT 查询列表<br>        FROM 表1 别名<br>        inner join 表2 别名<br>        on 连接条件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,First_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">inner</span></span><br><span class="line"><span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure></p><h1 id="非等值连接-1"><a href="#非等值连接-1" class="headerlink" title="非等值连接"></a>非等值连接</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> grade_level,<span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> job_grades g</span><br><span class="line"><span class="keyword">on</span> e.salary <span class="keyword">between</span> g.lowest_sal <span class="keyword">and</span> g.highest_sal</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade_level</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade_level <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><h1 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h1><pre>应用场景：        查询一个表中有，另一个表中没有的元素        特点：            1、外连接的查询结果为主表中的所有记录            如果从表中有和它匹配的，则显示匹配的值            如果从表中没有和它匹配的，则显示null            外连接查询结果=内连接结果+主表中有而从表没有的记录            2、左外连接，left join左边的是主表            右外连接，right join右边的是主表</pre><h2 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> boys;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> beauty;</span><br><span class="line"></span><br><span class="line">#案列左外连接</span><br><span class="line"><span class="keyword">SELECT</span> b.name,bo.boyname</span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> boys bo</span><br><span class="line"><span class="keyword">ON</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">where</span> boyname <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">#案列右外连接</span><br><span class="line"><span class="keyword">SELECT</span> b.name,bo.boyname</span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> beauty b</span><br><span class="line"><span class="keyword">ON</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">where</span> boyname <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"># 交叉连接</span><br><span class="line"><span class="keyword">SELECT</span> bo.<span class="operator">*</span>,b.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> boys bo</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>内连接语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key <span class="operator">=</span> B.key</span><br><span class="line"><span class="keyword">WHERE</span> B.key <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li><li>左外连接语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key <span class="operator">=</span> B.key</span><br><span class="line"><span class="keyword">WHERE</span> B.key <span class="keyword">IS</span> NUL</span><br></pre></td></tr></table></figure></li><li>右外连接语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key <span class="operator">=</span> B.key</span><br><span class="line"><span class="keyword">WHERE</span> A.key <span class="keyword">is</span> nul</span><br></pre></td></tr></table></figure></li><li>全外连接语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key <span class="operator">=</span> B.key</span><br></pre></td></tr></table></figure><img src="https://pic.imgdb.cn/item/626e6201239250f7c58a0007.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> mySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql8新特性</title>
      <link href="/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/sql8/"/>
      <url>/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/sql8/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-8-新特性概述"><a href="#MySQL-8-新特性概述" class="headerlink" title="MySQL 8 新特性概述"></a>MySQL 8 新特性概述</h1><p>:::info<br><strong>更简便的<code>NoSQL</code>支持</strong><br>:::<br> <code>NoSQL</code>泛指非关系型数据库和数据存储。随着互联网平台的规模飞速发展，传统的关系型数据库已经越来越不能满足需求。从5.6版本开始，MySQL就开始支持简单的NoSQL存储功能。MySQL 8对这一功能做了优化，以更灵活的方式实现NoSQL功能，不再依赖模式（schema）。<br>:::info<br><strong>更好的索引</strong><br>:::<br>在查询中，正确地使用索引可以提高查询的效率。MySQL 8中新增了<code>隐藏索引</code>和<code>降序索引</code>。隐藏索引可以用来测试去掉索引对查询性能的影响。在查询中混合存在多列索引时，使用降序索引可以提高查询的性能。<br>:::info<br><strong>更完善的JSON支持</strong><br>:::<br>MySQL从5.7开始支持原生JSON数据的存储,MySQL 8对这一功能做了优化，<br>增加了聚合函数<code>JSON_ARRAYAGG()</code>和<code>JSON_OBJECTAGG()</code>，将参数聚合为JSON数组或对象，<br>新增了行内操作符 -&gt;&gt;，是列路径运算符 -&gt;的增强，对JSON排序做了提升，并优化了JSON的更新操作。<br>:::info<br><strong>安全和账户管理</strong><br>:::<br>MySQL 8中新增了<code>caching_sha2_password</code> 授权插件、角色、密码历史记录和FIPS模式支持，这些特性提高了数据库的安全性和性能，使数据库管理员能够更灵活地进行账户管理工作。</p><ol><li><strong>InnoDB的变化</strong> InnoDB是MySQL默认的存储引擎，是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。在MySQL 8 版本中，InnoDB在自增、索引、加密、死锁、共享锁等方面做了大量的改进和优化，并且支持原子数据定义语言（DDL），提高了数据安全性，对事务提供更好的支持。<br>:::info<br><strong>数据字典</strong><br>:::<br>在之前的MySQL版本中，字典数据都存储在元数据文件和非事务表中。从MySQL 8开始新增了事务数据字典，在这个字典里存储着数据库对象信息，这些数据字典存储在内部事务表中。<br>:::info<br><strong>原子数据定义语句</strong><br>:::<br>MySQL 8开始支持原子数据定义语句（Automic DDL），即原子DDL。目前，只有InnoDB存储引擎支持原子DDL。原子数据定义语句（DDL）将与DDL操作相关的数据字典更新、存储引擎操作、二进制日志写入结合到一个单独的原子事务中，这使得即使服务器崩溃，事务也会提交或回滚。使用支持原子操作的存储引擎所创建的表，在执行DROP TABLE、CREATE TABLE、ALTER TABLE、RENAME TABLE、TRUNCATE TABLE、CREATE TABLESPACE、DROP TABLESPACE等操作时，都支持原子操作，即事务要么完全操作成功，要么失败后回滚，不再进行部分提交。 对于从MySQL 5.7复制到MySQL 8版本中的语句，可以添加IF EXISTS或IF NOT EXISTS语句来避免发生错误。<br>:::info<br><strong>资源管理</strong><br>:::<br>MySQL 8开始支持创建和管理资源组，允许将服务器内运行的线程分配给特定的分组，以便线程根据组内可用<br>资源执行。组属性能够控制组内资源，启用或限制组内资源消耗。数据库管理员能够根据不同的工作负载适当<br>地更改这些属性。 目前，CPU时间是可控资源，由“虚拟CPU”这个概念来表示，此术语包含CPU的核心数，超<br>线程，硬件线程等等。服务器在启动时确定可用的虚拟CPU数量。拥有对应权限的数据库管理员可以将这些CPU<br>与资源组关联，并为资源组分配线程。 资源组组件为MySQL中的资源组管理提供了SQL接口。资源组的属性用<br>于定义资源组。MySQL中存在两个默认组，系统组和用户组，默认的组不能被删除，其属性也不能被更改。对于<br>用户自定义的组，资源组创建时可初始化所有的属性，除去名字和类型，其他属性都可在创建之后进行更改。<br>在一些平台下，或进行了某些MySQL的配置时，资源管理的功能将受到限制，甚至不可用。例如，如果安装了<br>线程池插件，或者使用的是macOS系统，资源管理将处于不可用状态。在FreeBSD和Solaris系统中，资源线<br>程优先级将失效。在Linux系统中，只有配置了CAP_SYS_NICE属性，资源管理优先级才能发挥作用。<br>:::info<br><strong>字符集支持</strong><br>:::<br>MySQL 8中默认的字符集由<code>latin1</code>更改为<code>utf8mb4</code>,并首次增加了日语所特定使用的集合,<br>utf8mb4_ja_0900_as_cs。<br>:::info<br><strong>优化器增强</strong><br>:::<br>MySQL优化器开始支持隐藏索引和降序索引。隐藏索引不会被优化器使用，验证索引的必要性时不需要删除索引，先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。降序索引允许优化器对多个列进行排序，并且允许排序顺序不一致。<br>:::info<br><strong>公用表表达式</strong><br>:::<br>用表表达式（Common Table Expressions）简称为CTE，MySQL现在支持递归和非递归两种形式的CTE。CTE通过在SELECT语句或其他特定语句前使用WITH语句对临时结果集进行命名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> cte_name (col_name1,col_name2 ...) <span class="keyword">AS</span> (Subquery)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cte_name;</span><br></pre></td></tr></table></figure><code>Subquery</code>代表子查询，子查询前使用<code>WITH</code>语句将结果集命名为<code>cte_name</code>，在后续的查询中即可使用cte_name进行查询。<br>:::info<br><strong>窗口函数</strong><br>:::<br>MySQL 8开始支持窗口函数。在之前的版本中已存在的大部分聚合函数在MySQL 8中也可以作为窗口函数来使用。<br><img src="https://new-wangz.github.io/2022/04/24/%E7%AC%AC18%E7%AB%A0-MySQL8%E5%85%B6%E4%BB%96%E6%96%B0%E7%89%B9%E6%80%A7/1650771871461.png" alt=""><br>:::info<br><strong>正则表达式支持</strong><br>:::<br>MySQL在8.0.4以后的版本中采用支持Unicode的国际化组件库实现正则表达式操作，这种方式不仅能提供完<br>全的Unicode支持，而且是多字节安全编码。MySQL增加了<br>REGEXP_LIKE()、EGEXP_INSTR()、REGEXP_REPLACE()和 REGEXP_SUBSTR()等函数来提升性能。<br>另外，regexp_stack_limit和regexp_time_limit 系统变量能够通过匹配引擎来控制资源消耗。<br>:::info<br><strong>内部临时表</strong><br>:::<br>TempTable存储引擎取代MEMORY存储引擎成为内部临时表的默认存储引擎。TempTable存储引擎为<br><code>VARCHAR</code>和<code>VARBINARY</code>列提供高效存储。internal_tmp_mem_storage_engine会话变量定义了内部临时表的存储引擎，可选的值有两个，TempTable和MEMORY，其中TempTable为默认的存储引擎。<br>temptable_max_ram系统配置项定义了TempTable存储引擎可使用的最大内存数量。<br>:::info<br><strong>日志记录</strong><br>:::<br>在MySQL 8中错误日志子系统由一系列MySQL组件构成。这些组件的构成由系统变量<br><code>log_error_services</code>来配置，能够实现日志事件的过滤和写入。<br>:::info<br><strong>备份锁</strong><br>:::<br>新的备份锁允许在线备份期间执行数据操作语句，同时阻止可能造成快照不一致的操作。新备份锁由<br><code>LOCK INSTANCE FOR BACKUP</code>和<code>UNLOCK INSTANCE</code>语法提供支持，执行这些操作需要备份管理员特权。<br>:::info<br><strong>增强的MySQL复制</strong><br>:::<br>MySQL8复制支持对JSON文档进行部分更新的二进制日志记录，该记录使用紧凑的二进制格式，从而节省记录完整<br>JSON文档的空间。当使用基于语句的日志记录时，这种紧凑的日志记录会自动完成，并且可以通过将新的<br><code>binlog_row_value_options</code>系统变量值设置为<code>PARTIAL_JSON</code>来启用。<h1 id="MySQL-8-0-移除的旧特性"><a href="#MySQL-8-0-移除的旧特性" class="headerlink" title="MySQL 8. 0 移除的旧特性"></a>MySQL 8. 0 移除的旧特性</h1>:::info<br><strong>查询缓存</strong><br>:::<br>查询缓存已被移除，删除的项有：</li><li>语句： FLUSH QUERY CACHE和RESET QUERY CACHE。</li><li>系统变量： query_cache_limit、query_cache_min_res_unit、query_cache_size、<br>query_cache_type、query_cache_wlock_invalidate。</li><li>状态变量： Qcache_free_blocks、Qcache_free_memory、Qcache_hits、Qcache_inserts、Qcache_lowmem_prunes、Qcache_not_cached、Qcache_queries_in_cache、Qcache_total_blocks。</li><li>线程状态： checking privileges on cached query、checking query cache for query、invalidating query cache entries、sending cached result to client、storing result in query cache、waiting for query cache lock。<br>:::info<br><strong>加密相关</strong><br>:::<br>删除的加密相关的内容有：<code>ENCODE()</code>、<code>DECODE()</code>、<code>ENCRYPT()</code>、<code>DES_ENCRYPT()</code>和<code>DES_DECRYPT()</code>函数，配置项<code>des-key-file</code>，系统变量<code>have_crypt</code>，<code>FLUSH</code>语句的<code>DES_KEY_FILE</code>选项，<code>HAVE_CRYPT CMake</code>选项。 对于移除的<code>ENCRYPT()</code>函数，考虑使用<code>SHA2()</code>替代，对于其他移除的函数，使用<code>AES_ENCRYPT()</code>和<code>AES_DECRYPT()</code>替代。<br>:::info<br><strong>空间函数相关</strong><br>:::<br>在MySQL 5.7版本中，多个空间函数已被标记为过时。这些过时函数在<br>MySQL 8中都已被移除，只保留了对应的ST_和MBR函数。<br>:::info<br><strong>\N和NULL</strong><br>:::<br>在SQL语句中，解析器不再将<code>\N视为NULL</code>，所以在SQL语句中应使用NULL代替\N。这项变化不会影响使用<code>LOAD DATA INFILE</code>或者<code>SELECT…INTO OUTFILE</code>操作文件的导入和导出。在这类操作中，NULL仍等同于\N。<br>:::info<br><strong>\mysql_install_db</strong><br>:::<br>在MySQL分布中，已移除了mysql_install_db程序，数据字典初始化需要调用带着–initialize或者–initialize-insecure选项的mysqld来代替实现。另外，–bootstrap和INSTALL_SCRIPTDIR CMake也已被删除。<br>:::info<br><strong>通用分区处理程序</strong><br>:::<br>通用分区处理程序已从MySQL服务中被移除。为了实现给定表分区，表所使用的存储引擎需要自有的分区处理程序。 提供本地分区支持的MySQL存储引擎有两个，即InnoDB和NDB，而在MySQL 8中只支持InnoDB。<br>:::info<br><strong>系统和状态变量信息</strong><br>:::<br>在INFORMATION_SCHEMA数据库中，对系统和状态变量信息不再进行维护。<br><code>GLOBAL_VARIABLES、SESSION_VARIABLES</code>、<code>GLOBAL_STATUS、SESSION_STATUS</code>表都已被删除。另外，系统变量<code>show_compatibility_56</code>也已被删除。被删除的状态变量有<code>Slave_heartbeat_period</code>、<code>Slave_last_heartbeat,Slave_received_heartbeats</code>、<code>Slave_retried_transactions</code>、<code>Slave_running</code>。以上被删除的内容都可使用性能模式中对应的内容进行替代。<br>:::info<br><strong>mysql_plugin工具</strong><br>:::<br>mysql_plugin工具用来配置MySQL服务器插件，现已被删除，可使用–plugin-load或–plugin-load-add选项在服务器启动时加载插件或者在运行时使用<code>INSTALL PLUGIN</code>语句加载插件来替代该工具。<h1 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sales(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    city <span class="type">VARCHAR</span>( <span class="number">15</span> ),</span><br><span class="line">    county <span class="type">VARCHAR</span>( <span class="number">15</span> ),</span><br><span class="line">    sales_value <span class="type">DECIMAL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sales(city,county,sales_value)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;海淀&#x27;</span>,<span class="number">10.00</span>),</span><br><span class="line">(<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;朝阳&#x27;</span>,<span class="number">20.00</span>),</span><br><span class="line">(<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;黄埔&#x27;</span>,<span class="number">30.00</span>),</span><br><span class="line">(<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;长宁&#x27;</span>,<span class="number">10.00</span>);</span><br></pre></td></tr></table></figure></li></ol><ul><li>查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sales;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> city <span class="operator">|</span> county <span class="operator">|</span> sales_value <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 北京  <span class="operator">|</span> 海淀   <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 北京  <span class="operator">|</span> 朝阳   <span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 上海  <span class="operator">|</span> 黄埔   <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> 上海  <span class="operator">|</span> 长宁   <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+-------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><strong>需求</strong>： 现在计算这个网站在每个城市的销售总额、在全国的销售总额、每个区的销售额占所在城市销售额中的比率，以及占总销售额中的比率。<br>如果用<code>分组和聚合函数</code>，就需要分好几步来计算。<br><strong>第一步</strong>，计算总销售金额，并存入临时表 a：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> a <span class="comment">-- 创建临时表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(sales_value) <span class="keyword">AS</span> sales_value <span class="comment">-- 计算总计金额</span></span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> sales_value <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><strong>第二步</strong>，计算每个城市的销售总额并存入临时表 b：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> b  <span class="comment">-- 创建临时表</span></span><br><span class="line"><span class="keyword">SELECT</span> city,<span class="built_in">SUM</span>(sales_value) <span class="keyword">AS</span> sales_value  <span class="comment">-- 计算城市销售合计</span></span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> b;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="operator">|</span> city <span class="operator">|</span> sales_value <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="operator">|</span> 北京 <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 上海 <span class="operator">|</span> <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><strong>第三步</strong>，计算各区的销售占所在城市的总计金额的比例，和占全部销售总计金额的比例。我们可以通过下面的连接查询获得需要的结果：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> s.city <span class="keyword">AS</span> 城市,s.county <span class="keyword">AS</span> 区,s.sales_value <span class="keyword">AS</span> 区销售额,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> b.sales_value <span class="keyword">AS</span> 市销售额,s.sales_value<span class="operator">/</span>b.sales_value <span class="keyword">AS</span> 市比率,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> a.sales_value <span class="keyword">AS</span> 总销售额,s.sales_value<span class="operator">/</span>a.sales_value <span class="keyword">AS</span> 总比率</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> sales s</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (s.city<span class="operator">=</span>b.city) <span class="comment">-- 连接市统计结果临时表</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">JOIN</span> a <span class="comment">-- 连接总计金额临时表</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> s.city,s.county;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+----------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> 城市 <span class="operator">|</span> 区 <span class="operator">|</span> 区销售额 <span class="operator">|</span> 市销售额 <span class="operator">|</span> 市比率 <span class="operator">|</span> 总销售额 <span class="operator">|</span> 总比率 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+----------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> 上海 <span class="operator">|</span> 长宁 <span class="operator">|</span> <span class="number">10</span>     <span class="operator">|</span> <span class="number">40</span>      <span class="operator">|</span> <span class="number">0.2500</span> <span class="operator">|</span> <span class="number">70</span>     <span class="operator">|</span> <span class="number">0.1429</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 上海 <span class="operator">|</span> 黄埔 <span class="operator">|</span> <span class="number">30</span>     <span class="operator">|</span> <span class="number">40</span>      <span class="operator">|</span> <span class="number">0.7500</span> <span class="operator">|</span> <span class="number">70</span>     <span class="operator">|</span> <span class="number">0.4286</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 北京 <span class="operator">|</span> 朝阳 <span class="operator">|</span> <span class="number">20</span>     <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span> <span class="number">0.6667</span> <span class="operator">|</span> <span class="number">70</span>     <span class="operator">|</span> <span class="number">0.2857</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 北京 <span class="operator">|</span> 海淀 <span class="operator">|</span> <span class="number">10</span>     <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span> <span class="number">0.3333</span> <span class="operator">|</span> <span class="number">70</span>     <span class="operator">|</span> <span class="number">0.1429</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+----------+--------+----------+--------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>结果显示：市销售金额、市销售占比、总销售金额、总销售占比都计算出来了。<br>同样的查询，如果用<code>窗口函数</code>，就简单多了。我们可以用下面的代码来实现：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> city <span class="keyword">AS</span> 城市,county <span class="keyword">AS</span> 区,sales_value <span class="keyword">AS</span> 区销售额,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">SUM</span>(sales_value) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> city) <span class="keyword">AS</span> 市销售额,  <span class="comment">-- 计算市销售额</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> sales_value<span class="operator">/</span><span class="built_in">SUM</span>(sales_value) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> city) <span class="keyword">AS</span> 市比率,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">SUM</span>(sales_value) <span class="keyword">OVER</span>() <span class="keyword">AS</span> 总销售额, <span class="comment">-- 计算总销售额</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> sales_value<span class="operator">/</span><span class="built_in">SUM</span>(sales_value) <span class="keyword">OVER</span>() <span class="keyword">AS</span> 总比率</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> sales</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> city,county;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+----------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> 城市 <span class="operator">|</span> 区 <span class="operator">|</span> 区销售额 <span class="operator">|</span> 市销售额 <span class="operator">|</span> 市比率 <span class="operator">|</span> 总销售额 <span class="operator">|</span> 总比率 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+----------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> 上海 <span class="operator">|</span> 长宁 <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">40</span> <span class="operator">|</span> <span class="number">0.2500</span> <span class="operator">|</span> <span class="number">70</span> <span class="operator">|</span> <span class="number">0.1429</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 上海 <span class="operator">|</span> 黄埔 <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span> <span class="number">40</span> <span class="operator">|</span> <span class="number">0.7500</span> <span class="operator">|</span> <span class="number">70</span> <span class="operator">|</span> <span class="number">0.4286</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 北京 <span class="operator">|</span> 朝阳 <span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span> <span class="number">0.6667</span> <span class="operator">|</span> <span class="number">70</span> <span class="operator">|</span> <span class="number">0.2857</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 北京 <span class="operator">|</span> 海淀 <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span> <span class="number">0.3333</span> <span class="operator">|</span> <span class="number">70</span> <span class="operator">|</span> <span class="number">0.1429</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-----------+--------+----------+--------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="窗口函数分类"><a href="#窗口函数分类" class="headerlink" title="窗口函数分类"></a>窗口函数分类</h2>MySQL从 8. 0 版本开始支持窗口函数。窗口函数的作用类似于在查询中对数据进行分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。</li></ul><p>窗口函数可以分为静态窗口函数和动态窗口函数。</p><ul><li>静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同；</li><li>动态窗口函数的窗口大小会随着记录的不同而变化。<br>窗口函数总体上可以分为序号函数、分布函数、前后函数、首尾函数和其他函数，如下表：<br><img src="https://new-wangz.github.io/2022/04/24/%E7%AC%AC18%E7%AB%A0-MySQL8%E5%85%B6%E4%BB%96%E6%96%B0%E7%89%B9%E6%80%A7/1650772535712.png" alt=""><h2 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数 <span class="keyword">OVER</span>（[<span class="keyword">PARTITION</span> <span class="keyword">BY</span> 字段名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]）</span><br><span class="line"></span><br><span class="line">或者是：</span><br><span class="line"></span><br><span class="line">函数 <span class="keyword">OVER</span> 窗口名 ... <span class="keyword">WINDOW</span> 窗口名 <span class="keyword">AS</span> （[<span class="keyword">PARTITION</span> <span class="keyword">BY</span> 字段名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]）</span><br></pre></td></tr></table></figure></li><li>OVER 关键字指定函数窗口的范围。</li></ul><ol><li>如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录进行计算。</li><li>如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。</li></ol><ul><li>窗口名：为窗口设置一个别名，用来标识窗口。</li><li>PARTITION BY子句：<br>  指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分别执行。</li><li>ORDER BY子句：<br>  指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据记录的顺序进行编号。</li><li>FRAME子句：<br>  为分区中的某个子集定义规则，可以用来作为滑动窗口使用。<h2 id="分类讲解"><a href="#分类讲解" class="headerlink" title="分类讲解"></a>分类讲解</h2></li><li>使用的数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    category_id <span class="type">INT</span>,</span><br><span class="line">    category <span class="type">VARCHAR</span>( <span class="number">15</span> ),</span><br><span class="line">    NAME <span class="type">VARCHAR</span>( <span class="number">30</span> ),</span><br><span class="line">    price <span class="type">DECIMAL</span>( <span class="number">10</span> , <span class="number">2</span> ),</span><br><span class="line">    stock <span class="type">INT</span>,</span><br><span class="line">    upper_time DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods(category_id,category,NAME,price,stock,upper_time)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="number">1</span> , <span class="string">&#x27;女装/女士精品&#x27;</span>, <span class="string">&#x27;T恤&#x27;</span>, <span class="number">39.90</span>, <span class="number">1000</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">1</span> , <span class="string">&#x27;女装/女士精品&#x27;</span>, <span class="string">&#x27;连衣裙&#x27;</span>, <span class="number">79.90</span>, <span class="number">2500</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">1</span> , <span class="string">&#x27;女装/女士精品&#x27;</span>, <span class="string">&#x27;卫衣&#x27;</span>, <span class="number">89.90</span>, <span class="number">1500</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">1</span> , <span class="string">&#x27;女装/女士精品&#x27;</span>, <span class="string">&#x27;牛仔裤&#x27;</span>, <span class="number">89.90</span>, <span class="number">3500</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">1</span> , <span class="string">&#x27;女装/女士精品&#x27;</span>, <span class="string">&#x27;百褶裙&#x27;</span>, <span class="number">29.90</span>, <span class="number">500</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">1</span> , <span class="string">&#x27;女装/女士精品&#x27;</span>, <span class="string">&#x27;呢绒外套&#x27;</span>, <span class="number">399.90</span>, <span class="number">1200</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">2</span> , <span class="string">&#x27;户外运动&#x27;</span>, <span class="string">&#x27;自行车&#x27;</span>, <span class="number">399.90</span>, <span class="number">1000</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">2</span> , <span class="string">&#x27;户外运动&#x27;</span>, <span class="string">&#x27;山地自行车&#x27;</span>, <span class="number">1399.90</span>, <span class="number">2500</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">2</span> , <span class="string">&#x27;户外运动&#x27;</span>, <span class="string">&#x27;登山杖&#x27;</span>, <span class="number">59.90</span>, <span class="number">1500</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">2</span> , <span class="string">&#x27;户外运动&#x27;</span>, <span class="string">&#x27;骑行装备&#x27;</span>, <span class="number">399.90</span>, <span class="number">3500</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">2</span> , <span class="string">&#x27;户外运动&#x27;</span>, <span class="string">&#x27;运动外套&#x27;</span>, <span class="number">799.90</span>, <span class="number">500</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>),</span><br><span class="line">( <span class="number">2</span> , <span class="string">&#x27;户外运动&#x27;</span>, <span class="string">&#x27;滑板&#x27;</span>, <span class="number">499.90</span>, <span class="number">1200</span> , <span class="string">&#x27;2020-11-10 00:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="序号函数"><a href="#序号函数" class="headerlink" title="序号函数"></a>序号函数</h2>:::info<br>[<strong>序号函数</strong>]{.blue}<br><code>ROW_NUMBER()</code><br>:::<br>ROW_NUMBER()函数能够对数据中的序号进行顺序显示。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">举例：查询 goods 数据表中每个商品分类下价格降序排列的各个商品信息</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>) </span><br><span class="line">        <span class="keyword">AS</span> row_num,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id, category_id, category, NAME, price, stock</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+-------------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> row_num <span class="operator">|</span> id <span class="operator">|</span> category_id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span> stock <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+-------------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+-------------+------------+---------+-------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>在名称为<code>女装/女士精品</code>的商品类别中，有两款商品的价格为 89. 90 元，<br>分别是卫衣和牛仔裤。两款商品的序号都应该为 2 ，而不是一个为 2 ，另一个为 3 。此时，可以使用RANK()函数和DENSE_RANK()函数解决。<br>:::info<br>[<strong>并列排序函数</strong>]{.blue}<br><code>RANK()</code> <code>DENSE_RANK()</code><br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>) <span class="keyword">AS</span> row_num,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id, category_id, category, NAME, price, stock</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+---------------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> row_num <span class="operator">|</span> id <span class="operator">|</span> category_id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span> stock <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+---------------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span> <span class="number">799.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span> <span class="number">499.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+---------------+------------+---------+-------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>可以看到，使用RANK()函数得出的序号为 1 、 2 、 2 、 4 ，相同价格的商品序号相同，后面的商品序号是不连续的，跳过了重复的序号。<br>DENSE_RANK()函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为1 、1 、2。举例：使用DENSE_RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>) </span><br><span class="line">        <span class="keyword">AS</span> row_num,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id, category_id, category, NAME, price, stock</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+-------------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> row_num <span class="operator">|</span> id <span class="operator">|</span> category_id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span> stock <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+-------------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span> <span class="number">799.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span> <span class="number">499.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----+-------------+-------------+------------+---------+-------+</span></span><br></pre></td></tr></table></figure><h2 id="分布函数"><a href="#分布函数" class="headerlink" title="分布函数"></a>分布函数</h2>:::info<br>[<strong>分布函数</strong>]{.blue}<br><code>PERCENT_RANK()</code><br>:::<br>PERCENT_RANK()函数是等级值百分比函数。按照如下方式进行计算。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(rank <span class="operator">-</span> <span class="number">1</span> ) <span class="operator">/</span> (<span class="keyword">rows</span> <span class="operator">-</span> <span class="number">1</span> )</span><br></pre></td></tr></table></figure></li><li>其中，rank的值为使用RANK()函数产生的序号，rows的值为当前窗口的总记录数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#写法一：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>) <span class="keyword">AS</span> r,</span><br><span class="line"><span class="built_in">PERCENT_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>) <span class="keyword">AS</span> pr,</span><br><span class="line">id, category_id, category, NAME, price, stock</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line">#写法二：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">RANK</span>() <span class="keyword">OVER</span> w <span class="keyword">AS</span> r,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">PERCENT_RANK</span>() <span class="keyword">OVER</span> w <span class="keyword">AS</span> pr,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id, category_id, category, NAME, price, stock</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---+-----+----+-------------+---------------+----------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> r <span class="operator">|</span> pr <span class="operator">|</span> id <span class="operator">|</span> category_id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span> stock <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+-----+----+-------------+---------------+----------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">0</span>   <span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">0.2</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣     <span class="operator">|</span>  <span class="number">89.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">0.2</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤   <span class="operator">|</span>  <span class="number">89.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">0.6</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙   <span class="operator">|</span>  <span class="number">79.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">0.8</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤      <span class="operator">|</span>  <span class="number">39.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">1</span>   <span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙   <span class="operator">|</span>  <span class="number">29.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+-----+----+-------------+---------------+----------+--------+-------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>:::info<br>[<strong>分布函数</strong>]{.blue}<br><code>CUME_DIST()</code><br>:::<br>CUME_DIST()函数主要用于查询小于或等于某个值的比例。<br>举例：查询goods数据表中小于或等于当前价格的比例。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">CUME_DIST</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">ASC</span>) <span class="keyword">AS</span> cd,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id, category, NAME, price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+----+---------------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> cd <span class="operator">|</span> id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+----+---------------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.16666666666666666</span> <span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.3333333333333333</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.5</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.8333333333333334</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.8333333333333334</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.16666666666666666</span> <span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.5</span> <span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.5</span> <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.6666666666666666</span> <span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.8333333333333334</span> <span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+----+---------------+------------+---------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="前后函数"><a href="#前后函数" class="headerlink" title="前后函数"></a>前后函数</h2>:::info<br><code>LAG(expr,n)</code><br>:::<br>LAG(expr,n)函数<strong>返回当前行的前n行的expr的值</strong>。<br>举例：查询goods数据表中前一个商品价格与当前商品价格的差值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, category, NAME, price, pre_price, price <span class="operator">-</span> pre_price <span class="keyword">AS</span> diff_price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">SELECT</span> id, category, NAME, price,<span class="built_in">LAG</span>(price, <span class="number">1</span> ) <span class="keyword">OVER</span> w <span class="keyword">AS</span> pre_price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">FROM</span> goods</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price)) t;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span> pre_price <span class="operator">|</span> diff_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span>  <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span>  <span class="number">40.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span>  <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">0.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">310.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span> <span class="number">340.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">0.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span> <span class="number">300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span> <span class="number">600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+-----------+------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>:::info<br><code>LEAD(expr,n)</code><br>:::<br>LEAD(expr,n)函数<strong>返回当前行的后n行的expr的值</strong>。<br>举例：查询goods数据表中后一个商品价格与当前商品价格的差值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, category, NAME, behind_price, price,behind_price <span class="operator">-</span> price <span class="keyword">AS</span> diff_price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">SELECT</span> id, category, NAME, price,<span class="built_in">LEAD</span>(price, <span class="number">1</span> ) <span class="keyword">OVER</span> w <span class="keyword">AS</span> behind_price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">FROM</span> goods <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price)) t;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> behind_price <span class="operator">|</span> price <span class="operator">|</span> diff_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span>  <span class="number">39.90</span> <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span>  <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span>  <span class="number">79.90</span> <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span>  <span class="number">40.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span>  <span class="number">89.90</span> <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span>  <span class="number">10.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span>  <span class="number">89.90</span> <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">0.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">310.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span> <span class="number">340.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">0.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span> <span class="number">499.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span> <span class="number">799.90</span> <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span> <span class="number">300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span>  <span class="number">1399.90</span> <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span> <span class="number">600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+--------------+---------+------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="首尾函数"><a href="#首尾函数" class="headerlink" title="首尾函数"></a>首尾函数</h2>:::info<br><code>FIRST_VALUE(expr)</code><br>:::<br>FIRST_VALUE(expr)函数<strong>返回第一个expr的值</strong><br>举例：按照价格排序，查询第 1 个商品的价格信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, category, NAME, price, stock,<span class="built_in">FIRST_VALUE</span>(price) <span class="keyword">OVER</span> w <span class="keyword">AS</span> first_price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span> stock <span class="operator">|</span> first_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span></span><br></pre></td></tr></table></figure>:::info<br><code>LAST_VALUE(expr)</code><br>:::<br>LAST_VALUE(expr)函数<strong>返回最后一个expr的值</strong>。<br>举例：按照价格排序，查询最后一个商品的价格信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, category, NAME, price, stock,<span class="built_in">LAST_VALUE</span>(price) <span class="keyword">OVER</span> w <span class="keyword">AS</span> last_price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span> stock <span class="operator">|</span> last_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span>  <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span>  <span class="number">39.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span>  <span class="number">79.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span>  <span class="number">89.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span>  <span class="number">89.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span>  <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">3500</span> <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span> <span class="number">1200</span> <span class="operator">|</span> <span class="number">499.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span> <span class="number">500</span> <span class="operator">|</span> <span class="number">799.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span>  <span class="number">1399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+-------+------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>:::info<br><code>NTH_VALUE(expr,n)</code><br>:::<br>NTH_VALUE(expr,n)函数<strong>返回第n个expr的值</strong>。<br>举例：查询goods数据表中排名第 2 和第 3 的价格信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, category, NAME, price,<span class="built_in">NTH_VALUE</span>(price, <span class="number">2</span> ) <span class="keyword">OVER</span> w <span class="keyword">AS</span> second_price,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">NTH_VALUE</span>(price, <span class="number">3</span> ) <span class="keyword">OVER</span> w <span class="keyword">AS</span> third_price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span> second_price <span class="operator">|</span> third_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span>  <span class="number">39.90</span> <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span>  <span class="number">39.90</span> <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span>  <span class="number">39.90</span> <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span>  <span class="number">39.90</span> <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span>  <span class="number">39.90</span> <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span> <span class="number">399.90</span> <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+------------+---------+--------------+-------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>:::info<br><code>NTILE(n)</code><br>:::<br>NTILE(n)函数将分区中的有序数据分为n个桶，记录桶编号。<br>举例：将goods表中的商品按照价格分为 3 组。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">NTILE</span>( <span class="number">3</span> ) <span class="keyword">OVER</span> w <span class="keyword">AS</span> nt,id, category, NAME, price</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> goods <span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+---------------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> nt <span class="operator">|</span> id <span class="operator">|</span> category <span class="operator">|</span> NAME <span class="operator">|</span> price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+---------------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 百褶裙 <span class="operator">|</span> <span class="number">29.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> T恤 <span class="operator">|</span> <span class="number">39.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 连衣裙 <span class="operator">|</span> <span class="number">79.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 卫衣 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 牛仔裤 <span class="operator">|</span> <span class="number">89.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> 女装<span class="operator">/</span>女士精品 <span class="operator">|</span> 呢绒外套 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 登山杖 <span class="operator">|</span> <span class="number">59.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 自行车 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 骑行装备 <span class="operator">|</span>  <span class="number">399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 滑板 <span class="operator">|</span>  <span class="number">499.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 运动外套 <span class="operator">|</span>  <span class="number">799.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> 户外运动 <span class="operator">|</span> 山地自行车 <span class="operator">|</span> <span class="number">1399.90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+---------------+------------+---------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1>窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行数，这对我们在原表数据的基础上进行统计和排序非常有用。<strong>分组但不聚合</strong><h1 id="公用表表达式"><a href="#公用表表达式" class="headerlink" title="公用表表达式"></a>公用表表达式</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">普通公用表表达式的语法结构是：</span><br><span class="line"></span><br><span class="line"><span class="keyword">WITH</span> CTE名称</span><br><span class="line"><span class="keyword">AS</span> （子查询）</span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">|</span><span class="keyword">DELETE</span><span class="operator">|</span><span class="keyword">UPDATE</span> 语句;</span><br></pre></td></tr></table></figure></li><li>普通公用表表达式类似于子查询，不过，跟子查询不同的是，它可以被多次引用，而且可以被其他的普通公用表表达式所引用。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">举例：查询员工所在的部门的详细信息。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> departments</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> department_name <span class="operator">|</span> manager_id <span class="operator">|</span> location_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> Administration <span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> <span class="number">1700</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> Marketing <span class="operator">|</span> <span class="number">201</span> <span class="operator">|</span> <span class="number">1800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span> Purchasing <span class="operator">|</span> <span class="number">114</span> <span class="operator">|</span> <span class="number">1700</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">40</span> <span class="operator">|</span> Human Resources <span class="operator">|</span> <span class="number">203</span> <span class="operator">|</span> <span class="number">2400</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">50</span> <span class="operator">|</span> Shipping <span class="operator">|</span> <span class="number">121</span> <span class="operator">|</span> <span class="number">1500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">60</span> <span class="operator">|</span> IT <span class="operator">|</span> <span class="number">103</span> <span class="operator">|</span> <span class="number">1400</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">70</span> <span class="operator">|</span> Public Relations <span class="operator">|</span> <span class="number">204</span> <span class="operator">|</span> <span class="number">2700</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">80</span> <span class="operator">|</span> Sales <span class="operator">|</span> <span class="number">145</span> <span class="operator">|</span> <span class="number">2500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">90</span> <span class="operator">|</span> Executive <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> <span class="number">1700</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> Finance <span class="operator">|</span> <span class="number">108</span> <span class="operator">|</span> <span class="number">1700</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">110</span> <span class="operator">|</span> Accounting <span class="operator">|</span> <span class="number">205</span> <span class="operator">|</span> <span class="number">1700</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------+------------+-------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> mySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql知识补充</title>
      <link href="/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
      <url>/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h1><ul><li>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</li><li>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B;</span><br><span class="line"></span><br><span class="line">自然连接(<span class="keyword">natural</span> <span class="keyword">join</span>)</span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了<span class="keyword">using</span>，会自动查找相同字段名。</span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">join</span></span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">right</span> <span class="keyword">join</span></span><br></pre></td></tr></table></figure><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1></li></ul><ol><li>声明游标<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYSQL、<span class="keyword">SQL</span> server、DB2语法：</span><br><span class="line">    <span class="keyword">DECLARE</span> 游标名称 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> 查询语句</span><br><span class="line">ORACLE:</span><br><span class="line">    <span class="keyword">DECLARE</span> 游标名称 <span class="keyword">CURSOR</span> <span class="keyword">IS</span> 查询语句</span><br></pre></td></tr></table></figure></li><li>打开游标<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> 游标名称</span><br></pre></td></tr></table></figure></li><li>使用游标<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> 游标名称 <span class="keyword">INTO</span> 变量<span class="number">1</span>，变量<span class="number">2.</span>....变量n</span><br></pre></td></tr></table></figure>:::warning<br>变量需要和查询语句的变量个数相同<br>:::</li><li>关闭游标<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> 游标名称</span><br></pre></td></tr></table></figure><h2 id="游标案列"><a href="#游标案列" class="headerlink" title="游标案列"></a>游标案列</h2></li></ol><ul><li>查询按逆序排好序的员工的员工工资总和大于10万需要几名员工<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 使用游标</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> GET_SUM_SALARY(<span class="keyword">IN</span> limite_sal <span class="keyword">DOUBLE</span>,<span class="keyword">OUT</span> COUNT_SAL <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    # 声明局部变量</span><br><span class="line">    <span class="keyword">DECLARE</span> SUM_SAL <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#记录工资总和</span><br><span class="line">    <span class="keyword">DECLARE</span> EMP_SAL <span class="keyword">DOUBLE</span>;#记录游标的临时变量</span><br><span class="line">    <span class="keyword">DECLARE</span> EMP_COUNT <span class="type">INT</span>;#记录总人数</span><br><span class="line">    #声明游标</span><br><span class="line">    <span class="keyword">DECLARE</span> sal_cursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> salary <span class="keyword">from</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line">     # 定义了一个 continue handler，当 <span class="keyword">sqlstate</span> <span class="string">&#x27;02000&#x27;</span> 这个条件出现时，</span><br><span class="line">     #会执行 <span class="keyword">set</span> COUNT_SAL <span class="operator">=</span> EMP_COUNT</span><br><span class="line">     <span class="keyword">declare</span> continue handler <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">set</span> COUNT_SAL <span class="operator">=</span> EMP_COUNT;</span><br><span class="line"></span><br><span class="line">    #打开游标</span><br><span class="line">    <span class="keyword">OPEN</span> sal_cursor;</span><br><span class="line">    # 循环将游标所指数据加入总和中</span><br><span class="line">    REPEAT</span><br><span class="line">        #使用游标</span><br><span class="line">        <span class="keyword">FETCH</span> SAL_CURSOR <span class="keyword">INTO</span> EMP_SAL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">SET</span> SUM_SAL <span class="operator">=</span> SUM_SAL <span class="operator">+</span> EMP_SAL;</span><br><span class="line">        <span class="keyword">SET</span> EMP_COUNT <span class="operator">=</span> EMP_COUNT <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    until SUM_SAL <span class="operator">&gt;=</span> limite_sal</span><br><span class="line">        <span class="keyword">end</span> REPEAT;</span><br><span class="line">    # 设置返回值</span><br><span class="line">    <span class="keyword">SET</span> COUNT_SAL <span class="operator">=</span> EMP_COUNT;</span><br><span class="line">    # 关闭游标</span><br><span class="line">    <span class="keyword">CLOSE</span> sal_cursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> GET_SUM_SALARY(<span class="number">100000</span>,<span class="variable">@COUNT</span>_SAL);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@COUNT</span>_SAL;</span><br></pre></td></tr></table></figure><strong>游标</strong>是MySQL的一个重要的功能，为[逐条读取]{.label .warning}结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1></li><li>监听：记录的增加、修改、删除<br>触发器会在某个表执行以下语句时而自动执行: <code>DELETE</code>、<code>INSERT</code>、<code>UPDATE</code>。 触发器<strong>必须指定</strong>在语句执行之前还是之后自动执行，之前执行使用 <code>BEFORE</code> 关键字，之后执行使用 <code>AFTER</code> 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。 </li><li>INSERT 触发器包含一个名为 NEW 的虚拟表。</li><li>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</li><li>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表。<br>:::warning<br>其中 <code>NEW</code> 是可以被修改的，而 <code>OLD</code> 是只读的。<br>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。<br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名称</span><br><span class="line">&#123;BEFORE<span class="operator">|</span>AFTER&#125; &#123;<span class="keyword">INSERT</span><span class="operator">|</span><span class="keyword">UPDATE</span><span class="operator">|</span><span class="keyword">DELETE</span>&#125; <span class="keyword">ON</span> 表名</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">执行的语句块;</span><br></pre></td></tr></table></figure>:::info<br>监听插入<br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 创建触发器监听用户对myuser表的操作</span><br><span class="line"># 监听插入</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> use_operation_insert after <span class="keyword">insert</span> <span class="keyword">on</span> myadmin</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> myadmin_logo(use_log) <span class="keyword">values</span>(<span class="string">&#x27;use inserts a piece of data&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"># 监听删除</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> use_operation_insert after <span class="keyword">delete</span> <span class="keyword">on</span> myadmin</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> myadmin_logo(use_log) <span class="keyword">values</span>(<span class="string">&#x27;use delete a piece of data&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"># 监听跟新</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> use_operation_insert after <span class="keyword">update</span> <span class="keyword">on</span> myadmin</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> myadmin_logo(use_log) <span class="keyword">values</span>(<span class="string">&#x27;use update a piece of data&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h2></li><li>创建触发器判断插入的员工工资是否大于老板工资<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> chack_salary before <span class="keyword">insert</span> <span class="keyword">on</span> employees</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">declare</span> manager_sar <span class="keyword">double</span>;</span><br><span class="line">     <span class="keyword">select</span> salary <span class="keyword">into</span> manager_sar <span class="keyword">from</span> employees</span><br><span class="line">         <span class="keyword">where</span> employee_id <span class="operator">=</span> NEW.manager_id;</span><br><span class="line">     IF NEW.salary <span class="operator">&gt;</span> manager_sar</span><br><span class="line">         <span class="keyword">then</span> SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;HY000&#x27;</span> <span class="keyword">SET</span> MESSAGE_TEXT<span class="operator">=</span><span class="string">&#x27;员工工资高于领导&#x27;</span>;</span><br><span class="line">     <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>报错：[HY000][<span class="number">1644</span>] 员工工资高于领导</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees(employee_id, last_name,salary,manager_id) <span class="keyword">values</span>(<span class="number">207</span>,<span class="string">&#x27;john&#x27;</span>,<span class="number">12000</span>,<span class="number">103</span>);</span><br></pre></td></tr></table></figure><h2 id="查看和三处触发器"><a href="#查看和三处触发器" class="headerlink" title="查看和三处触发器"></a>查看和三处触发器</h2>:::info</li><li>查看触发器<br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#方式<span class="number">1</span></span><br><span class="line"><span class="keyword">show</span> triggers;</span><br><span class="line">#方式<span class="number">2</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">trigger</span> chack_salary;</span><br><span class="line">#方式<span class="number">3</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.TRIGGERS;</span><br></pre></td></tr></table></figure>:::info</li><li>删除触发器<br>:::<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name</span><br></pre></td></tr></table></figure>可以使用old和new代替旧的和新的数据</li><li>更新操作，更新前是old，更新后是new.</li><li>删除操作，只有old.</li><li>增加操作，只有new.<br>:::warning<br>对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序<br>:::<h1 id="变量持久化"><a href="#变量持久化" class="headerlink" title="变量持久化"></a>变量持久化</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%max_connections&#x27;</span></span><br><span class="line">max_connections,<span class="number">151</span></span><br><span class="line">mysqlx_max_connections,<span class="number">100</span></span><br><span class="line">#mysql重启后也会生效，MySQL会将该命令的配置保存到mysqld<span class="operator">-</span>auto.cnf文件中</span><br><span class="line"><span class="keyword">set</span> persist max_connections<span class="operator">=</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure><h1 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 锁表 */</span></span><br><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line"><span class="comment">-- 锁定</span></span><br><span class="line">    LOCK TABLES tbl_name [<span class="keyword">AS</span> alias]</span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">    UNLOCK TABLES</span><br></pre></td></tr></table></figure><h1 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h1><strong>建表规范</strong> </li></ul><ul><li>每个表保存一个实体信息</li><li>每个具有一个ID字段作为主键</li><li>ID主键 + 原子表<br>:::info<br>1NF, 第一范式<br>:::<br>字段不能再分，就满足第一范式。<br>:::info<br>2NF, 第二范式<br>:::<br>满足第一范式的前提下，不能出现部分依赖。<br>消除复合主键就可以避免部分依赖。增加单列关键字。<br>:::info<br>3NF, 第三范式<br>:::<br>满足第二范式的前提下，不能出现传递依赖。<br>某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。<br>将一个实体信息的数据放在一个表内实现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> mySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/JDBC%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/09/15/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E5%BA%93/JDBC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>JDBC API是一个Java API可以访问任何类型的数据库的数据，尤其是存储在关系数据库中的数据。 JDBC的工作原理与Java在各种平台一样，如Windows，Mac OS和各种版本的UNIX系统。</p><h1 id="使用JDBC"><a href="#使用JDBC" class="headerlink" title="使用JDBC"></a>使用JDBC</h1><p>:::info</p><ol><li>导入jar包<br>:::<br><img src="/bokepicture/mysql-connector-java-5.1.37-bin.zip" alt=""><br>:::info</li><li>注册驱动<br>:::<br><img src="https://static01.imgkr.com/temp/16dc73cf79894b2da99a87be0542e0ec.png" alt=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>:::info</li><li>获取连接<br>:::<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span>DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/表名&quot;</span>,<span class="string">&quot;用户&quot;</span>,<span class="string">&quot;密码&quot;</span>);</span><br></pre></td></tr></table></figure>:::info</li><li>获取执行者对象<br>:::<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> Statement stm=con.createStatement();<span class="comment">//返回一个向数据库发送语句的Statement对象</span></span><br><span class="line"> <span class="comment">//返回一个PreparedStatement对象，向数据库发送参数化sql语句</span></span><br><span class="line"> <span class="type">PreparedStatement</span> <span class="variable">ppd</span> <span class="operator">=</span>con.PreparedStatement(String s);</span><br><span class="line"><span class="comment">//返回CallableStatement对象，该对象用于调用sql的存储过程</span></span><br><span class="line"> <span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> con.prepareCall();</span><br></pre></td></tr></table></figure>[PreparedStatement]{.label .info}<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user value(?,?,?)&quot;</span>;</span><br><span class="line"> <span class="type">PreparedStatement</span> <span class="variable">psm</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在PreparedStatement对象中执行sql语句，必须是DML语句或无返回值的sql语句</span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">()</span></span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> ResultSet <span class="title function_">executeQuert</span><span class="params">()</span><span class="comment">//执行sql查询</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setInt</span><span class="params">(<span class="type">int</span> parameterIndex,<span class="type">int</span> x)</span><span class="comment">//将指定的参数设置为int类型的x</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setFloat</span><span class="params">(<span class="type">int</span> parameterIndex,<span class="type">float</span> x)</span><span class="comment">//将指定的参数设置为float类型的x</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setString</span><span class="params">(<span class="type">int</span> parameterIndex,String x)</span><span class="comment">//将指定的参数设置为String类型的x</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(<span class="type">int</span> parameterIndex,Date x)</span><span class="comment">//将指定的参数设置为Date类型的x</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addBatch</span><span class="params">()</span><span class="comment">//将一组参数添加到PreparedStatement对象的批处理命令中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>:::info</li><li>写sql语句并执行<br>:::<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from 表名&quot;</span></span><br><span class="line"><span class="type">RusultSet</span> <span class="variable">rs1</span> <span class="operator">=</span> stm.executeQuery(sql);<span class="comment">//用于执行sql语句的select语句</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rs2</span> <span class="operator">=</span> stm.executeUpdate(sql);<span class="comment">//用于执行sql语句的update,delete,insert语句</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">rs1</span> <span class="operator">=</span> stm.execute(sql);<span class="comment">//用于执行各种sql语句</span></span><br></pre></td></tr></table></figure>:::info</li><li>保存JDBC查询的结果集，并输出<br>:::<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rs.getString(<span class="type">int</span> ColumnIndex)<span class="comment">//获取string类型的值，columnindex代码字段索引</span></span><br><span class="line">rs.getString(String ColumnName)<span class="comment">//获取string类型的值，columnName代码字段名称</span></span><br><span class="line">rs.getInt(<span class="type">int</span> ColumnIndex)<span class="comment">//获取int类型的值，columnindex代码字段索引</span></span><br><span class="line">rs.getInt(String ColumnName)<span class="comment">//获取int类型的值，columnName代码字段名称</span></span><br><span class="line">rs.getDate(<span class="type">int</span> ColumnIndex)<span class="comment">//获取date类型的值，columnindex代码字段索引</span></span><br><span class="line">rs.getDate(String ColumnName)<span class="comment">//获取date类型的值，columnName代码字段名称</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">next</span><span class="params">()</span>;<span class="comment">//将游标向下移一行</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">absolute</span><span class="params">(<span class="type">int</span> row)</span><span class="comment">//将游标移动到指定行</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">previous</span><span class="params">()</span><span class="comment">//将游标向上移一行</span></span><br></pre></td></tr></table></figure><h2 id="完整的JDBC代码"><a href="#完整的JDBC代码" class="headerlink" title="完整的JDBC代码"></a>完整的JDBC代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">Statement</span> <span class="variable">star</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">       <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">           <span class="comment">//创建连接</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/girls?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=false&quot;</span>;</span><br><span class="line">           con = DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;panther9985&quot;</span>);</span><br><span class="line">           <span class="comment">//生成执行者</span></span><br><span class="line">           star =con.createStatement();</span><br><span class="line">           <span class="comment">//写sql语句</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM test&quot;</span>;</span><br><span class="line">           <span class="comment">//执行</span></span><br><span class="line">           rs =star.executeQuery(sql);</span><br><span class="line">           <span class="comment">//处理结果</span></span><br><span class="line">           <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">               System.out.println(rs.getInt(<span class="string">&quot;id&quot;</span>)+<span class="string">&quot;\t&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">           <span class="keyword">assert</span> rs != <span class="literal">null</span>;</span><br><span class="line">           rs.close();</span><br><span class="line">           star.close();</span><br><span class="line">           con.close();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="案列sql版的判断登录"><a href="#案列sql版的判断登录" class="headerlink" title="案列sql版的判断登录"></a>案列sql版的判断登录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/girls?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=false&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;panther9985&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成执行对象</span></span><br><span class="line"><span class="comment">//Statement stam = conn.createStatement();</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psm</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;?&quot;</span>);</span><br><span class="line"><span class="comment">//写sql语句执行</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span>  <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line"><span class="comment">//接受sql执行的语句</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span>psm.executeQuery(sql);</span><br><span class="line">String[] number = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">String[] password = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">   number[i] = rs.getString(<span class="number">2</span>);</span><br><span class="line">   password[i] = rs.getString(<span class="number">3</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入账号&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">UserNumber</span> <span class="operator">=</span>sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">UserPassword</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">0</span>; k &lt; <span class="number">3</span>; k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(UserNumber.equals(number[k])&amp;&amp;UserPassword.equals(password[k]))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(UserNumber.equals(number[k]))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;密码输入错误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(UserPassword.equals(password[k]))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;账号不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;还剩&quot;</span>+(<span class="number">4</span>-j)+<span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">rs.close();</span><br><span class="line">psm.close();</span><br><span class="line">conn.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例通过配置文件完成JDBC"><a href="#案例通过配置文件完成JDBC" class="headerlink" title="案例通过配置文件完成JDBC"></a>案例通过配置文件完成JDBC</h2></li></ol><ul><li>由于Driver和connection和数据库地址及用户名都是几乎相同的，所以我们可以用配置文件将他们封装起来,创建一个JDBC.properties文件存放以下数据<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://127.0.0.1:3306/表名</span><br><span class="line">user=用户名</span><br><span class="line">password=密码</span><br></pre></td></tr></table></figure></li><li>通过Properties加载文件数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过配置文件书写JDBC</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//加载配置文件数据</span></span><br><span class="line">        prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\download\\java\\JDBC\\src\\jdbc.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取对应键值并与JDBC配合注册连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(sql);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(sql,user,password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行对象</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">psm</span> <span class="operator">=</span> con.prepareStatement(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">mysql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,sex,borndate from beauty&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">ps</span> <span class="operator">=</span> psm.executeQuery(mysql);</span><br><span class="line">        <span class="comment">//输出一行sql数据</span></span><br><span class="line">        <span class="comment">//移动游标，默认在第一行的上面</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> ps.next();</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> ps.getInt(<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ps.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> ps.getString(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">born</span> <span class="operator">=</span> ps.getDate(<span class="string">&quot;borndate&quot;</span>);</span><br><span class="line">        System.out.println(id+<span class="string">&quot;\t&quot;</span>+name+<span class="string">&quot;\t&quot;</span>+sex+<span class="string">&quot;\t&quot;</span>+born);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        ps.close();</span><br><span class="line">        psm.close();</span><br><span class="line">        con.close();</span><br></pre></td></tr></table></figure><h1 id="JDBC踩坑"><a href="#JDBC踩坑" class="headerlink" title="JDBC踩坑"></a>JDBC踩坑</h1>:::warning</li><li>MySQLNonTransientConnectionException<br>:::<br>[报错原因]{.label .info}<br>mysql驱动版本与mysql数据库不一致;<br>[解决方法]{.label .warning}<br>更换mysql数据库版本一致的mysql驱动<br>我的Mysql是8.0版本，导入项目里的jar包是5.1版本，导致不匹配出错。<br>更换为8.0版本可以(jdk是1.8版本)<br>:::warning</li><li>Loading class com.mysql.jdbc.Driver.This is deprecated. The new driver<br>:::<br>[报错原因]{.label .info}<br>加载类<code>com.mysql.jdbc.Driver</code>已经被弃用<br>[解决方法]{.label .warning}<br>新的驱动程序类是<code>com.mysql.cj.jdbc.Driver</code>。驱动程序是通过SPI自动注册的，手动加载驱动程序类通常是不必要的。所以只需要在<code>application.yml</code>文件中把<code>com.mysql.jdbc.Driver</code>修改为<code>com.mysql.cj.jdbc.Driver</code>即可<br>:::warning<br>WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.<br>:::<br>[报错原因]{.label .info}<br>警告:不建议在没有服务器身份验证的情况下建立SSL连接。根据MySQL 5.5.45+，如果没有设置显式选项，默认情况下必须建立5.6.26+和5.7.6+要求的SSL连接。您需要通过设置useSSL=false显式禁用SSL，或者设置useSSL=true并为服务器证书验证提供信任存储。<br>[解决方法]{.label .warning}<br>其实这个错并不用管，如果看着烦可以加上这句话<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useSSL=<span class="literal">false</span></span><br></pre></td></tr></table></figure>:::warning<br>Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezon’<br>:::<br>[报错原因]{.label .info}<br>intellij idea连接mysql数据库时报错:Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezon’,即时区无效，需要设置时区<br>[解决方法]{.label .warning}<br>在Advanced中将serverTimezone设置成UTC即可<br>:::warning<br>javax.net.ssl.SSLException: closing inbound before receiving peer‘s close_notify<br>:::<br>[报错原因]{.label .info}<br>MySQL 8.0 以上版本不需要建立 SSL 连接的，需要显式关闭。<br>[解决方法]{.label .warning}<br>之前版本，安全性做的并不够好，比如安装时生成的root空密码账号、存在任何用户都能连接上的 test 库等，导致数据库存在较大的安全隐患。从5.7版本开始MySQL官方对这些问题逐步进行了修复，到了 MySQL 8.0 以上版本已经不需要使用 SSL 进行连接加密了。但是高版本仍然保留了这个接口，所以需要在连接的时候手动写明是否需要进行 SSL 连接，这里我们手动关闭 SSL 连接加密就OK。即在sql地址后面添加<code>useSSL=false</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> mySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring5新特性</title>
      <link href="/2022/07/29/computer-science/java/spring5/Spring5Text4/"/>
      <url>/2022/07/29/computer-science/java/spring5/Spring5Text4/</url>
      
        <content type="html"><![CDATA[<h2 id="整合日志框架"><a href="#整合日志框架" class="headerlink" title="整合日志框架"></a>整合日志框架</h2><ol><li>Spring5.0 框架自带了通用的日志封装 </li></ol><ul><li>Spring5 已经移除 Log4jConfigListener，官方建议使用 Log4j2</li><li>Spring5 框架整合 Log4j2<div class="tip info"><p>引入对应jar包后创建对应配置文件</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>test案例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(test01.class);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLog4j2</span><span class="params">()</span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;[ERROE]&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;[WARN]&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;[info]&quot;</span>);</span><br><span class="line">        logger.debug(<span class="string">&quot;[debug]&quot;</span>);</span><br><span class="line">        logger.trace(<span class="string">&quot;[trace]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">    <span class="comment">//[ERROE]</span></span><br><span class="line">    <span class="comment">//[WARN]</span></span><br><span class="line">    <span class="comment">//[info]</span></span><br></pre></td></tr></table></figure><h2 id="Nullable注解"><a href="#Nullable注解" class="headerlink" title="Nullable注解"></a>Nullable注解</h2></li></ul><ol><li>@Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以<br>为空，参数值可以为空<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法可以返回空值</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数可以为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getid</span><span class="params">(<span class="meta">@Nullable</span> String username)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性值可以为空</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String Username;</span><br></pre></td></tr></table></figure><div class="tip info"><p>Spring5 核心容器支持函数式风格 GenericApplicationContext</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数式风格创建对象，交给 spring 进行管理</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenericApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1 创建 GenericApplicationContext 对象</span></span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    <span class="comment">//2 调用 context 的方法对象注册</span></span><br><span class="line">    context.refresh();</span><br><span class="line">    context.registerBean(<span class="string">&quot;user1&quot;</span>,User.class,() -&gt; <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    <span class="comment">//3 获取在 spring 注册的对象</span></span><br><span class="line">    <span class="comment">// User user = (User)context.getBean(&quot;com.atguigu.spring5.test.User&quot;);</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)context.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringWebflux"><a href="#SpringWebflux" class="headerlink" title="SpringWebflux"></a>SpringWebflux</h2></li><li>SpringWebflux 介绍</li></ol><ul><li>是 Spring5 添加新的模块，用于 web 开发的，功能和 SpringMVC 类似的，Webflux 使用</li><li>使用传统 web 框架，比如 SpringMVC，这些基于 Servlet 容器，Webflux 是一种异步非阻<br>塞的框架，异步非阻塞的框架在 Servlet3.1 以后才支持，核心是基于 Reactor 的相关 API 实现<br>的。</li><li>当前一种比较流程响应式编程出现的框架。<h1 id="SpringWebflux基于注解编程"><a href="#SpringWebflux基于注解编程" class="headerlink" title="SpringWebflux基于注解编程"></a>SpringWebflux基于注解编程</h1><h1 id="SpringWebflux基于函数式编程"><a href="#SpringWebflux基于函数式编程" class="headerlink" title="SpringWebflux基于函数式编程"></a>SpringWebflux基于函数式编程</h1></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
